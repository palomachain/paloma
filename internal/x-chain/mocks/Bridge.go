// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// Bridge is an autogenerated mock type for the Bridge type
type Bridge struct {
	mock.Mock
}

// ExecuteJob provides a mock function with given fields: ctx, definition, payload, refID
func (_m *Bridge) ExecuteJob(ctx types.Context, definition []byte, payload []byte, refID string) error {
	ret := _m.Called(ctx, definition, payload, refID)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, []byte, []byte, string) error); ok {
		r0 = rf(ctx, definition, payload, refID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyJob provides a mock function with given fields: ctx, definition, payload, refID
func (_m *Bridge) VerifyJob(ctx types.Context, definition []byte, payload []byte, refID string) error {
	ret := _m.Called(ctx, definition, payload, refID)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, []byte, []byte, string) error); ok {
		r0 = rf(ctx, definition, payload, refID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// XChainReferenceIDs provides a mock function with given fields: _a0
func (_m *Bridge) XChainReferenceIDs(_a0 types.Context) []string {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(types.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// XChainType provides a mock function with given fields:
func (_m *Bridge) XChainType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewBridge interface {
	mock.TestingT
	Cleanup(func())
}

// NewBridge creates a new instance of Bridge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBridge(t mockConstructorTestingTNewBridge) *Bridge {
	mock := &Bridge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
