// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/skyway/legacy_msgs.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/palomachain/paloma/v2/x/valset/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// This message was renamed to `MsgBatchSendToRemoteClaim`. However, since we
// already had some messages in the skyway attestation queue, we now get errors
// on genesis import and when trying to prune the queue.
// The queue only keeps the latest 1000 events, so we can remove this file once
// the messages are rotated out.
type MsgBatchSendToEthClaim struct {
	EventNonce       uint64            `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight   uint64            `protobuf:"varint,2,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	BatchNonce       uint64            `protobuf:"varint,3,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	TokenContract    string            `protobuf:"bytes,4,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	ChainReferenceId string            `protobuf:"bytes,5,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Orchestrator     string            `protobuf:"bytes,6,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	Metadata         types.MsgMetadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata"`
	SkywayNonce      uint64            `protobuf:"varint,8,opt,name=skyway_nonce,json=skywayNonce,proto3" json:"skyway_nonce,omitempty"`
}

func (m *MsgBatchSendToEthClaim) Reset()         { *m = MsgBatchSendToEthClaim{} }
func (m *MsgBatchSendToEthClaim) String() string { return proto.CompactTextString(m) }
func (*MsgBatchSendToEthClaim) ProtoMessage()    {}
func (*MsgBatchSendToEthClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ec51423b5f9718d, []int{0}
}
func (m *MsgBatchSendToEthClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchSendToEthClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchSendToEthClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchSendToEthClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchSendToEthClaim.Merge(m, src)
}
func (m *MsgBatchSendToEthClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchSendToEthClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchSendToEthClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchSendToEthClaim proto.InternalMessageInfo

func (m *MsgBatchSendToEthClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgBatchSendToEthClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgBatchSendToEthClaim) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *MsgBatchSendToEthClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgBatchSendToEthClaim) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgBatchSendToEthClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgBatchSendToEthClaim) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgBatchSendToEthClaim) GetSkywayNonce() uint64 {
	if m != nil {
		return m.SkywayNonce
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgBatchSendToEthClaim)(nil), "palomachain.paloma.skyway.MsgBatchSendToEthClaim")
}

func init() {
	proto.RegisterFile("palomachain/paloma/skyway/legacy_msgs.proto", fileDescriptor_1ec51423b5f9718d)
}

var fileDescriptor_1ec51423b5f9718d = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0x73, 0x25, 0x94, 0xe2, 0xb4, 0x55, 0x65, 0x21, 0x38, 0x3a, 0x5c, 0x43, 0x25, 0xaa,
	0x08, 0xaa, 0xb3, 0x80, 0x8d, 0x31, 0x15, 0xa8, 0x0c, 0x61, 0x08, 0x4c, 0x2c, 0x27, 0xc7, 0x79,
	0xd8, 0xa7, 0x9c, 0xfd, 0xa2, 0xf3, 0x23, 0x90, 0x95, 0x4f, 0xc0, 0x47, 0xe1, 0x63, 0x74, 0xec,
	0xc8, 0x84, 0x50, 0x32, 0xf0, 0x19, 0xd8, 0xd0, 0xd9, 0xd7, 0x08, 0xa4, 0x4c, 0xf7, 0xf4, 0xf3,
	0xff, 0xfd, 0xad, 0xff, 0xfd, 0xcd, 0x9e, 0xce, 0x65, 0x85, 0x56, 0x2a, 0x23, 0x4b, 0x27, 0xe2,
	0x2c, 0xfc, 0x6c, 0xf9, 0x59, 0x2e, 0x45, 0x05, 0x5a, 0xaa, 0x65, 0x61, 0xbd, 0xf6, 0xf9, 0xbc,
	0x46, 0x42, 0xfe, 0xf0, 0x1f, 0x71, 0x1e, 0xe7, 0x3c, 0x8a, 0x8f, 0x1f, 0x28, 0xf4, 0x16, 0xbd,
	0xb0, 0x5e, 0x8b, 0xc5, 0xb3, 0xe6, 0x13, 0x77, 0x8e, 0xef, 0x69, 0xd4, 0x18, 0x46, 0xd1, 0x4c,
	0x2d, 0x3d, 0xdb, 0x72, 0xed, 0x42, 0x56, 0x1e, 0x48, 0x28, 0xb4, 0x16, 0x5d, 0xd4, 0x9d, 0xfe,
	0xd9, 0x61, 0xf7, 0x47, 0x5e, 0x0f, 0x25, 0x29, 0xf3, 0x0e, 0xdc, 0xf4, 0x3d, 0xbe, 0x22, 0x73,
	0x51, 0xc9, 0xd2, 0xf2, 0x13, 0xd6, 0x83, 0x05, 0x38, 0x2a, 0x1c, 0x3a, 0x05, 0x69, 0xd2, 0x4f,
	0x06, 0xdd, 0x31, 0x0b, 0xe8, 0x6d, 0x43, 0xf8, 0x80, 0x1d, 0x01, 0x99, 0x62, 0x52, 0xa1, 0x9a,
	0x15, 0x06, 0x4a, 0x6d, 0x28, 0xdd, 0x09, 0xaa, 0x43, 0x20, 0x33, 0x6c, 0xf0, 0x65, 0xa0, 0x8d,
	0xd5, 0xa4, 0xb9, 0xa1, 0xb5, 0xba, 0x15, 0xad, 0x02, 0x8a, 0x56, 0x8f, 0xd9, 0x21, 0xe1, 0x0c,
	0x5c, 0xa1, 0xd0, 0x51, 0x2d, 0x15, 0xa5, 0xdd, 0x7e, 0x32, 0xb8, 0x3b, 0x3e, 0x08, 0xf4, 0xa2,
	0x85, 0xfc, 0x9c, 0xf1, 0x90, 0xa8, 0xa8, 0xe1, 0x23, 0xd4, 0xe0, 0x14, 0x14, 0xe5, 0x34, 0xbd,
	0x1d, 0xa4, 0x47, 0xe1, 0x64, 0x7c, 0x73, 0xf0, 0x66, 0xca, 0x4f, 0xd9, 0x3e, 0xd6, 0xca, 0x80,
	0xa7, 0x5a, 0x12, 0xd6, 0xe9, 0x6e, 0xd0, 0xfd, 0xc7, 0xf8, 0x25, 0xdb, 0xb3, 0x40, 0x72, 0x2a,
	0x49, 0xa6, 0x77, 0xfa, 0xc9, 0xa0, 0xf7, 0xfc, 0x2c, 0xdf, 0x52, 0x42, 0xfc, 0x75, 0xf9, 0xc8,
	0xeb, 0x51, 0xab, 0x1e, 0x76, 0xaf, 0x7e, 0x9e, 0x74, 0xc6, 0x9b, 0x6d, 0xfe, 0x88, 0xed, 0xc7,
	0xaa, 0xda, 0x90, 0x7b, 0x21, 0x64, 0x2f, 0xb2, 0x90, 0xf2, 0xe5, 0xc1, 0xd7, 0xdf, 0xdf, 0x9f,
	0x6c, 0x36, 0x86, 0xaf, 0xaf, 0x56, 0x59, 0x72, 0xbd, 0xca, 0x92, 0x5f, 0xab, 0x2c, 0xf9, 0xb6,
	0xce, 0x3a, 0xd7, 0xeb, 0xac, 0xf3, 0x63, 0x9d, 0x75, 0x3e, 0x9c, 0xeb, 0x92, 0xcc, 0xa7, 0x49,
	0xae, 0xd0, 0x8a, 0x2d, 0x45, 0x7e, 0xb9, 0x79, 0x41, 0xb4, 0x9c, 0x83, 0x9f, 0xec, 0x86, 0x2a,
	0x5f, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x05, 0x75, 0x87, 0x6b, 0x02, 0x00, 0x00,
}

func (m *MsgBatchSendToEthClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchSendToEthClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchSendToEthClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkywayNonce != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.SkywayNonce))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x22
	}
	if m.BatchNonce != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x18
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintLegacyMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLegacyMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovLegacyMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBatchSendToEthClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.EthBlockHeight))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.BatchNonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovLegacyMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovLegacyMsgs(uint64(l))
	if m.SkywayNonce != 0 {
		n += 1 + sovLegacyMsgs(uint64(m.SkywayNonce))
	}
	return n
}

func sovLegacyMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLegacyMsgs(x uint64) (n int) {
	return sovLegacyMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBatchSendToEthClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacyMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchSendToEthClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchSendToEthClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkywayNonce", wireType)
			}
			m.SkywayNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkywayNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacyMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacyMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLegacyMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLegacyMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacyMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLegacyMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLegacyMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLegacyMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLegacyMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLegacyMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLegacyMsgs = fmt.Errorf("proto: unexpected end of group")
)
