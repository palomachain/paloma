// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/skyway/batch.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	cosmossdk_io_math "cosmossdk.io/math"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OutgoingTxBatch represents a batch of transactions going from Paloma to remote chain
type OutgoingTxBatch struct {
	BatchNonce            uint64               `protobuf:"varint,1,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	BatchTimeout          uint64               `protobuf:"varint,2,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	Transactions          []OutgoingTransferTx `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions"`
	TokenContract         string               `protobuf:"bytes,4,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	PalomaBlockCreated    uint64               `protobuf:"varint,5,opt,name=paloma_block_created,json=palomaBlockCreated,proto3" json:"paloma_block_created,omitempty"`
	ChainReferenceId      string               `protobuf:"bytes,6,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	BytesToSign           []byte               `protobuf:"bytes,7,opt,name=bytes_to_sign,json=bytesToSign,proto3" json:"bytes_to_sign,omitempty"`
	Assignee              string               `protobuf:"bytes,8,opt,name=assignee,proto3" json:"assignee,omitempty"`
	GasEstimate           uint64               `protobuf:"varint,9,opt,name=gas_estimate,json=gasEstimate,proto3" json:"gas_estimate,omitempty"`
	AssigneeRemoteAddress []byte               `protobuf:"bytes,10,opt,name=assignee_remote_address,json=assigneeRemoteAddress,proto3" json:"assignee_remote_address,omitempty"`
}

func (m *OutgoingTxBatch) Reset()         { *m = OutgoingTxBatch{} }
func (m *OutgoingTxBatch) String() string { return proto.CompactTextString(m) }
func (*OutgoingTxBatch) ProtoMessage()    {}
func (*OutgoingTxBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a379404a8854af, []int{0}
}

func (m *OutgoingTxBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *OutgoingTxBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingTxBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *OutgoingTxBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingTxBatch.Merge(m, src)
}

func (m *OutgoingTxBatch) XXX_Size() int {
	return m.Size()
}

func (m *OutgoingTxBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingTxBatch.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingTxBatch proto.InternalMessageInfo

func (m *OutgoingTxBatch) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *OutgoingTxBatch) GetBatchTimeout() uint64 {
	if m != nil {
		return m.BatchTimeout
	}
	return 0
}

func (m *OutgoingTxBatch) GetTransactions() []OutgoingTransferTx {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *OutgoingTxBatch) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *OutgoingTxBatch) GetPalomaBlockCreated() uint64 {
	if m != nil {
		return m.PalomaBlockCreated
	}
	return 0
}

func (m *OutgoingTxBatch) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *OutgoingTxBatch) GetBytesToSign() []byte {
	if m != nil {
		return m.BytesToSign
	}
	return nil
}

func (m *OutgoingTxBatch) GetAssignee() string {
	if m != nil {
		return m.Assignee
	}
	return ""
}

func (m *OutgoingTxBatch) GetGasEstimate() uint64 {
	if m != nil {
		return m.GasEstimate
	}
	return 0
}

func (m *OutgoingTxBatch) GetAssigneeRemoteAddress() []byte {
	if m != nil {
		return m.AssigneeRemoteAddress
	}
	return nil
}

// OutgoingTransferTx represents an individual send from Paloma to remote chain
type OutgoingTransferTx struct {
	Id              uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender          string                `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	DestAddress     string                `protobuf:"bytes,3,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	Erc20Token      ERC20Token            `protobuf:"bytes,4,opt,name=erc20_token,json=erc20Token,proto3" json:"erc20_token"`
	BridgeTaxAmount cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=bridge_tax_amount,json=bridgeTaxAmount,proto3,customtype=cosmossdk.io/math.Int" json:"bridge_tax_amount"`
}

func (m *OutgoingTransferTx) Reset()         { *m = OutgoingTransferTx{} }
func (m *OutgoingTransferTx) String() string { return proto.CompactTextString(m) }
func (*OutgoingTransferTx) ProtoMessage()    {}
func (*OutgoingTransferTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a379404a8854af, []int{1}
}

func (m *OutgoingTransferTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *OutgoingTransferTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingTransferTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *OutgoingTransferTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingTransferTx.Merge(m, src)
}

func (m *OutgoingTransferTx) XXX_Size() int {
	return m.Size()
}

func (m *OutgoingTransferTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingTransferTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingTransferTx proto.InternalMessageInfo

func (m *OutgoingTransferTx) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OutgoingTransferTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *OutgoingTransferTx) GetDestAddress() string {
	if m != nil {
		return m.DestAddress
	}
	return ""
}

func (m *OutgoingTransferTx) GetErc20Token() ERC20Token {
	if m != nil {
		return m.Erc20Token
	}
	return ERC20Token{}
}

type EventOutgoingBatchCanceled struct {
	BridgeContract string `protobuf:"bytes,1,opt,name=bridge_contract,json=bridgeContract,proto3" json:"bridge_contract,omitempty"`
	BridgeChainId  string `protobuf:"bytes,2,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	BatchId        string `protobuf:"bytes,3,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Nonce          string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EventOutgoingBatchCanceled) Reset()         { *m = EventOutgoingBatchCanceled{} }
func (m *EventOutgoingBatchCanceled) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingBatchCanceled) ProtoMessage()    {}
func (*EventOutgoingBatchCanceled) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a379404a8854af, []int{2}
}

func (m *EventOutgoingBatchCanceled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventOutgoingBatchCanceled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingBatchCanceled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventOutgoingBatchCanceled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingBatchCanceled.Merge(m, src)
}

func (m *EventOutgoingBatchCanceled) XXX_Size() int {
	return m.Size()
}

func (m *EventOutgoingBatchCanceled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingBatchCanceled.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingBatchCanceled proto.InternalMessageInfo

func (m *EventOutgoingBatchCanceled) GetBridgeContract() string {
	if m != nil {
		return m.BridgeContract
	}
	return ""
}

func (m *EventOutgoingBatchCanceled) GetBridgeChainId() string {
	if m != nil {
		return m.BridgeChainId
	}
	return ""
}

func (m *EventOutgoingBatchCanceled) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

func (m *EventOutgoingBatchCanceled) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

type EventOutgoingBatch struct {
	BridgeContract string `protobuf:"bytes,1,opt,name=bridge_contract,json=bridgeContract,proto3" json:"bridge_contract,omitempty"`
	BridgeChainId  string `protobuf:"bytes,2,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	BatchId        string `protobuf:"bytes,3,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Nonce          string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Assignee       string `protobuf:"bytes,5,opt,name=assignee,proto3" json:"assignee,omitempty"`
}

func (m *EventOutgoingBatch) Reset()         { *m = EventOutgoingBatch{} }
func (m *EventOutgoingBatch) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingBatch) ProtoMessage()    {}
func (*EventOutgoingBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a379404a8854af, []int{3}
}

func (m *EventOutgoingBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventOutgoingBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventOutgoingBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingBatch.Merge(m, src)
}

func (m *EventOutgoingBatch) XXX_Size() int {
	return m.Size()
}

func (m *EventOutgoingBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingBatch proto.InternalMessageInfo

func (m *EventOutgoingBatch) GetBridgeContract() string {
	if m != nil {
		return m.BridgeContract
	}
	return ""
}

func (m *EventOutgoingBatch) GetBridgeChainId() string {
	if m != nil {
		return m.BridgeChainId
	}
	return ""
}

func (m *EventOutgoingBatch) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

func (m *EventOutgoingBatch) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *EventOutgoingBatch) GetAssignee() string {
	if m != nil {
		return m.Assignee
	}
	return ""
}

func init() {
	proto.RegisterType((*OutgoingTxBatch)(nil), "palomachain.paloma.skyway.OutgoingTxBatch")
	proto.RegisterType((*OutgoingTransferTx)(nil), "palomachain.paloma.skyway.OutgoingTransferTx")
	proto.RegisterType((*EventOutgoingBatchCanceled)(nil), "palomachain.paloma.skyway.EventOutgoingBatchCanceled")
	proto.RegisterType((*EventOutgoingBatch)(nil), "palomachain.paloma.skyway.EventOutgoingBatch")
}

func init() {
	proto.RegisterFile("palomachain/paloma/skyway/batch.proto", fileDescriptor_16a379404a8854af)
}

var fileDescriptor_16a379404a8854af = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xcf, 0x6e, 0x13, 0x3f,
	0x10, 0xce, 0x36, 0xfd, 0x17, 0x27, 0x69, 0x7f, 0x3f, 0xab, 0x85, 0x6d, 0x24, 0xd2, 0x10, 0x54,
	0x88, 0x44, 0xd9, 0x54, 0x41, 0xe2, 0xde, 0x44, 0x45, 0x8a, 0x84, 0x40, 0x5a, 0x22, 0x21, 0x71,
	0xb1, 0x9c, 0xf5, 0x74, 0x63, 0xa5, 0x6b, 0x57, 0x6b, 0x07, 0x92, 0xb7, 0xe0, 0x09, 0x78, 0x08,
	0x9e, 0xa2, 0xc7, 0x8a, 0x13, 0xe2, 0x50, 0xa1, 0xf6, 0x25, 0x38, 0xa2, 0x1d, 0x6f, 0x52, 0xaa,
	0x52, 0xae, 0xdc, 0xec, 0xef, 0xfb, 0x66, 0xe6, 0xb3, 0x67, 0x6c, 0xb2, 0x77, 0xca, 0x4f, 0x74,
	0xc2, 0xa3, 0x11, 0x97, 0xaa, 0xed, 0xd6, 0x6d, 0x33, 0x9e, 0x7d, 0xe4, 0xb3, 0xf6, 0x90, 0xdb,
	0x68, 0x14, 0x9c, 0xa6, 0xda, 0x6a, 0xba, 0xf3, 0x9b, 0x2c, 0x70, 0xeb, 0xc0, 0xc9, 0x6a, 0x5b,
	0xb1, 0x8e, 0x35, 0xaa, 0xda, 0xd9, 0xca, 0x05, 0xd4, 0x9e, 0xde, 0x9d, 0x97, 0x5b, 0x0b, 0xc6,
	0x72, 0x2b, 0xb5, 0x72, 0xe2, 0xe6, 0xd7, 0x22, 0xd9, 0x7c, 0x33, 0xb1, 0xb1, 0x96, 0x2a, 0x1e,
	0x4c, 0xbb, 0x59, 0x5d, 0xba, 0x4b, 0xca, 0x68, 0x80, 0x29, 0xad, 0x22, 0xf0, 0xbd, 0x86, 0xd7,
	0x5a, 0x0e, 0x09, 0x42, 0xaf, 0x33, 0x84, 0x3e, 0x22, 0x55, 0x27, 0xb0, 0x32, 0x01, 0x3d, 0xb1,
	0xfe, 0x12, 0x4a, 0x2a, 0x08, 0x0e, 0x1c, 0x46, 0xdf, 0x91, 0x8a, 0x4d, 0xb9, 0x32, 0x3c, 0xca,
	0xca, 0x19, 0xbf, 0xd8, 0x28, 0xb6, 0xca, 0x9d, 0x67, 0xc1, 0x9d, 0xc7, 0x09, 0x16, 0x3e, 0xb2,
	0xb0, 0x63, 0x48, 0x07, 0xd3, 0xee, 0xf2, 0xd9, 0xc5, 0x6e, 0x21, 0xbc, 0x91, 0x88, 0xee, 0x91,
	0x0d, 0xab, 0xc7, 0xa0, 0x58, 0xa4, 0x95, 0x4d, 0x79, 0x64, 0xfd, 0xe5, 0x86, 0xd7, 0x2a, 0x85,
	0x55, 0x44, 0x7b, 0x39, 0x48, 0x0f, 0xc8, 0x96, 0x4b, 0xcf, 0x86, 0x27, 0x3a, 0x1a, 0xb3, 0x28,
	0x05, 0x6e, 0x41, 0xf8, 0x2b, 0xe8, 0x95, 0x3a, 0xae, 0x9b, 0x51, 0x3d, 0xc7, 0xd0, 0x7d, 0x42,
	0xd1, 0x16, 0x4b, 0xe1, 0x18, 0x52, 0x50, 0x11, 0x30, 0x29, 0xfc, 0x55, 0x4c, 0xfe, 0x1f, 0x32,
	0xe1, 0x9c, 0xe8, 0x0b, 0xda, 0x24, 0xd5, 0xe1, 0xcc, 0x82, 0x61, 0x56, 0x33, 0x23, 0x63, 0xe5,
	0xaf, 0x35, 0xbc, 0x56, 0x25, 0x2c, 0x23, 0x38, 0xd0, 0x6f, 0x65, 0xac, 0x68, 0x8d, 0xac, 0x73,
	0x93, 0x91, 0x00, 0xfe, 0x3a, 0xe6, 0x59, 0xec, 0xe9, 0x43, 0x52, 0x89, 0xb9, 0x61, 0x60, 0xac,
	0x4c, 0xb8, 0x05, 0xbf, 0x84, 0xbe, 0xca, 0x31, 0x37, 0x47, 0x39, 0x44, 0x5f, 0x90, 0xfb, 0x73,
	0x39, 0x4b, 0x21, 0xd1, 0x16, 0x18, 0x17, 0x22, 0x05, 0x63, 0x7c, 0x82, 0xc5, 0xb6, 0xe7, 0x74,
	0x88, 0xec, 0xa1, 0x23, 0x9b, 0x3f, 0x3d, 0x42, 0x6f, 0x5f, 0x26, 0xdd, 0x20, 0x4b, 0x52, 0xe4,
	0xed, 0x5c, 0x92, 0x82, 0xde, 0x23, 0xab, 0x06, 0x94, 0x80, 0x14, 0xfb, 0x57, 0x0a, 0xf3, 0x5d,
	0xe6, 0x4c, 0x80, 0xb1, 0x8b, 0x5a, 0x45, 0x64, 0xcb, 0x19, 0x96, 0x57, 0xa0, 0xaf, 0x48, 0x19,
	0xd2, 0xa8, 0x73, 0xc0, 0xf0, 0xce, 0xb1, 0x01, 0xe5, 0xce, 0xde, 0x5f, 0x7a, 0x7b, 0x14, 0xf6,
	0x3a, 0x07, 0x83, 0x4c, 0x9c, 0xf7, 0x94, 0x60, 0x3c, 0x22, 0xb4, 0x4f, 0xfe, 0x1f, 0xa6, 0x52,
	0xc4, 0xc0, 0x2c, 0x9f, 0x32, 0x9e, 0xe8, 0x89, 0xb2, 0xd8, 0xa7, 0x52, 0xf7, 0x41, 0x26, 0xfe,
	0x7e, 0xb1, 0xbb, 0x1d, 0x69, 0x93, 0x68, 0x63, 0xc4, 0x38, 0x90, 0xba, 0x9d, 0x70, 0x3b, 0x0a,
	0xfa, 0xca, 0x86, 0x9b, 0x2e, 0x6e, 0xc0, 0xa7, 0x87, 0x18, 0xd5, 0xfc, 0xec, 0x91, 0xda, 0xd1,
	0x07, 0x50, 0x76, 0x7e, 0x7e, 0x1c, 0xe9, 0x1e, 0x57, 0x11, 0x9c, 0x80, 0xa0, 0x4f, 0x48, 0x1e,
	0x71, 0x3d, 0x3c, 0x1e, 0x9e, 0x6e, 0xc3, 0xc1, 0x8b, 0xe9, 0x79, 0x7c, 0x2d, 0xc4, 0x91, 0x90,
	0x22, 0xbf, 0xa4, 0x6a, 0x2e, 0xcc, 0xd0, 0xbe, 0xa0, 0x3b, 0x64, 0xdd, 0x3d, 0x05, 0x29, 0xf2,
	0x7b, 0x5a, 0xc3, 0x7d, 0x5f, 0xd0, 0x2d, 0xb2, 0xe2, 0x1e, 0x90, 0x1b, 0x4f, 0xb7, 0x69, 0x7e,
	0xf1, 0x08, 0xbd, 0x6d, 0xf0, 0xdf, 0x1b, 0xbb, 0x31, 0xab, 0x2b, 0x37, 0x67, 0xb5, 0xfb, 0xf2,
	0xec, 0xb2, 0xee, 0x9d, 0x5f, 0xd6, 0xbd, 0x1f, 0x97, 0x75, 0xef, 0xd3, 0x55, 0xbd, 0x70, 0x7e,
	0x55, 0x2f, 0x7c, 0xbb, 0xaa, 0x17, 0xde, 0xef, 0xc7, 0xd2, 0x8e, 0x26, 0xc3, 0x20, 0xd2, 0x49,
	0xfb, 0x0f, 0xff, 0xce, 0x74, 0xfe, 0xf3, 0xd8, 0xd9, 0x29, 0x98, 0xe1, 0x2a, 0x7e, 0x3a, 0xcf,
	0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xbf, 0x82, 0xcb, 0xfb, 0x04, 0x00, 0x00,
}

func (m *OutgoingTxBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingTxBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingTxBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssigneeRemoteAddress) > 0 {
		i -= len(m.AssigneeRemoteAddress)
		copy(dAtA[i:], m.AssigneeRemoteAddress)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.AssigneeRemoteAddress)))
		i--
		dAtA[i] = 0x52
	}
	if m.GasEstimate != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.GasEstimate))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Assignee) > 0 {
		i -= len(m.Assignee)
		copy(dAtA[i:], m.Assignee)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Assignee)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BytesToSign) > 0 {
		i -= len(m.BytesToSign)
		copy(dAtA[i:], m.BytesToSign)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.BytesToSign)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x32
	}
	if m.PalomaBlockCreated != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.PalomaBlockCreated))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BatchTimeout != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BatchTimeout))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchNonce != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutgoingTransferTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingTransferTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingTransferTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BridgeTaxAmount.Size()
		i -= size
		if _, err := m.BridgeTaxAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Erc20Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.DestAddress) > 0 {
		i -= len(m.DestAddress)
		copy(dAtA[i:], m.DestAddress)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.DestAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingBatchCanceled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingBatchCanceled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingBatchCanceled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BatchId) > 0 {
		i -= len(m.BatchId)
		copy(dAtA[i:], m.BatchId)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.BatchId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgeChainId) > 0 {
		i -= len(m.BridgeChainId)
		copy(dAtA[i:], m.BridgeChainId)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.BridgeChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BridgeContract) > 0 {
		i -= len(m.BridgeContract)
		copy(dAtA[i:], m.BridgeContract)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.BridgeContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assignee) > 0 {
		i -= len(m.Assignee)
		copy(dAtA[i:], m.Assignee)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Assignee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BatchId) > 0 {
		i -= len(m.BatchId)
		copy(dAtA[i:], m.BatchId)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.BatchId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgeChainId) > 0 {
		i -= len(m.BridgeChainId)
		copy(dAtA[i:], m.BridgeChainId)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.BridgeChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BridgeContract) > 0 {
		i -= len(m.BridgeContract)
		copy(dAtA[i:], m.BridgeContract)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.BridgeContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *OutgoingTxBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNonce != 0 {
		n += 1 + sovBatch(uint64(m.BatchNonce))
	}
	if m.BatchTimeout != 0 {
		n += 1 + sovBatch(uint64(m.BatchTimeout))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.PalomaBlockCreated != 0 {
		n += 1 + sovBatch(uint64(m.PalomaBlockCreated))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.BytesToSign)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.Assignee)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.GasEstimate != 0 {
		n += 1 + sovBatch(uint64(m.GasEstimate))
	}
	l = len(m.AssigneeRemoteAddress)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	return n
}

func (m *OutgoingTransferTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBatch(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.DestAddress)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = m.Erc20Token.Size()
	n += 1 + l + sovBatch(uint64(l))
	l = m.BridgeTaxAmount.Size()
	n += 1 + l + sovBatch(uint64(l))
	return n
}

func (m *EventOutgoingBatchCanceled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BridgeContract)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.BridgeChainId)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.BatchId)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	return n
}

func (m *EventOutgoingBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BridgeContract)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.BridgeChainId)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.BatchId)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.Assignee)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	return n
}

func sovBatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozBatch(x uint64) (n int) {
	return sovBatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *OutgoingTxBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingTxBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingTxBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTimeout", wireType)
			}
			m.BatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, OutgoingTransferTx{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PalomaBlockCreated", wireType)
			}
			m.PalomaBlockCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PalomaBlockCreated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesToSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesToSign = append(m.BytesToSign[:0], dAtA[iNdEx:postIndex]...)
			if m.BytesToSign == nil {
				m.BytesToSign = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasEstimate", wireType)
			}
			m.GasEstimate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasEstimate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssigneeRemoteAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssigneeRemoteAddress = append(m.AssigneeRemoteAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AssigneeRemoteAddress == nil {
				m.AssigneeRemoteAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *OutgoingTransferTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingTransferTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingTransferTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Erc20Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeTaxAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeTaxAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventOutgoingBatchCanceled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingBatchCanceled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingBatchCanceled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventOutgoingBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipBatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBatch = fmt.Errorf("proto: unexpected end of group")
)
