// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/skyway/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	cosmossdk_io_math "cosmossdk.io/math"
	_ "github.com/cosmos/cosmos-proto"
	types2 "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/palomachain/paloma/v2/x/valset/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: Remove this message after usage
//
// Deprecated: Do not use.
type MsgNonceOverrideProposal struct {
	Metadata         types.MsgMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	ChainReferenceId string            `protobuf:"bytes,2,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Nonce            uint64            `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgNonceOverrideProposal) Reset()         { *m = MsgNonceOverrideProposal{} }
func (m *MsgNonceOverrideProposal) String() string { return proto.CompactTextString(m) }
func (*MsgNonceOverrideProposal) ProtoMessage()    {}
func (*MsgNonceOverrideProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{0}
}

func (m *MsgNonceOverrideProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgNonceOverrideProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNonceOverrideProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgNonceOverrideProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNonceOverrideProposal.Merge(m, src)
}

func (m *MsgNonceOverrideProposal) XXX_Size() int {
	return m.Size()
}

func (m *MsgNonceOverrideProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNonceOverrideProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNonceOverrideProposal proto.InternalMessageInfo

func (m *MsgNonceOverrideProposal) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgNonceOverrideProposal) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgNonceOverrideProposal) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// TODO: Remove this message after usage
//
// Deprecated: Do not use.
type MsgReplenishLostGrainsProposal struct {
	Metadata types.MsgMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgReplenishLostGrainsProposal) Reset()         { *m = MsgReplenishLostGrainsProposal{} }
func (m *MsgReplenishLostGrainsProposal) String() string { return proto.CompactTextString(m) }
func (*MsgReplenishLostGrainsProposal) ProtoMessage()    {}
func (*MsgReplenishLostGrainsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{1}
}

func (m *MsgReplenishLostGrainsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgReplenishLostGrainsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplenishLostGrainsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgReplenishLostGrainsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplenishLostGrainsProposal.Merge(m, src)
}

func (m *MsgReplenishLostGrainsProposal) XXX_Size() int {
	return m.Size()
}

func (m *MsgReplenishLostGrainsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplenishLostGrainsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplenishLostGrainsProposal proto.InternalMessageInfo

func (m *MsgReplenishLostGrainsProposal) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type MsgSetERC20MappingProposal struct {
	Metadata  types.MsgMetadata                                `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	Authority string                                           `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	Mappings  []MsgSetERC20MappingProposal_ERC20ToDenomMapping `protobuf:"bytes,3,rep,name=mappings,proto3" json:"mappings"`
}

func (m *MsgSetERC20MappingProposal) Reset()         { *m = MsgSetERC20MappingProposal{} }
func (m *MsgSetERC20MappingProposal) String() string { return proto.CompactTextString(m) }
func (*MsgSetERC20MappingProposal) ProtoMessage()    {}
func (*MsgSetERC20MappingProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{2}
}

func (m *MsgSetERC20MappingProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetERC20MappingProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetERC20MappingProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetERC20MappingProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetERC20MappingProposal.Merge(m, src)
}

func (m *MsgSetERC20MappingProposal) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetERC20MappingProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetERC20MappingProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetERC20MappingProposal proto.InternalMessageInfo

func (m *MsgSetERC20MappingProposal) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgSetERC20MappingProposal) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetERC20MappingProposal) GetMappings() []MsgSetERC20MappingProposal_ERC20ToDenomMapping {
	if m != nil {
		return m.Mappings
	}
	return nil
}

type MsgSetERC20MappingProposal_ERC20ToDenomMapping struct {
	ChainReferenceId string `protobuf:"bytes,1,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Erc20            string `protobuf:"bytes,2,opt,name=erc20,proto3" json:"erc20,omitempty"`
	Denom            string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) Reset() {
	*m = MsgSetERC20MappingProposal_ERC20ToDenomMapping{}
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSetERC20MappingProposal_ERC20ToDenomMapping) ProtoMessage() {}
func (*MsgSetERC20MappingProposal_ERC20ToDenomMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{2, 0}
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetERC20MappingProposal_ERC20ToDenomMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetERC20MappingProposal_ERC20ToDenomMapping.Merge(m, src)
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetERC20MappingProposal_ERC20ToDenomMapping.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetERC20MappingProposal_ERC20ToDenomMapping proto.InternalMessageInfo

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// MsgSendToRemote
// This is the message that a user calls when they want to bridge an asset
// it will later be removed when it is included in a batch and successfully
// submitted tokens are removed from the users balance immediately
// -------------
// AMOUNT:
// the coin to send across the bridge, note the restriction that this is a
// single coin not a set of coins that is normal in other Cosmos messages
type MsgSendToRemote struct {
	EthDest          string            `protobuf:"bytes,2,opt,name=eth_dest,json=ethDest,proto3" json:"eth_dest,omitempty"`
	Amount           types1.Coin       `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	ChainReferenceId string            `protobuf:"bytes,4,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Metadata         types.MsgMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgSendToRemote) Reset()         { *m = MsgSendToRemote{} }
func (m *MsgSendToRemote) String() string { return proto.CompactTextString(m) }
func (*MsgSendToRemote) ProtoMessage()    {}
func (*MsgSendToRemote) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{3}
}

func (m *MsgSendToRemote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSendToRemote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToRemote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSendToRemote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToRemote.Merge(m, src)
}

func (m *MsgSendToRemote) XXX_Size() int {
	return m.Size()
}

func (m *MsgSendToRemote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToRemote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToRemote proto.InternalMessageInfo

func (m *MsgSendToRemote) GetEthDest() string {
	if m != nil {
		return m.EthDest
	}
	return ""
}

func (m *MsgSendToRemote) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

func (m *MsgSendToRemote) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgSendToRemote) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type MsgSendToRemoteResponse struct{}

func (m *MsgSendToRemoteResponse) Reset()         { *m = MsgSendToRemoteResponse{} }
func (m *MsgSendToRemoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToRemoteResponse) ProtoMessage()    {}
func (*MsgSendToRemoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{4}
}

func (m *MsgSendToRemoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSendToRemoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToRemoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSendToRemoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToRemoteResponse.Merge(m, src)
}

func (m *MsgSendToRemoteResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSendToRemoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToRemoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToRemoteResponse proto.InternalMessageInfo

// MsgConfirmBatch
// When validators observe a MsgRequestBatch they form a batch by ordering
// transactions currently in the txqueue,
// cutting off when the batch either reaches a hardcoded maximum size (to be
// decided, probably around 100) or when transactions stop being profitable
// (TODO determine this without nondeterminism) This message includes the batch
// as well as an Remote signature over this batch by the validator
// -------------
type MsgConfirmBatch struct {
	Nonce         uint64            `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TokenContract string            `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	EthSigner     string            `protobuf:"bytes,3,opt,name=eth_signer,json=ethSigner,proto3" json:"eth_signer,omitempty"`
	Orchestrator  string            `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	Signature     string            `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Metadata      types.MsgMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgConfirmBatch) Reset()         { *m = MsgConfirmBatch{} }
func (m *MsgConfirmBatch) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBatch) ProtoMessage()    {}
func (*MsgConfirmBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{5}
}

func (m *MsgConfirmBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgConfirmBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgConfirmBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBatch.Merge(m, src)
}

func (m *MsgConfirmBatch) XXX_Size() int {
	return m.Size()
}

func (m *MsgConfirmBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBatch proto.InternalMessageInfo

func (m *MsgConfirmBatch) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgConfirmBatch) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgConfirmBatch) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgConfirmBatch) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgConfirmBatch) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *MsgConfirmBatch) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type MsgConfirmBatchResponse struct{}

func (m *MsgConfirmBatchResponse) Reset()         { *m = MsgConfirmBatchResponse{} }
func (m *MsgConfirmBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBatchResponse) ProtoMessage()    {}
func (*MsgConfirmBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{6}
}

func (m *MsgConfirmBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgConfirmBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgConfirmBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBatchResponse.Merge(m, src)
}

func (m *MsgConfirmBatchResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgConfirmBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBatchResponse proto.InternalMessageInfo

// MsgSendToPalomaClaim
// When more than 66% of the active validator set has
// claimed to have seen the deposit enter the ethereum blockchain coins are
// issued to the Cosmos address in question
// -------------
type MsgSendToPalomaClaim struct {
	EventNonce       uint64                `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight   uint64                `protobuf:"varint,2,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	TokenContract    string                `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Amount           cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	EthereumSender   string                `protobuf:"bytes,5,opt,name=ethereum_sender,json=ethereumSender,proto3" json:"ethereum_sender,omitempty"`
	PalomaReceiver   string                `protobuf:"bytes,6,opt,name=paloma_receiver,json=palomaReceiver,proto3" json:"paloma_receiver,omitempty"`
	Orchestrator     string                `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	ChainReferenceId string                `protobuf:"bytes,8,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Metadata         types.MsgMetadata     `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata"`
	SkywayNonce      uint64                `protobuf:"varint,10,opt,name=skyway_nonce,json=skywayNonce,proto3" json:"skyway_nonce,omitempty"`
	CompassId        string                `protobuf:"bytes,11,opt,name=compass_id,json=compassId,proto3" json:"compass_id,omitempty"`
}

func (m *MsgSendToPalomaClaim) Reset()         { *m = MsgSendToPalomaClaim{} }
func (m *MsgSendToPalomaClaim) String() string { return proto.CompactTextString(m) }
func (*MsgSendToPalomaClaim) ProtoMessage()    {}
func (*MsgSendToPalomaClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{7}
}

func (m *MsgSendToPalomaClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSendToPalomaClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToPalomaClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSendToPalomaClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToPalomaClaim.Merge(m, src)
}

func (m *MsgSendToPalomaClaim) XXX_Size() int {
	return m.Size()
}

func (m *MsgSendToPalomaClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToPalomaClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToPalomaClaim proto.InternalMessageInfo

func (m *MsgSendToPalomaClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgSendToPalomaClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgSendToPalomaClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetEthereumSender() string {
	if m != nil {
		return m.EthereumSender
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetPalomaReceiver() string {
	if m != nil {
		return m.PalomaReceiver
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgSendToPalomaClaim) GetSkywayNonce() uint64 {
	if m != nil {
		return m.SkywayNonce
	}
	return 0
}

func (m *MsgSendToPalomaClaim) GetCompassId() string {
	if m != nil {
		return m.CompassId
	}
	return ""
}

type MsgSendToPalomaClaimResponse struct{}

func (m *MsgSendToPalomaClaimResponse) Reset()         { *m = MsgSendToPalomaClaimResponse{} }
func (m *MsgSendToPalomaClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToPalomaClaimResponse) ProtoMessage()    {}
func (*MsgSendToPalomaClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{8}
}

func (m *MsgSendToPalomaClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSendToPalomaClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToPalomaClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSendToPalomaClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToPalomaClaimResponse.Merge(m, src)
}

func (m *MsgSendToPalomaClaimResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSendToPalomaClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToPalomaClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToPalomaClaimResponse proto.InternalMessageInfo

// BatchSendToRemoteClaim claims that a batch of send to eth
// operations on the bridge contract was executed.
type MsgBatchSendToRemoteClaim struct {
	EventNonce       uint64            `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight   uint64            `protobuf:"varint,2,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	BatchNonce       uint64            `protobuf:"varint,3,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	TokenContract    string            `protobuf:"bytes,4,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	ChainReferenceId string            `protobuf:"bytes,5,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Orchestrator     string            `protobuf:"bytes,6,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	Metadata         types.MsgMetadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata"`
	SkywayNonce      uint64            `protobuf:"varint,8,opt,name=skyway_nonce,json=skywayNonce,proto3" json:"skyway_nonce,omitempty"`
	CompassId        string            `protobuf:"bytes,9,opt,name=compass_id,json=compassId,proto3" json:"compass_id,omitempty"`
}

func (m *MsgBatchSendToRemoteClaim) Reset()         { *m = MsgBatchSendToRemoteClaim{} }
func (m *MsgBatchSendToRemoteClaim) String() string { return proto.CompactTextString(m) }
func (*MsgBatchSendToRemoteClaim) ProtoMessage()    {}
func (*MsgBatchSendToRemoteClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{9}
}

func (m *MsgBatchSendToRemoteClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgBatchSendToRemoteClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchSendToRemoteClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgBatchSendToRemoteClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchSendToRemoteClaim.Merge(m, src)
}

func (m *MsgBatchSendToRemoteClaim) XXX_Size() int {
	return m.Size()
}

func (m *MsgBatchSendToRemoteClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchSendToRemoteClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchSendToRemoteClaim proto.InternalMessageInfo

func (m *MsgBatchSendToRemoteClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgBatchSendToRemoteClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgBatchSendToRemoteClaim) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *MsgBatchSendToRemoteClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgBatchSendToRemoteClaim) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgBatchSendToRemoteClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgBatchSendToRemoteClaim) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgBatchSendToRemoteClaim) GetSkywayNonce() uint64 {
	if m != nil {
		return m.SkywayNonce
	}
	return 0
}

func (m *MsgBatchSendToRemoteClaim) GetCompassId() string {
	if m != nil {
		return m.CompassId
	}
	return ""
}

type MsgBatchSendToRemoteClaimResponse struct{}

func (m *MsgBatchSendToRemoteClaimResponse) Reset()         { *m = MsgBatchSendToRemoteClaimResponse{} }
func (m *MsgBatchSendToRemoteClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBatchSendToRemoteClaimResponse) ProtoMessage()    {}
func (*MsgBatchSendToRemoteClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{10}
}

func (m *MsgBatchSendToRemoteClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgBatchSendToRemoteClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchSendToRemoteClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgBatchSendToRemoteClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchSendToRemoteClaimResponse.Merge(m, src)
}

func (m *MsgBatchSendToRemoteClaimResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgBatchSendToRemoteClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchSendToRemoteClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchSendToRemoteClaimResponse proto.InternalMessageInfo

// This call allows the sender (and only the sender)
// to cancel a given MsgSendToRemote and recieve a refund
// of the tokens
type MsgCancelSendToRemote struct {
	TransactionId uint64            `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Metadata      types.MsgMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgCancelSendToRemote) Reset()         { *m = MsgCancelSendToRemote{} }
func (m *MsgCancelSendToRemote) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToRemote) ProtoMessage()    {}
func (*MsgCancelSendToRemote) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{11}
}

func (m *MsgCancelSendToRemote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgCancelSendToRemote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToRemote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgCancelSendToRemote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToRemote.Merge(m, src)
}

func (m *MsgCancelSendToRemote) XXX_Size() int {
	return m.Size()
}

func (m *MsgCancelSendToRemote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToRemote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToRemote proto.InternalMessageInfo

func (m *MsgCancelSendToRemote) GetTransactionId() uint64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *MsgCancelSendToRemote) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type MsgCancelSendToRemoteResponse struct{}

func (m *MsgCancelSendToRemoteResponse) Reset()         { *m = MsgCancelSendToRemoteResponse{} }
func (m *MsgCancelSendToRemoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToRemoteResponse) ProtoMessage()    {}
func (*MsgCancelSendToRemoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{12}
}

func (m *MsgCancelSendToRemoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgCancelSendToRemoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToRemoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgCancelSendToRemoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToRemoteResponse.Merge(m, src)
}

func (m *MsgCancelSendToRemoteResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgCancelSendToRemoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToRemoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToRemoteResponse proto.InternalMessageInfo

// This call allows anyone to submit evidence that a
// validator has signed a batch that never
// existed on the Cosmos chain.
// Subject contains the batch.
type MsgSubmitBadSignatureEvidence struct {
	Subject          *types2.Any       `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Signature        string            `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Sender           string            `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"` // Deprecated: Do not use.
	ChainReferenceId string            `protobuf:"bytes,4,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Metadata         types.MsgMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgSubmitBadSignatureEvidence) Reset()         { *m = MsgSubmitBadSignatureEvidence{} }
func (m *MsgSubmitBadSignatureEvidence) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBadSignatureEvidence) ProtoMessage()    {}
func (*MsgSubmitBadSignatureEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{13}
}

func (m *MsgSubmitBadSignatureEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSubmitBadSignatureEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBadSignatureEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSubmitBadSignatureEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBadSignatureEvidence.Merge(m, src)
}

func (m *MsgSubmitBadSignatureEvidence) XXX_Size() int {
	return m.Size()
}

func (m *MsgSubmitBadSignatureEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBadSignatureEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBadSignatureEvidence proto.InternalMessageInfo

func (m *MsgSubmitBadSignatureEvidence) GetSubject() *types2.Any {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *MsgSubmitBadSignatureEvidence) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// Deprecated: Do not use.
func (m *MsgSubmitBadSignatureEvidence) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitBadSignatureEvidence) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgSubmitBadSignatureEvidence) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type MsgSubmitBadSignatureEvidenceResponse struct{}

func (m *MsgSubmitBadSignatureEvidenceResponse) Reset()         { *m = MsgSubmitBadSignatureEvidenceResponse{} }
func (m *MsgSubmitBadSignatureEvidenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBadSignatureEvidenceResponse) ProtoMessage()    {}
func (*MsgSubmitBadSignatureEvidenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{14}
}

func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBadSignatureEvidenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBadSignatureEvidenceResponse.Merge(m, src)
}

func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBadSignatureEvidenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBadSignatureEvidenceResponse proto.InternalMessageInfo

type EventSetOperatorAddress struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EventSetOperatorAddress) Reset()         { *m = EventSetOperatorAddress{} }
func (m *EventSetOperatorAddress) String() string { return proto.CompactTextString(m) }
func (*EventSetOperatorAddress) ProtoMessage()    {}
func (*EventSetOperatorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{15}
}

func (m *EventSetOperatorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventSetOperatorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetOperatorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventSetOperatorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetOperatorAddress.Merge(m, src)
}

func (m *EventSetOperatorAddress) XXX_Size() int {
	return m.Size()
}

func (m *EventSetOperatorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetOperatorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetOperatorAddress proto.InternalMessageInfo

func (m *EventSetOperatorAddress) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventSetOperatorAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type EventBatchCreated struct {
	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	BatchNonce string `protobuf:"bytes,2,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
}

func (m *EventBatchCreated) Reset()         { *m = EventBatchCreated{} }
func (m *EventBatchCreated) String() string { return proto.CompactTextString(m) }
func (*EventBatchCreated) ProtoMessage()    {}
func (*EventBatchCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{16}
}

func (m *EventBatchCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventBatchCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventBatchCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchCreated.Merge(m, src)
}

func (m *EventBatchCreated) XXX_Size() int {
	return m.Size()
}

func (m *EventBatchCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchCreated proto.InternalMessageInfo

func (m *EventBatchCreated) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventBatchCreated) GetBatchNonce() string {
	if m != nil {
		return m.BatchNonce
	}
	return ""
}

type EventBatchConfirmKey struct {
	Message         string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	BatchConfirmKey string `protobuf:"bytes,2,opt,name=batch_confirm_key,json=batchConfirmKey,proto3" json:"batch_confirm_key,omitempty"`
}

func (m *EventBatchConfirmKey) Reset()         { *m = EventBatchConfirmKey{} }
func (m *EventBatchConfirmKey) String() string { return proto.CompactTextString(m) }
func (*EventBatchConfirmKey) ProtoMessage()    {}
func (*EventBatchConfirmKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{17}
}

func (m *EventBatchConfirmKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventBatchConfirmKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchConfirmKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventBatchConfirmKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchConfirmKey.Merge(m, src)
}

func (m *EventBatchConfirmKey) XXX_Size() int {
	return m.Size()
}

func (m *EventBatchConfirmKey) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchConfirmKey.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchConfirmKey proto.InternalMessageInfo

func (m *EventBatchConfirmKey) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventBatchConfirmKey) GetBatchConfirmKey() string {
	if m != nil {
		return m.BatchConfirmKey
	}
	return ""
}

type EventBatchSendToRemoteClaim struct {
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EventBatchSendToRemoteClaim) Reset()         { *m = EventBatchSendToRemoteClaim{} }
func (m *EventBatchSendToRemoteClaim) String() string { return proto.CompactTextString(m) }
func (*EventBatchSendToRemoteClaim) ProtoMessage()    {}
func (*EventBatchSendToRemoteClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{18}
}

func (m *EventBatchSendToRemoteClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventBatchSendToRemoteClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchSendToRemoteClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventBatchSendToRemoteClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchSendToRemoteClaim.Merge(m, src)
}

func (m *EventBatchSendToRemoteClaim) XXX_Size() int {
	return m.Size()
}

func (m *EventBatchSendToRemoteClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchSendToRemoteClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchSendToRemoteClaim proto.InternalMessageInfo

func (m *EventBatchSendToRemoteClaim) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

type EventClaim struct {
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ClaimHash     string `protobuf:"bytes,2,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	AttestationId string `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (m *EventClaim) Reset()         { *m = EventClaim{} }
func (m *EventClaim) String() string { return proto.CompactTextString(m) }
func (*EventClaim) ProtoMessage()    {}
func (*EventClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{19}
}

func (m *EventClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaim.Merge(m, src)
}

func (m *EventClaim) XXX_Size() int {
	return m.Size()
}

func (m *EventClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaim proto.InternalMessageInfo

func (m *EventClaim) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventClaim) GetClaimHash() string {
	if m != nil {
		return m.ClaimHash
	}
	return ""
}

func (m *EventClaim) GetAttestationId() string {
	if m != nil {
		return m.AttestationId
	}
	return ""
}

type EventBadSignatureEvidence struct {
	Message                string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	BadEthSignature        string `protobuf:"bytes,2,opt,name=bad_eth_signature,json=badEthSignature,proto3" json:"bad_eth_signature,omitempty"`
	BadEthSignatureSubject string `protobuf:"bytes,3,opt,name=bad_eth_signature_subject,json=badEthSignatureSubject,proto3" json:"bad_eth_signature_subject,omitempty"`
}

func (m *EventBadSignatureEvidence) Reset()         { *m = EventBadSignatureEvidence{} }
func (m *EventBadSignatureEvidence) String() string { return proto.CompactTextString(m) }
func (*EventBadSignatureEvidence) ProtoMessage()    {}
func (*EventBadSignatureEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{20}
}

func (m *EventBadSignatureEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventBadSignatureEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBadSignatureEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventBadSignatureEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBadSignatureEvidence.Merge(m, src)
}

func (m *EventBadSignatureEvidence) XXX_Size() int {
	return m.Size()
}

func (m *EventBadSignatureEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBadSignatureEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_EventBadSignatureEvidence proto.InternalMessageInfo

func (m *EventBadSignatureEvidence) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventBadSignatureEvidence) GetBadEthSignature() string {
	if m != nil {
		return m.BadEthSignature
	}
	return ""
}

func (m *EventBadSignatureEvidence) GetBadEthSignatureSubject() string {
	if m != nil {
		return m.BadEthSignatureSubject
	}
	return ""
}

type EventMultisigUpdateRequest struct {
	BridgeContract string `protobuf:"bytes,1,opt,name=bridge_contract,json=bridgeContract,proto3" json:"bridge_contract,omitempty"`
	BridgeChainId  string `protobuf:"bytes,2,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	MultisigId     string `protobuf:"bytes,3,opt,name=multisig_id,json=multisigId,proto3" json:"multisig_id,omitempty"`
	Nonce          string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EventMultisigUpdateRequest) Reset()         { *m = EventMultisigUpdateRequest{} }
func (m *EventMultisigUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*EventMultisigUpdateRequest) ProtoMessage()    {}
func (*EventMultisigUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{21}
}

func (m *EventMultisigUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventMultisigUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMultisigUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventMultisigUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMultisigUpdateRequest.Merge(m, src)
}

func (m *EventMultisigUpdateRequest) XXX_Size() int {
	return m.Size()
}

func (m *EventMultisigUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMultisigUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventMultisigUpdateRequest proto.InternalMessageInfo

func (m *EventMultisigUpdateRequest) GetBridgeContract() string {
	if m != nil {
		return m.BridgeContract
	}
	return ""
}

func (m *EventMultisigUpdateRequest) GetBridgeChainId() string {
	if m != nil {
		return m.BridgeChainId
	}
	return ""
}

func (m *EventMultisigUpdateRequest) GetMultisigId() string {
	if m != nil {
		return m.MultisigId
	}
	return ""
}

func (m *EventMultisigUpdateRequest) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

type EventSignatureSlashing struct {
	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EventSignatureSlashing) Reset()         { *m = EventSignatureSlashing{} }
func (m *EventSignatureSlashing) String() string { return proto.CompactTextString(m) }
func (*EventSignatureSlashing) ProtoMessage()    {}
func (*EventSignatureSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{22}
}

func (m *EventSignatureSlashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventSignatureSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSignatureSlashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventSignatureSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSignatureSlashing.Merge(m, src)
}

func (m *EventSignatureSlashing) XXX_Size() int {
	return m.Size()
}

func (m *EventSignatureSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSignatureSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_EventSignatureSlashing proto.InternalMessageInfo

func (m *EventSignatureSlashing) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventSignatureSlashing) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type EventOutgoingTxId struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	TxId    string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *EventOutgoingTxId) Reset()         { *m = EventOutgoingTxId{} }
func (m *EventOutgoingTxId) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingTxId) ProtoMessage()    {}
func (*EventOutgoingTxId) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{23}
}

func (m *EventOutgoingTxId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *EventOutgoingTxId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingTxId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *EventOutgoingTxId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingTxId.Merge(m, src)
}

func (m *EventOutgoingTxId) XXX_Size() int {
	return m.Size()
}

func (m *EventOutgoingTxId) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingTxId.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingTxId proto.InternalMessageInfo

func (m *EventOutgoingTxId) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventOutgoingTxId) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/skyway parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params   Params            `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
	Metadata types.MsgMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{24}
}

func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}

func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}

func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *MsgUpdateParams) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct{}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{25}
}

func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}

func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgLightNodeSaleClaim is sent by pigeon whenever it gets a sale notification
// from compass
type MsgLightNodeSaleClaim struct {
	Metadata             types.MsgMetadata     `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	EventNonce           uint64                `protobuf:"varint,2,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight       uint64                `protobuf:"varint,3,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	Orchestrator         string                `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	ChainReferenceId     string                `protobuf:"bytes,5,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	SkywayNonce          uint64                `protobuf:"varint,6,opt,name=skyway_nonce,json=skywayNonce,proto3" json:"skyway_nonce,omitempty"`
	ClientAddress        string                `protobuf:"bytes,7,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	Amount               cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	SmartContractAddress string                `protobuf:"bytes,9,opt,name=smart_contract_address,json=smartContractAddress,proto3" json:"smart_contract_address,omitempty"`
	CompassId            string                `protobuf:"bytes,10,opt,name=compass_id,json=compassId,proto3" json:"compass_id,omitempty"`
}

func (m *MsgLightNodeSaleClaim) Reset()         { *m = MsgLightNodeSaleClaim{} }
func (m *MsgLightNodeSaleClaim) String() string { return proto.CompactTextString(m) }
func (*MsgLightNodeSaleClaim) ProtoMessage()    {}
func (*MsgLightNodeSaleClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{26}
}

func (m *MsgLightNodeSaleClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgLightNodeSaleClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLightNodeSaleClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgLightNodeSaleClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLightNodeSaleClaim.Merge(m, src)
}

func (m *MsgLightNodeSaleClaim) XXX_Size() int {
	return m.Size()
}

func (m *MsgLightNodeSaleClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLightNodeSaleClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLightNodeSaleClaim proto.InternalMessageInfo

func (m *MsgLightNodeSaleClaim) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgLightNodeSaleClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgLightNodeSaleClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgLightNodeSaleClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgLightNodeSaleClaim) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgLightNodeSaleClaim) GetSkywayNonce() uint64 {
	if m != nil {
		return m.SkywayNonce
	}
	return 0
}

func (m *MsgLightNodeSaleClaim) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *MsgLightNodeSaleClaim) GetSmartContractAddress() string {
	if m != nil {
		return m.SmartContractAddress
	}
	return ""
}

func (m *MsgLightNodeSaleClaim) GetCompassId() string {
	if m != nil {
		return m.CompassId
	}
	return ""
}

// MsgEstimateBatchGas is a message to estimate the gas for a batch
// Pigeons will send this message to transmit their gas estimation
// for a given batch.
type MsgEstimateBatchGas struct {
	Metadata      types.MsgMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	Nonce         uint64            `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TokenContract string            `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	EthSigner     string            `protobuf:"bytes,4,opt,name=eth_signer,json=ethSigner,proto3" json:"eth_signer,omitempty"`
	Estimate      uint64            `protobuf:"varint,5,opt,name=estimate,proto3" json:"estimate,omitempty"`
}

func (m *MsgEstimateBatchGas) Reset()         { *m = MsgEstimateBatchGas{} }
func (m *MsgEstimateBatchGas) String() string { return proto.CompactTextString(m) }
func (*MsgEstimateBatchGas) ProtoMessage()    {}
func (*MsgEstimateBatchGas) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{27}
}

func (m *MsgEstimateBatchGas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgEstimateBatchGas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEstimateBatchGas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgEstimateBatchGas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEstimateBatchGas.Merge(m, src)
}

func (m *MsgEstimateBatchGas) XXX_Size() int {
	return m.Size()
}

func (m *MsgEstimateBatchGas) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEstimateBatchGas.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEstimateBatchGas proto.InternalMessageInfo

func (m *MsgEstimateBatchGas) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgEstimateBatchGas) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgEstimateBatchGas) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgEstimateBatchGas) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgEstimateBatchGas) GetEstimate() uint64 {
	if m != nil {
		return m.Estimate
	}
	return 0
}

// MsgSetERC20ToTokenDenom is a message to set the mapping between an ERC20 token
// and a denom created by the token factory.
// Needs admin rights on the token to set the mapping.
type MsgSetERC20ToTokenDenom struct {
	Metadata         types.MsgMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata" yaml:"metadata"`
	Denom            string            `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	ChainReferenceId string            `protobuf:"bytes,3,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty" yaml:"chain_reference_id"`
	Erc20            string            `protobuf:"bytes,4,opt,name=erc20,proto3" json:"erc20,omitempty" yaml:"erc20"`
}

func (m *MsgSetERC20ToTokenDenom) Reset()         { *m = MsgSetERC20ToTokenDenom{} }
func (m *MsgSetERC20ToTokenDenom) String() string { return proto.CompactTextString(m) }
func (*MsgSetERC20ToTokenDenom) ProtoMessage()    {}
func (*MsgSetERC20ToTokenDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_857e0e6098045c7c, []int{28}
}

func (m *MsgSetERC20ToTokenDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetERC20ToTokenDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetERC20ToTokenDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetERC20ToTokenDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetERC20ToTokenDenom.Merge(m, src)
}

func (m *MsgSetERC20ToTokenDenom) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetERC20ToTokenDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetERC20ToTokenDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetERC20ToTokenDenom proto.InternalMessageInfo

func (m *MsgSetERC20ToTokenDenom) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgSetERC20ToTokenDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgSetERC20ToTokenDenom) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgSetERC20ToTokenDenom) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgNonceOverrideProposal)(nil), "palomachain.paloma.skyway.MsgNonceOverrideProposal")
	proto.RegisterType((*MsgReplenishLostGrainsProposal)(nil), "palomachain.paloma.skyway.MsgReplenishLostGrainsProposal")
	proto.RegisterType((*MsgSetERC20MappingProposal)(nil), "palomachain.paloma.skyway.MsgSetERC20MappingProposal")
	proto.RegisterType((*MsgSetERC20MappingProposal_ERC20ToDenomMapping)(nil), "palomachain.paloma.skyway.MsgSetERC20MappingProposal.ERC20ToDenomMapping")
	proto.RegisterType((*MsgSendToRemote)(nil), "palomachain.paloma.skyway.MsgSendToRemote")
	proto.RegisterType((*MsgSendToRemoteResponse)(nil), "palomachain.paloma.skyway.MsgSendToRemoteResponse")
	proto.RegisterType((*MsgConfirmBatch)(nil), "palomachain.paloma.skyway.MsgConfirmBatch")
	proto.RegisterType((*MsgConfirmBatchResponse)(nil), "palomachain.paloma.skyway.MsgConfirmBatchResponse")
	proto.RegisterType((*MsgSendToPalomaClaim)(nil), "palomachain.paloma.skyway.MsgSendToPalomaClaim")
	proto.RegisterType((*MsgSendToPalomaClaimResponse)(nil), "palomachain.paloma.skyway.MsgSendToPalomaClaimResponse")
	proto.RegisterType((*MsgBatchSendToRemoteClaim)(nil), "palomachain.paloma.skyway.MsgBatchSendToRemoteClaim")
	proto.RegisterType((*MsgBatchSendToRemoteClaimResponse)(nil), "palomachain.paloma.skyway.MsgBatchSendToRemoteClaimResponse")
	proto.RegisterType((*MsgCancelSendToRemote)(nil), "palomachain.paloma.skyway.MsgCancelSendToRemote")
	proto.RegisterType((*MsgCancelSendToRemoteResponse)(nil), "palomachain.paloma.skyway.MsgCancelSendToRemoteResponse")
	proto.RegisterType((*MsgSubmitBadSignatureEvidence)(nil), "palomachain.paloma.skyway.MsgSubmitBadSignatureEvidence")
	proto.RegisterType((*MsgSubmitBadSignatureEvidenceResponse)(nil), "palomachain.paloma.skyway.MsgSubmitBadSignatureEvidenceResponse")
	proto.RegisterType((*EventSetOperatorAddress)(nil), "palomachain.paloma.skyway.EventSetOperatorAddress")
	proto.RegisterType((*EventBatchCreated)(nil), "palomachain.paloma.skyway.EventBatchCreated")
	proto.RegisterType((*EventBatchConfirmKey)(nil), "palomachain.paloma.skyway.EventBatchConfirmKey")
	proto.RegisterType((*EventBatchSendToRemoteClaim)(nil), "palomachain.paloma.skyway.EventBatchSendToRemoteClaim")
	proto.RegisterType((*EventClaim)(nil), "palomachain.paloma.skyway.EventClaim")
	proto.RegisterType((*EventBadSignatureEvidence)(nil), "palomachain.paloma.skyway.EventBadSignatureEvidence")
	proto.RegisterType((*EventMultisigUpdateRequest)(nil), "palomachain.paloma.skyway.EventMultisigUpdateRequest")
	proto.RegisterType((*EventSignatureSlashing)(nil), "palomachain.paloma.skyway.EventSignatureSlashing")
	proto.RegisterType((*EventOutgoingTxId)(nil), "palomachain.paloma.skyway.EventOutgoingTxId")
	proto.RegisterType((*MsgUpdateParams)(nil), "palomachain.paloma.skyway.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "palomachain.paloma.skyway.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgLightNodeSaleClaim)(nil), "palomachain.paloma.skyway.MsgLightNodeSaleClaim")
	proto.RegisterType((*MsgEstimateBatchGas)(nil), "palomachain.paloma.skyway.MsgEstimateBatchGas")
	proto.RegisterType((*MsgSetERC20ToTokenDenom)(nil), "palomachain.paloma.skyway.MsgSetERC20ToTokenDenom")
}

func init() {
	proto.RegisterFile("palomachain/paloma/skyway/msgs.proto", fileDescriptor_857e0e6098045c7c)
}

var fileDescriptor_857e0e6098045c7c = []byte{
	// 2094 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4f, 0x6c, 0x1b, 0x59,
	0x19, 0xef, 0xd8, 0x6e, 0x12, 0xbf, 0xfc, 0xed, 0x34, 0x4d, 0x62, 0xb7, 0x49, 0xda, 0x81, 0xa6,
	0xa1, 0x60, 0x4f, 0xe2, 0x6e, 0x69, 0xb7, 0x42, 0xda, 0xae, 0xb3, 0x61, 0x1b, 0x76, 0xdd, 0x56,
	0x93, 0x72, 0x01, 0x24, 0xeb, 0x79, 0xe6, 0x75, 0x66, 0x88, 0x67, 0x9e, 0x99, 0xf7, 0x1c, 0x6a,
	0x71, 0xdb, 0x13, 0x12, 0x17, 0x10, 0x17, 0xd0, 0x72, 0x80, 0x15, 0xdc, 0x39, 0xac, 0x90, 0xe0,
	0x8e, 0xb4, 0xe2, 0xb4, 0x82, 0x0b, 0xda, 0x43, 0x84, 0xda, 0x15, 0xdc, 0x7b, 0x44, 0x02, 0xa1,
	0xf7, 0x67, 0xc6, 0x63, 0x7b, 0x66, 0xec, 0xb4, 0x41, 0xda, 0x93, 0xfd, 0xbe, 0xf7, 0x7d, 0xef,
	0x7d, 0xff, 0xdf, 0xef, 0xbd, 0x01, 0x5f, 0xee, 0xc0, 0x36, 0xf6, 0xa0, 0xe9, 0x40, 0xd7, 0xd7,
	0xc5, 0x7f, 0x9d, 0x1c, 0xf5, 0x7e, 0x08, 0x7b, 0xba, 0x47, 0x6c, 0x52, 0xed, 0x04, 0x98, 0x62,
	0xb5, 0x14, 0xe3, 0xaa, 0x8a, 0xff, 0x55, 0xc1, 0x55, 0xde, 0x30, 0x31, 0xf1, 0x30, 0xd1, 0x5b,
	0x90, 0x20, 0xfd, 0x78, 0xb7, 0x85, 0x28, 0xdc, 0xd5, 0x4d, 0xcc, 0xf8, 0x98, 0x68, 0x79, 0x55,
	0xce, 0x7b, 0xc4, 0xd6, 0x8f, 0x77, 0xd9, 0x8f, 0x9c, 0x28, 0x89, 0x89, 0x26, 0x1f, 0xe9, 0x62,
	0x20, 0xa7, 0x96, 0x6d, 0x6c, 0x63, 0x41, 0x67, 0xff, 0x24, 0xf5, 0x8a, 0x8d, 0xb1, 0xdd, 0x46,
	0x3a, 0xec, 0xb8, 0x3a, 0xf4, 0x7d, 0x4c, 0x21, 0x75, 0xb1, 0x1f, 0xca, 0x94, 0xe4, 0x2c, 0x1f,
	0xb5, 0xba, 0x4f, 0x75, 0xe8, 0xf7, 0xe4, 0xd4, 0xe5, 0xe1, 0x29, 0xe4, 0x75, 0x68, 0x38, 0xb9,
	0x95, 0xee, 0x80, 0x0e, 0x0c, 0xa0, 0x17, 0xae, 0x7f, 0x3d, 0x9d, 0x8f, 0xf6, 0x3a, 0x88, 0x64,
	0x2c, 0x77, 0x0c, 0xdb, 0x04, 0x51, 0xdd, 0xc4, 0x9e, 0x87, 0xa5, 0x5b, 0xb4, 0x3f, 0x2a, 0x60,
	0xad, 0x41, 0xec, 0x87, 0xd8, 0x37, 0xd1, 0xa3, 0x63, 0x14, 0x04, 0xae, 0x85, 0x1e, 0x07, 0xb8,
	0x83, 0x09, 0x6c, 0xab, 0x0f, 0xc0, 0x8c, 0x87, 0x28, 0xb4, 0x20, 0x85, 0x6b, 0xca, 0x55, 0x65,
	0x7b, 0xb6, 0xb6, 0x55, 0x4d, 0x88, 0x80, 0x58, 0xb7, 0xda, 0x20, 0x76, 0x43, 0x72, 0xd7, 0x0b,
	0x9f, 0x9c, 0x6c, 0x9e, 0x33, 0x22, 0x69, 0xf5, 0x6b, 0x40, 0xe5, 0x22, 0xcd, 0x00, 0x3d, 0x45,
	0x01, 0xf2, 0x4d, 0xd4, 0x74, 0xad, 0xb5, 0xdc, 0x55, 0x65, 0xbb, 0x68, 0x2c, 0xf1, 0x19, 0x23,
	0x9c, 0x38, 0xb0, 0xd4, 0x65, 0x70, 0xde, 0x67, 0x0a, 0xad, 0xe5, 0xaf, 0x2a, 0xdb, 0x05, 0x43,
	0x0c, 0xee, 0x2d, 0x7e, 0xf0, 0xaf, 0xdf, 0xdf, 0x8c, 0x29, 0xa4, 0xfd, 0x08, 0x6c, 0x34, 0x88,
	0x6d, 0xa0, 0x4e, 0x1b, 0xf9, 0x2e, 0x71, 0xde, 0xc7, 0x84, 0xbe, 0x1b, 0x40, 0xd7, 0x27, 0x67,
	0x6f, 0xc0, 0xe8, 0xe6, 0x3f, 0xc9, 0x83, 0x72, 0x83, 0xd8, 0x87, 0x88, 0xee, 0x1b, 0x7b, 0xb5,
	0x9d, 0x06, 0xec, 0x74, 0x5c, 0xdf, 0xfe, 0x3f, 0xb8, 0xee, 0xeb, 0xa0, 0x08, 0xbb, 0xd4, 0xc1,
	0x81, 0x4b, 0x7b, 0xc2, 0x63, 0xf5, 0xb5, 0xbf, 0x7e, 0x5c, 0x59, 0x96, 0x99, 0xfa, 0xb6, 0x65,
	0x05, 0x88, 0x90, 0x43, 0x1a, 0xb8, 0xbe, 0x6d, 0xf4, 0x59, 0xd5, 0x23, 0x30, 0xe3, 0x09, 0xa5,
	0xc8, 0x5a, 0xfe, 0x6a, 0x7e, 0x7b, 0xb6, 0x76, 0x50, 0x4d, 0x2d, 0x9f, 0x6a, 0xba, 0x29, 0x55,
	0x4e, 0x7c, 0x82, 0xdf, 0x41, 0x3e, 0xf6, 0xe4, 0x5c, 0xa4, 0xa4, 0xdc, 0xa0, 0x8c, 0xc1, 0xc5,
	0x04, 0xb6, 0x94, 0xb0, 0x2b, 0xe9, 0x61, 0x47, 0x81, 0x59, 0xdb, 0x91, 0x79, 0x21, 0x06, 0x8c,
	0x6a, 0xb1, 0x35, 0x79, 0x32, 0x14, 0x0d, 0x31, 0xb8, 0x37, 0x3f, 0x10, 0x0f, 0xed, 0xdf, 0x0a,
	0x58, 0xe4, 0x26, 0xf8, 0xd6, 0x13, 0x6c, 0x20, 0x0f, 0x53, 0xa4, 0x96, 0xc0, 0x0c, 0xa2, 0x4e,
	0xd3, 0x42, 0x84, 0xca, 0x15, 0xa7, 0x11, 0x75, 0xde, 0x41, 0x84, 0xaa, 0x77, 0xc0, 0x14, 0xf4,
	0x70, 0xd7, 0xa7, 0x7c, 0xd1, 0xd9, 0x5a, 0xa9, 0x2a, 0xbd, 0xc9, 0xba, 0x47, 0x55, 0x76, 0x8f,
	0xea, 0x1e, 0x76, 0x7d, 0x69, 0xa9, 0x64, 0x4f, 0x31, 0xa8, 0x90, 0x62, 0x50, 0x3c, 0x09, 0xce,
	0xbf, 0x56, 0xfa, 0x0d, 0x9a, 0xfb, 0xad, 0xc2, 0x8c, 0xb2, 0x94, 0x33, 0xa6, 0x08, 0xf2, 0x2d,
	0x14, 0x68, 0x25, 0xb0, 0x3a, 0x64, 0xbb, 0x81, 0x48, 0x07, 0xfb, 0x04, 0x69, 0x3f, 0xce, 0x71,
	0xbf, 0xec, 0x61, 0xff, 0xa9, 0x1b, 0x78, 0x75, 0x48, 0x4d, 0xa7, 0x5f, 0x5d, 0x4a, 0xac, 0xba,
	0xd4, 0xeb, 0x60, 0x81, 0xe2, 0x23, 0xe4, 0x37, 0x4d, 0xec, 0xd3, 0x00, 0x9a, 0xa1, 0xcf, 0xe6,
	0x39, 0x75, 0x4f, 0x12, 0xd5, 0x75, 0x00, 0x98, 0x53, 0x89, 0x6b, 0xfb, 0x28, 0x90, 0x21, 0x29,
	0x22, 0xea, 0x1c, 0x72, 0x82, 0xaa, 0x81, 0x39, 0x1c, 0x98, 0x0e, 0x22, 0x34, 0x80, 0x14, 0x07,
	0xd2, 0x33, 0x03, 0x34, 0xf5, 0x0a, 0x28, 0x32, 0x71, 0x48, 0xbb, 0x01, 0xe2, 0x6e, 0x29, 0x1a,
	0x7d, 0xc2, 0x80, 0xcf, 0xa6, 0xce, 0xd0, 0x67, 0xd2, 0x4b, 0x71, 0x4f, 0x44, 0x5e, 0xfa, 0x6f,
	0x1e, 0x2c, 0x47, 0x1e, 0x7c, 0xcc, 0x37, 0xd8, 0x6b, 0x43, 0xd7, 0x53, 0x37, 0xc1, 0x2c, 0x3a,
	0x46, 0x3e, 0x6d, 0xc6, 0x1d, 0x06, 0x38, 0x89, 0x77, 0x4c, 0x75, 0x1b, 0x2c, 0x31, 0x77, 0xb4,
	0xda, 0xd8, 0x3c, 0x6a, 0x3a, 0xc8, 0xb5, 0x1d, 0xe1, 0xb7, 0x82, 0xb1, 0x80, 0xa8, 0x53, 0x67,
	0xe4, 0x07, 0x9c, 0x9a, 0xe0, 0xdf, 0x7c, 0x92, 0x7f, 0x6f, 0x47, 0x99, 0xc9, 0x5d, 0x57, 0x5f,
	0x67, 0x46, 0x7d, 0x76, 0xb2, 0x79, 0x49, 0x24, 0x28, 0xb1, 0x8e, 0xaa, 0x2e, 0xd6, 0x3d, 0x48,
	0x9d, 0xea, 0x81, 0x4f, 0xa3, 0xbc, 0xbc, 0x01, 0x16, 0x11, 0x75, 0x50, 0x80, 0xba, 0x5e, 0x53,
	0x64, 0x85, 0xf4, 0xec, 0x42, 0x48, 0x3e, 0xe4, 0x54, 0xc6, 0x28, 0x3c, 0xd8, 0x0c, 0x90, 0x89,
	0xdc, 0x63, 0x14, 0x70, 0x2f, 0x17, 0x8d, 0x05, 0x41, 0x36, 0x24, 0x75, 0x24, 0x92, 0xd3, 0x09,
	0x91, 0x4c, 0xae, 0x86, 0x99, 0x09, 0xaa, 0xa1, 0xf8, 0x5a, 0x2d, 0xf1, 0x1a, 0x98, 0x13, 0x6d,
	0x4b, 0xc6, 0x05, 0x70, 0x8f, 0xcf, 0x0a, 0x9a, 0x08, 0xcc, 0x3a, 0x00, 0x26, 0xf6, 0x3a, 0x90,
	0x10, 0xa6, 0xd2, 0xac, 0xc8, 0x32, 0x49, 0x39, 0xb0, 0x86, 0x73, 0x63, 0x03, 0x5c, 0x49, 0x8a,
	0x7f, 0x94, 0x20, 0x1f, 0xe6, 0x41, 0xa9, 0x41, 0x6c, 0x9e, 0x35, 0xf1, 0x3a, 0x3b, 0xf3, 0x2c,
	0xd9, 0x04, 0xb3, 0x2d, 0xb6, 0x49, 0x33, 0x7e, 0xfe, 0x01, 0x4e, 0x7a, 0x98, 0x52, 0xa6, 0x85,
	0xa4, 0x34, 0x4a, 0x8e, 0xcc, 0xf9, 0x94, 0xc8, 0x0c, 0xc7, 0x7a, 0x2a, 0x21, 0xd6, 0xf1, 0xe8,
	0x4d, 0x9f, 0x69, 0xf4, 0x66, 0xc6, 0x45, 0xaf, 0x38, 0x26, 0x7a, 0x5f, 0x02, 0xd7, 0x52, 0x83,
	0x13, 0x85, 0xf0, 0x77, 0x0a, 0xb8, 0xc4, 0xea, 0x1f, 0xfa, 0x26, 0x6a, 0x0f, 0x9c, 0x13, 0xcc,
	0xa5, 0x01, 0xf4, 0x09, 0x34, 0x19, 0x8e, 0x0b, 0x0f, 0xa8, 0x82, 0x31, 0x1f, 0xa3, 0x0e, 0xa5,
	0x6f, 0xfe, 0x6c, 0x9b, 0x79, 0x6e, 0x29, 0x1f, 0x35, 0xf3, 0x4d, 0xb0, 0x9e, 0xa8, 0x66, 0x64,
	0xc8, 0x47, 0x39, 0xce, 0x71, 0xd8, 0x6d, 0x79, 0x2e, 0xad, 0x43, 0xeb, 0x30, 0x6c, 0x9d, 0xfb,
	0xc7, 0xae, 0xc5, 0x02, 0xaa, 0xde, 0x07, 0xd3, 0xa4, 0xdb, 0xfa, 0x3e, 0x32, 0xa9, 0x84, 0x1e,
	0xcb, 0x55, 0x81, 0x3c, 0xab, 0x21, 0xf2, 0xac, 0xbe, 0xed, 0xf7, 0xea, 0x4b, 0x7f, 0xf9, 0xb8,
	0x32, 0x27, 0x16, 0xe7, 0xdd, 0xdb, 0x32, 0x42, 0xb1, 0xc1, 0x16, 0x9d, 0x1b, 0x6e, 0xd1, 0x65,
	0x20, 0x95, 0x15, 0x2d, 0xac, 0x9e, 0x5b, 0x53, 0x42, 0xf5, 0xbf, 0x20, 0x07, 0xa4, 0x76, 0x03,
	0x5c, 0xcf, 0xf4, 0x51, 0xe4, 0xcd, 0x06, 0x58, 0xdd, 0x67, 0x85, 0x7a, 0x88, 0xe8, 0xa3, 0x0e,
	0xe2, 0xa9, 0x2e, 0x11, 0x95, 0xba, 0x06, 0xa6, 0x3d, 0x44, 0x08, 0xb4, 0x91, 0x44, 0x2c, 0xe1,
	0x90, 0xcd, 0x40, 0xc1, 0x14, 0x02, 0x0b, 0x39, 0xd4, 0x1e, 0x82, 0x0b, 0x7c, 0x39, 0x9e, 0x8c,
	0x7b, 0x01, 0x82, 0x14, 0x59, 0x19, 0x0b, 0x0d, 0x95, 0xbb, 0x58, 0x2c, 0x56, 0xee, 0xda, 0xf7,
	0xc0, 0x72, 0x6c, 0x3d, 0x71, 0x76, 0xbd, 0x87, 0x7a, 0x19, 0x4b, 0xde, 0x04, 0x17, 0xc4, 0x92,
	0xa6, 0xe0, 0x6e, 0x1e, 0x21, 0x09, 0x1b, 0x8d, 0xc5, 0xd6, 0xe0, 0x2a, 0xda, 0x2d, 0x70, 0xb9,
	0xbf, 0xfa, 0x68, 0x5f, 0x1b, 0x00, 0x0a, 0x45, 0x09, 0x14, 0xb4, 0x36, 0x00, 0x5c, 0x48, 0xf0,
	0xa4, 0x2b, 0xc2, 0x6a, 0x98, 0xb1, 0x34, 0x1d, 0x48, 0x9c, 0x30, 0x89, 0x38, 0xe5, 0x01, 0x24,
	0x0e, 0xab, 0x3a, 0x48, 0x29, 0x22, 0xe2, 0xf6, 0xc4, 0x92, 0x44, 0x9e, 0x87, 0x31, 0xea, 0x81,
	0xa5, 0xfd, 0x4a, 0x01, 0x25, 0xa9, 0x63, 0x42, 0xa6, 0x8f, 0x71, 0x83, 0xd5, 0x0c, 0xb1, 0x4a,
	0x3c, 0x93, 0x17, 0x5b, 0xd0, 0xda, 0x17, 0x88, 0x45, 0xe4, 0xf3, 0x9b, 0xa0, 0x34, 0xc2, 0xdb,
	0x0c, 0x2b, 0x48, 0x68, 0xb5, 0x32, 0x24, 0x73, 0x28, 0x66, 0xb5, 0xdf, 0x2a, 0xa0, 0xcc, 0xd5,
	0x6b, 0x74, 0xdb, 0xd4, 0x25, 0xae, 0xfd, 0xed, 0x8e, 0x05, 0x59, 0xb1, 0xfe, 0xa0, 0xcb, 0x70,
	0xe6, 0x0d, 0xb0, 0xd8, 0x0a, 0x5c, 0xcb, 0x46, 0xfd, 0x76, 0x2d, 0xf4, 0x5c, 0x10, 0xe4, 0xa8,
	0x5f, 0x6f, 0xf5, 0x19, 0x79, 0xf5, 0x44, 0x97, 0xa3, 0x79, 0xc9, 0xc8, 0xa8, 0x07, 0x16, 0x4b,
	0x18, 0x4f, 0xee, 0xd4, 0x77, 0x19, 0x08, 0x49, 0xf1, 0xab, 0x53, 0x21, 0x1e, 0xb3, 0x6f, 0x82,
	0x15, 0x91, 0xe5, 0x91, 0xfe, 0x6d, 0x48, 0x1c, 0x86, 0xd0, 0x55, 0x50, 0x60, 0xd7, 0x46, 0xa9,
	0x16, 0xff, 0x9f, 0x91, 0xde, 0x75, 0x99, 0xde, 0x8f, 0xba, 0xd4, 0xc6, 0xae, 0x6f, 0x3f, 0x79,
	0x76, 0x90, 0x95, 0xde, 0x17, 0xc1, 0x79, 0xfa, 0xac, 0x6f, 0x4b, 0x81, 0x3e, 0x3b, 0xb0, 0xb4,
	0xcf, 0x05, 0x54, 0x17, 0x8e, 0x7a, 0xcc, 0xaf, 0xb6, 0x83, 0x77, 0x1c, 0x65, 0xf2, 0x3b, 0xce,
	0x5b, 0x60, 0x4a, 0x5c, 0x8e, 0xf9, 0x0e, 0xb3, 0xb5, 0x6b, 0x19, 0x37, 0x1c, 0xb1, 0x55, 0x88,
	0xe7, 0x85, 0xd8, 0x19, 0x36, 0xf5, 0x05, 0xd6, 0x80, 0xfa, 0xaa, 0x49, 0xb8, 0x19, 0xb7, 0x32,
	0xea, 0x39, 0xff, 0xc9, 0xf3, 0xa3, 0xe8, 0x7d, 0x76, 0xe2, 0x3f, 0xc4, 0x16, 0x3a, 0x84, 0x6d,
	0x59, 0x71, 0x67, 0x77, 0x6b, 0x1c, 0xc2, 0x24, 0xb9, 0x89, 0x30, 0x49, 0x3e, 0x11, 0x93, 0x4c,
	0x82, 0xe9, 0x4f, 0x87, 0x37, 0x86, 0x11, 0xc0, 0xd4, 0x28, 0x02, 0x78, 0x0b, 0x2c, 0x98, 0x6d,
	0x97, 0x19, 0x10, 0xa6, 0xe2, 0xf4, 0x98, 0xb4, 0x98, 0x17, 0xfc, 0x61, 0xf7, 0xee, 0x03, 0xe9,
	0x99, 0xd3, 0x00, 0xe9, 0x37, 0xc0, 0x0a, 0xf1, 0x60, 0x40, 0xa3, 0x82, 0x8d, 0xf6, 0x17, 0x28,
	0x64, 0x99, 0xcf, 0x86, 0x75, 0x1b, 0x6e, 0x36, 0x88, 0x57, 0xc0, 0x18, 0xbc, 0xf2, 0x4f, 0x05,
	0x5c, 0x6c, 0x10, 0x7b, 0x9f, 0x50, 0xd7, 0x83, 0x14, 0xf1, 0xee, 0xfb, 0x2e, 0x24, 0x67, 0x18,
	0xfd, 0xa8, 0x0b, 0xe4, 0xb2, 0xaf, 0x78, 0xf9, 0xf1, 0x57, 0xbc, 0xc2, 0xf0, 0x15, 0xaf, 0x0c,
	0x66, 0x90, 0xd4, 0x9c, 0x07, 0xb8, 0x60, 0x44, 0xe3, 0x61, 0x43, 0x3f, 0xca, 0xc9, 0x9b, 0x29,
	0x95, 0x8f, 0x03, 0x4f, 0xd8, 0x46, 0xfc, 0x85, 0x40, 0xfd, 0xee, 0x2b, 0x1b, 0xbb, 0xca, 0x8c,
	0x7d, 0x79, 0xb2, 0xb9, 0xd8, 0x83, 0x5e, 0xfb, 0x9e, 0x16, 0xed, 0x16, 0xb3, 0x7f, 0x2b, 0x7c,
	0x33, 0x10, 0xef, 0x25, 0x4b, 0x2f, 0x4f, 0x36, 0xe7, 0x04, 0x37, 0x27, 0x6b, 0xf2, 0x15, 0x41,
	0x7d, 0x2f, 0x31, 0x6d, 0x05, 0xaa, 0x59, 0x7f, 0x79, 0xb2, 0x59, 0x12, 0x42, 0xa3, 0x3c, 0x5a,
	0x42, 0x56, 0x6f, 0x85, 0xcf, 0x17, 0x85, 0xe1, 0x4d, 0x39, 0x59, 0x93, 0x0f, 0x1a, 0x43, 0x4e,
	0xaa, 0xfd, 0x72, 0x09, 0xe4, 0x1b, 0xc4, 0x56, 0x7f, 0xa3, 0x80, 0xb9, 0x01, 0x5c, 0x7a, 0x73,
	0xdc, 0x73, 0x4d, 0x9f, 0xb7, 0x5c, 0x9b, 0x9c, 0x37, 0x6a, 0x43, 0xbb, 0x1f, 0xfc, 0xed, 0xf3,
	0x9f, 0xe7, 0xbe, 0xaa, 0x7d, 0x45, 0x4f, 0x7f, 0x52, 0x64, 0xa8, 0xae, 0x42, 0x71, 0x25, 0x10,
	0x2a, 0xfd, 0x5a, 0x01, 0x73, 0x03, 0x6f, 0x09, 0x63, 0x74, 0x8c, 0xf3, 0x8e, 0xd3, 0x31, 0xf1,
	0x66, 0xbe, 0xc3, 0x75, 0xbc, 0xa9, 0x6d, 0x67, 0xe8, 0x28, 0x81, 0x4e, 0x85, 0xa3, 0x1b, 0xf5,
	0x67, 0x0a, 0x58, 0x1a, 0xa9, 0xac, 0x6a, 0xf6, 0xd6, 0xc3, 0xfc, 0xe5, 0x95, 0x11, 0xc0, 0xbc,
	0xef, 0x75, 0x68, 0x4f, 0xbb, 0xcd, 0xd5, 0xd1, 0xb5, 0x4a, 0x86, 0x3a, 0x61, 0x31, 0x08, 0x7d,
	0x2a, 0x36, 0x24, 0xea, 0x1f, 0x14, 0x70, 0x61, 0xf4, 0x71, 0x41, 0x9f, 0x24, 0x66, 0x31, 0x81,
	0xf2, 0x9d, 0x53, 0x0a, 0x44, 0x5e, 0xbc, 0xc3, 0xd5, 0xde, 0xd5, 0xf4, 0x09, 0x22, 0x2d, 0xa8,
	0x15, 0x0e, 0xd4, 0xd4, 0x3f, 0x2b, 0x60, 0x25, 0x05, 0x1c, 0xbe, 0x91, 0xad, 0x4c, 0xb2, 0x54,
	0xf9, 0x1b, 0xaf, 0x22, 0x75, 0x2a, 0x3b, 0x84, 0xd7, 0x87, 0xf2, 0xf6, 0x4f, 0x0a, 0x50, 0x13,
	0x6e, 0x7e, 0x3b, 0x63, 0x32, 0x72, 0x44, 0xa2, 0x7c, 0xf7, 0xb4, 0x12, 0x91, 0xee, 0x77, 0xb9,
	0xee, 0x35, 0x6d, 0x27, 0x2b, 0x93, 0xb9, 0xf8, 0xb0, 0xf2, 0x9f, 0x29, 0xa0, 0x9c, 0x71, 0xdb,
	0x1b, 0xa3, 0x52, 0xba, 0x64, 0xf9, 0xfe, 0xab, 0x4a, 0x46, 0x46, 0xdd, 0xe7, 0x46, 0xdd, 0xd3,
	0xee, 0x66, 0x25, 0x16, 0x5f, 0xa6, 0xd2, 0x82, 0x56, 0x25, 0x42, 0xd7, 0x15, 0x14, 0x6a, 0xcf,
	0x3a, 0xca, 0x00, 0x14, 0x1c, 0xd3, 0x51, 0xe2, 0xbc, 0xe3, 0x3a, 0x4a, 0x22, 0xf8, 0x9a, 0xa4,
	0xa3, 0x74, 0xb9, 0x60, 0x45, 0x62, 0xc4, 0x5f, 0x28, 0x40, 0x4d, 0xc0, 0x6a, 0x63, 0x92, 0x67,
	0x54, 0x22, 0xb5, 0xab, 0x4c, 0x92, 0x1a, 0x6d, 0xb6, 0x5c, 0xc5, 0xc7, 0x16, 0xaa, 0x10, 0xd8,
	0x46, 0xb2, 0x3e, 0x3f, 0x54, 0xc0, 0x72, 0xe2, 0xe9, 0x5a, 0x9b, 0xec, 0xa9, 0x3f, 0x2e, 0x93,
	0xaa, 0xde, 0x24, 0x55, 0xc7, 0x4f, 0x36, 0x96, 0xb3, 0x1c, 0x4a, 0x54, 0xc4, 0xe9, 0xda, 0x01,
	0x97, 0xb3, 0x3e, 0xce, 0xbc, 0x99, 0xad, 0x63, 0x86, 0x68, 0x9a, 0xaa, 0xaa, 0x03, 0x56, 0xd3,
	0x3e, 0xc8, 0xdc, 0x7e, 0xa5, 0x8f, 0x1f, 0xa9, 0x3b, 0x59, 0xe0, 0x52, 0xf8, 0xb9, 0x8c, 0x03,
	0xd6, 0x68, 0x9f, 0x5b, 0xd9, 0xfb, 0x24, 0x7e, 0x68, 0x4b, 0xdb, 0xa5, 0x7e, 0xf0, 0xc9, 0xf3,
	0x0d, 0xe5, 0xd3, 0xe7, 0x1b, 0xca, 0x3f, 0x9e, 0x6f, 0x28, 0x3f, 0x7d, 0xb1, 0x71, 0xee, 0xd3,
	0x17, 0x1b, 0xe7, 0xfe, 0xfe, 0x62, 0xe3, 0xdc, 0x77, 0x74, 0xdb, 0xa5, 0x4e, 0xb7, 0x55, 0x35,
	0xb1, 0x97, 0x14, 0x96, 0xe3, 0x9a, 0xfe, 0x6c, 0xe0, 0xb3, 0x60, 0x6b, 0x8a, 0x2f, 0x7d, 0xeb,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x03, 0xba, 0xcd, 0x02, 0x69, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendToRemote(ctx context.Context, in *MsgSendToRemote, opts ...grpc.CallOption) (*MsgSendToRemoteResponse, error)
	ConfirmBatch(ctx context.Context, in *MsgConfirmBatch, opts ...grpc.CallOption) (*MsgConfirmBatchResponse, error)
	EstimateBatchGas(ctx context.Context, in *MsgEstimateBatchGas, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendToPalomaClaim(ctx context.Context, in *MsgSendToPalomaClaim, opts ...grpc.CallOption) (*MsgSendToPalomaClaimResponse, error)
	BatchSendToRemoteClaim(ctx context.Context, in *MsgBatchSendToRemoteClaim, opts ...grpc.CallOption) (*MsgBatchSendToRemoteClaimResponse, error)
	CancelSendToRemote(ctx context.Context, in *MsgCancelSendToRemote, opts ...grpc.CallOption) (*MsgCancelSendToRemoteResponse, error)
	SubmitBadSignatureEvidence(ctx context.Context, in *MsgSubmitBadSignatureEvidence, opts ...grpc.CallOption) (*MsgSubmitBadSignatureEvidenceResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	LightNodeSaleClaim(ctx context.Context, in *MsgLightNodeSaleClaim, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetERC20ToTokenDenom(ctx context.Context, in *MsgSetERC20ToTokenDenom, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReplenishLostGrainsProposal(ctx context.Context, in *MsgReplenishLostGrainsProposal, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetERC20MappingProposal(ctx context.Context, in *MsgSetERC20MappingProposal, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OverrideNonceProposal(ctx context.Context, in *MsgNonceOverrideProposal, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendToRemote(ctx context.Context, in *MsgSendToRemote, opts ...grpc.CallOption) (*MsgSendToRemoteResponse, error) {
	out := new(MsgSendToRemoteResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/SendToRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmBatch(ctx context.Context, in *MsgConfirmBatch, opts ...grpc.CallOption) (*MsgConfirmBatchResponse, error) {
	out := new(MsgConfirmBatchResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/ConfirmBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EstimateBatchGas(ctx context.Context, in *MsgEstimateBatchGas, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/EstimateBatchGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToPalomaClaim(ctx context.Context, in *MsgSendToPalomaClaim, opts ...grpc.CallOption) (*MsgSendToPalomaClaimResponse, error) {
	out := new(MsgSendToPalomaClaimResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/SendToPalomaClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BatchSendToRemoteClaim(ctx context.Context, in *MsgBatchSendToRemoteClaim, opts ...grpc.CallOption) (*MsgBatchSendToRemoteClaimResponse, error) {
	out := new(MsgBatchSendToRemoteClaimResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/BatchSendToRemoteClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSendToRemote(ctx context.Context, in *MsgCancelSendToRemote, opts ...grpc.CallOption) (*MsgCancelSendToRemoteResponse, error) {
	out := new(MsgCancelSendToRemoteResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/CancelSendToRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitBadSignatureEvidence(ctx context.Context, in *MsgSubmitBadSignatureEvidence, opts ...grpc.CallOption) (*MsgSubmitBadSignatureEvidenceResponse, error) {
	out := new(MsgSubmitBadSignatureEvidenceResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/SubmitBadSignatureEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LightNodeSaleClaim(ctx context.Context, in *MsgLightNodeSaleClaim, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/LightNodeSaleClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetERC20ToTokenDenom(ctx context.Context, in *MsgSetERC20ToTokenDenom, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/SetERC20ToTokenDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplenishLostGrainsProposal(ctx context.Context, in *MsgReplenishLostGrainsProposal, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/ReplenishLostGrainsProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetERC20MappingProposal(ctx context.Context, in *MsgSetERC20MappingProposal, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/SetERC20MappingProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OverrideNonceProposal(ctx context.Context, in *MsgNonceOverrideProposal, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.skyway.Msg/OverrideNonceProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendToRemote(context.Context, *MsgSendToRemote) (*MsgSendToRemoteResponse, error)
	ConfirmBatch(context.Context, *MsgConfirmBatch) (*MsgConfirmBatchResponse, error)
	EstimateBatchGas(context.Context, *MsgEstimateBatchGas) (*emptypb.Empty, error)
	SendToPalomaClaim(context.Context, *MsgSendToPalomaClaim) (*MsgSendToPalomaClaimResponse, error)
	BatchSendToRemoteClaim(context.Context, *MsgBatchSendToRemoteClaim) (*MsgBatchSendToRemoteClaimResponse, error)
	CancelSendToRemote(context.Context, *MsgCancelSendToRemote) (*MsgCancelSendToRemoteResponse, error)
	SubmitBadSignatureEvidence(context.Context, *MsgSubmitBadSignatureEvidence) (*MsgSubmitBadSignatureEvidenceResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	LightNodeSaleClaim(context.Context, *MsgLightNodeSaleClaim) (*emptypb.Empty, error)
	SetERC20ToTokenDenom(context.Context, *MsgSetERC20ToTokenDenom) (*emptypb.Empty, error)
	ReplenishLostGrainsProposal(context.Context, *MsgReplenishLostGrainsProposal) (*emptypb.Empty, error)
	SetERC20MappingProposal(context.Context, *MsgSetERC20MappingProposal) (*emptypb.Empty, error)
	OverrideNonceProposal(context.Context, *MsgNonceOverrideProposal) (*emptypb.Empty, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct{}

func (*UnimplementedMsgServer) SendToRemote(ctx context.Context, req *MsgSendToRemote) (*MsgSendToRemoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToRemote not implemented")
}

func (*UnimplementedMsgServer) ConfirmBatch(ctx context.Context, req *MsgConfirmBatch) (*MsgConfirmBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBatch not implemented")
}

func (*UnimplementedMsgServer) EstimateBatchGas(ctx context.Context, req *MsgEstimateBatchGas) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateBatchGas not implemented")
}

func (*UnimplementedMsgServer) SendToPalomaClaim(ctx context.Context, req *MsgSendToPalomaClaim) (*MsgSendToPalomaClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToPalomaClaim not implemented")
}

func (*UnimplementedMsgServer) BatchSendToRemoteClaim(ctx context.Context, req *MsgBatchSendToRemoteClaim) (*MsgBatchSendToRemoteClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSendToRemoteClaim not implemented")
}

func (*UnimplementedMsgServer) CancelSendToRemote(ctx context.Context, req *MsgCancelSendToRemote) (*MsgCancelSendToRemoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendToRemote not implemented")
}

func (*UnimplementedMsgServer) SubmitBadSignatureEvidence(ctx context.Context, req *MsgSubmitBadSignatureEvidence) (*MsgSubmitBadSignatureEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBadSignatureEvidence not implemented")
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func (*UnimplementedMsgServer) LightNodeSaleClaim(ctx context.Context, req *MsgLightNodeSaleClaim) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LightNodeSaleClaim not implemented")
}

func (*UnimplementedMsgServer) SetERC20ToTokenDenom(ctx context.Context, req *MsgSetERC20ToTokenDenom) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetERC20ToTokenDenom not implemented")
}

func (*UnimplementedMsgServer) ReplenishLostGrainsProposal(ctx context.Context, req *MsgReplenishLostGrainsProposal) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplenishLostGrainsProposal not implemented")
}

func (*UnimplementedMsgServer) SetERC20MappingProposal(ctx context.Context, req *MsgSetERC20MappingProposal) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetERC20MappingProposal not implemented")
}

func (*UnimplementedMsgServer) OverrideNonceProposal(ctx context.Context, req *MsgNonceOverrideProposal) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideNonceProposal not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendToRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToRemote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/SendToRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToRemote(ctx, req.(*MsgSendToRemote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/ConfirmBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmBatch(ctx, req.(*MsgConfirmBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EstimateBatchGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEstimateBatchGas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EstimateBatchGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/EstimateBatchGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EstimateBatchGas(ctx, req.(*MsgEstimateBatchGas))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToPalomaClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToPalomaClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToPalomaClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/SendToPalomaClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToPalomaClaim(ctx, req.(*MsgSendToPalomaClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BatchSendToRemoteClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBatchSendToRemoteClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BatchSendToRemoteClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/BatchSendToRemoteClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BatchSendToRemoteClaim(ctx, req.(*MsgBatchSendToRemoteClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSendToRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSendToRemote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSendToRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/CancelSendToRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSendToRemote(ctx, req.(*MsgCancelSendToRemote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitBadSignatureEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBadSignatureEvidence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBadSignatureEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/SubmitBadSignatureEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBadSignatureEvidence(ctx, req.(*MsgSubmitBadSignatureEvidence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LightNodeSaleClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLightNodeSaleClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LightNodeSaleClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/LightNodeSaleClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LightNodeSaleClaim(ctx, req.(*MsgLightNodeSaleClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetERC20ToTokenDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetERC20ToTokenDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetERC20ToTokenDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/SetERC20ToTokenDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetERC20ToTokenDenom(ctx, req.(*MsgSetERC20ToTokenDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplenishLostGrainsProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplenishLostGrainsProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplenishLostGrainsProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/ReplenishLostGrainsProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplenishLostGrainsProposal(ctx, req.(*MsgReplenishLostGrainsProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetERC20MappingProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetERC20MappingProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetERC20MappingProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/SetERC20MappingProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetERC20MappingProposal(ctx, req.(*MsgSetERC20MappingProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OverrideNonceProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNonceOverrideProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OverrideNonceProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.skyway.Msg/OverrideNonceProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OverrideNonceProposal(ctx, req.(*MsgNonceOverrideProposal))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "palomachain.paloma.skyway.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToRemote",
			Handler:    _Msg_SendToRemote_Handler,
		},
		{
			MethodName: "ConfirmBatch",
			Handler:    _Msg_ConfirmBatch_Handler,
		},
		{
			MethodName: "EstimateBatchGas",
			Handler:    _Msg_EstimateBatchGas_Handler,
		},
		{
			MethodName: "SendToPalomaClaim",
			Handler:    _Msg_SendToPalomaClaim_Handler,
		},
		{
			MethodName: "BatchSendToRemoteClaim",
			Handler:    _Msg_BatchSendToRemoteClaim_Handler,
		},
		{
			MethodName: "CancelSendToRemote",
			Handler:    _Msg_CancelSendToRemote_Handler,
		},
		{
			MethodName: "SubmitBadSignatureEvidence",
			Handler:    _Msg_SubmitBadSignatureEvidence_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "LightNodeSaleClaim",
			Handler:    _Msg_LightNodeSaleClaim_Handler,
		},
		{
			MethodName: "SetERC20ToTokenDenom",
			Handler:    _Msg_SetERC20ToTokenDenom_Handler,
		},
		{
			MethodName: "ReplenishLostGrainsProposal",
			Handler:    _Msg_ReplenishLostGrainsProposal_Handler,
		},
		{
			MethodName: "SetERC20MappingProposal",
			Handler:    _Msg_SetERC20MappingProposal_Handler,
		},
		{
			MethodName: "OverrideNonceProposal",
			Handler:    _Msg_OverrideNonceProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "palomachain/paloma/skyway/msgs.proto",
}

func (m *MsgNonceOverrideProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNonceOverrideProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNonceOverrideProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgReplenishLostGrainsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplenishLostGrainsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplenishLostGrainsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetERC20MappingProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetERC20MappingProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetERC20MappingProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mappings) > 0 {
		for iNdEx := len(m.Mappings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mappings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToRemote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToRemote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToRemote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EthDest) > 0 {
		i -= len(m.EthDest)
		copy(dAtA[i:], m.EthDest)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthDest)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToRemoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToRemoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToRemoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendToPalomaClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToPalomaClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToPalomaClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompassId) > 0 {
		i -= len(m.CompassId)
		copy(dAtA[i:], m.CompassId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CompassId)))
		i--
		dAtA[i] = 0x5a
	}
	if m.SkywayNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SkywayNonce))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PalomaReceiver) > 0 {
		i -= len(m.PalomaReceiver)
		copy(dAtA[i:], m.PalomaReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.PalomaReceiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthereumSender) > 0 {
		i -= len(m.EthereumSender)
		copy(dAtA[i:], m.EthereumSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthereumSender)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToPalomaClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToPalomaClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToPalomaClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBatchSendToRemoteClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchSendToRemoteClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchSendToRemoteClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompassId) > 0 {
		i -= len(m.CompassId)
		copy(dAtA[i:], m.CompassId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CompassId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SkywayNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SkywayNonce))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x22
	}
	if m.BatchNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x18
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBatchSendToRemoteClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchSendToRemoteClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchSendToRemoteClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToRemote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToRemote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToRemote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TransactionId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToRemoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToRemoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToRemoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBadSignatureEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBadSignatureEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBadSignatureEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBadSignatureEvidenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBadSignatureEvidenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBadSignatureEvidenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventSetOperatorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetOperatorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetOperatorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBatchCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchNonce) > 0 {
		i -= len(m.BatchNonce)
		copy(dAtA[i:], m.BatchNonce)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BatchNonce)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBatchConfirmKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchConfirmKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchConfirmKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchConfirmKey) > 0 {
		i -= len(m.BatchConfirmKey)
		copy(dAtA[i:], m.BatchConfirmKey)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BatchConfirmKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBatchSendToRemoteClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchSendToRemoteClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchSendToRemoteClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBadSignatureEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBadSignatureEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBadSignatureEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BadEthSignatureSubject) > 0 {
		i -= len(m.BadEthSignatureSubject)
		copy(dAtA[i:], m.BadEthSignatureSubject)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BadEthSignatureSubject)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BadEthSignature) > 0 {
		i -= len(m.BadEthSignature)
		copy(dAtA[i:], m.BadEthSignature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BadEthSignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMultisigUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMultisigUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMultisigUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MultisigId) > 0 {
		i -= len(m.MultisigId)
		copy(dAtA[i:], m.MultisigId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.MultisigId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgeChainId) > 0 {
		i -= len(m.BridgeChainId)
		copy(dAtA[i:], m.BridgeChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BridgeChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BridgeContract) > 0 {
		i -= len(m.BridgeContract)
		copy(dAtA[i:], m.BridgeContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BridgeContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSignatureSlashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSignatureSlashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSignatureSlashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingTxId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingTxId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingTxId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLightNodeSaleClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLightNodeSaleClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLightNodeSaleClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompassId) > 0 {
		i -= len(m.CompassId)
		copy(dAtA[i:], m.CompassId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CompassId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SmartContractAddress) > 0 {
		i -= len(m.SmartContractAddress)
		copy(dAtA[i:], m.SmartContractAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.SmartContractAddress)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ClientAddress) > 0 {
		i -= len(m.ClientAddress)
		copy(dAtA[i:], m.ClientAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ClientAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SkywayNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SkywayNonce))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgEstimateBatchGas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEstimateBatchGas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEstimateBatchGas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Estimate != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Estimate))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetERC20ToTokenDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetERC20ToTokenDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetERC20ToTokenDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *MsgNonceOverrideProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	return n
}

func (m *MsgReplenishLostGrainsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSetERC20MappingProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if len(m.Mappings) > 0 {
		for _, e := range m.Mappings {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	return n
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendToRemote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthDest)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSendToRemoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgConfirmBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendToPalomaClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EthBlockHeight))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.EthereumSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.PalomaReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	if m.SkywayNonce != 0 {
		n += 1 + sovMsgs(uint64(m.SkywayNonce))
	}
	l = len(m.CompassId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSendToPalomaClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBatchSendToRemoteClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EthBlockHeight))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovMsgs(uint64(m.BatchNonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	if m.SkywayNonce != 0 {
		n += 1 + sovMsgs(uint64(m.SkywayNonce))
	}
	l = len(m.CompassId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgBatchSendToRemoteClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelSendToRemote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionId != 0 {
		n += 1 + sovMsgs(uint64(m.TransactionId))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgCancelSendToRemoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitBadSignatureEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSubmitBadSignatureEvidenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventSetOperatorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventBatchCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BatchNonce)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventBatchConfirmKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BatchConfirmKey)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventBatchSendToRemoteClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventBadSignatureEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BadEthSignature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BadEthSignatureSubject)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventMultisigUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BridgeContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BridgeChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.MultisigId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventSignatureSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventOutgoingTxId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLightNodeSaleClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EthBlockHeight))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.SkywayNonce != 0 {
		n += 1 + sovMsgs(uint64(m.SkywayNonce))
	}
	l = len(m.ClientAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.SmartContractAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CompassId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgEstimateBatchGas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Estimate != 0 {
		n += 1 + sovMsgs(uint64(m.Estimate))
	}
	return n
}

func (m *MsgSetERC20ToTokenDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *MsgNonceOverrideProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNonceOverrideProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNonceOverrideProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgReplenishLostGrainsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplenishLostGrainsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplenishLostGrainsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetERC20MappingProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetERC20MappingProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetERC20MappingProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mappings = append(m.Mappings, MsgSetERC20MappingProposal_ERC20ToDenomMapping{})
			if err := m.Mappings[len(m.Mappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetERC20MappingProposal_ERC20ToDenomMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20ToDenomMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20ToDenomMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSendToRemote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToRemote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToRemote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthDest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthDest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSendToRemoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToRemoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToRemoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgConfirmBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgConfirmBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSendToPalomaClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToPalomaClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToPalomaClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PalomaReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PalomaReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkywayNonce", wireType)
			}
			m.SkywayNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkywayNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSendToPalomaClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToPalomaClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToPalomaClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgBatchSendToRemoteClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchSendToRemoteClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchSendToRemoteClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkywayNonce", wireType)
			}
			m.SkywayNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkywayNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgBatchSendToRemoteClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchSendToRemoteClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchSendToRemoteClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgCancelSendToRemote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToRemote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToRemote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgCancelSendToRemoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToRemoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToRemoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSubmitBadSignatureEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBadSignatureEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBadSignatureEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &types2.Any{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSubmitBadSignatureEvidenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBadSignatureEvidenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBadSignatureEvidenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventSetOperatorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetOperatorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetOperatorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventBatchCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchNonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventBatchConfirmKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchConfirmKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchConfirmKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchConfirmKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchConfirmKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventBatchSendToRemoteClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchSendToRemoteClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchSendToRemoteClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventBadSignatureEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBadSignatureEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBadSignatureEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadEthSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadEthSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadEthSignatureSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadEthSignatureSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventMultisigUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMultisigUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMultisigUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultisigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventSignatureSlashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSignatureSlashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSignatureSlashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *EventOutgoingTxId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingTxId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingTxId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgLightNodeSaleClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLightNodeSaleClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLightNodeSaleClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkywayNonce", wireType)
			}
			m.SkywayNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkywayNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgEstimateBatchGas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEstimateBatchGas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEstimateBatchGas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimate", wireType)
			}
			m.Estimate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Estimate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetERC20ToTokenDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetERC20ToTokenDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetERC20ToTokenDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
