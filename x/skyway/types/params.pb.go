// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/skyway/params.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The slashing fractions for the various skyway related slashing conditions.
// The first three refer to not submitting a particular message, the third for
// submitting a different claim for the same ethereum event
type Params struct{}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ec5e4b3ac5cfb2a, []int{0}
}

func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}

func (m *Params) XXX_Size() int {
	return m.Size()
}

func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "palomachain.paloma.skyway.Params")
}

func init() {
	proto.RegisterFile("palomachain/paloma/skyway/params.proto", fileDescriptor_9ec5e4b3ac5cfb2a)
}

var fileDescriptor_9ec5e4b3ac5cfb2a = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xb1, 0x6a, 0xe3, 0x40,
	0x10, 0x95, 0xc0, 0x98, 0xc3, 0xcd, 0x19, 0xe3, 0xe3, 0xb0, 0x0f, 0x84, 0xb9, 0x22, 0xa5, 0x16,
	0x92, 0x2e, 0x65, 0xba, 0xa4, 0x0a, 0x5b, 0xa6, 0x59, 0x46, 0xbb, 0x13, 0xed, 0x62, 0x4b, 0x23,
	0x76, 0x56, 0x76, 0xdc, 0xe5, 0x13, 0xf2, 0x59, 0x29, 0x5d, 0xa6, 0x48, 0x11, 0x6c, 0xc8, 0x77,
	0x04, 0x69, 0xe3, 0x60, 0x48, 0xba, 0xb7, 0xef, 0xbd, 0xd9, 0x79, 0xcc, 0x1b, 0x9d, 0x35, 0xb0,
	0xa2, 0x0a, 0xb4, 0x05, 0x57, 0x8b, 0x88, 0x05, 0x2f, 0xb7, 0x1b, 0xd8, 0x8a, 0x06, 0x3c, 0x54,
	0x9c, 0x37, 0x9e, 0x02, 0x4d, 0x66, 0x27, 0xbe, 0x3c, 0xe2, 0x3c, 0xfa, 0xe6, 0xd3, 0x92, 0x4a,
	0xea, 0x5d, 0xa2, 0x43, 0x71, 0x60, 0x3e, 0xd3, 0xc4, 0x15, 0xb1, 0x8a, 0x42, 0x7c, 0x44, 0xe9,
	0xff, 0x7b, 0x3a, 0x1a, 0xde, 0xf6, 0x9f, 0x5f, 0x0e, 0x1e, 0x5f, 0x17, 0xc9, 0xcd, 0xe0, 0x57,
	0x3a, 0x1e, 0xc9, 0xa9, 0xa6, 0x3a, 0x78, 0xd0, 0x41, 0x31, 0xb5, 0x5e, 0xa3, 0xb2, 0xc0, 0x56,
	0xfe, 0x2d, 0xbc, 0x33, 0x25, 0x2a, 0x0c, 0x16, 0x3d, 0xb6, 0x95, 0x02, 0x63, 0x3c, 0x32, 0xcb,
	0xdf, 0x9f, 0x42, 0x1f, 0x49, 0x39, 0x23, 0xff, 0xb0, 0x2b, 0x6b, 0x34, 0xaa, 0x80, 0xa0, 0x2d,
	0xb2, 0xda, 0xb8, 0xda, 0xd0, 0x46, 0x8e, 0x03, 0xf8, 0x9e, 0x52, 0xc1, 0x55, 0x48, 0x6d, 0x90,
	0x13, 0x58, 0xa3, 0x87, 0x12, 0x55, 0xb1, 0x22, 0xbd, 0xec, 0x69, 0xf9, 0xef, 0xc8, 0x7d, 0xed,
	0x39, 0x11, 0xa7, 0xbc, 0x02, 0xb6, 0xea, 0xbe, 0x0b, 0xe7, 0xa8, 0x8e, 0x1b, 0xe4, 0xe2, 0x1b,
	0x6b, 0xba, 0x69, 0xd5, 0xc5, 0x80, 0xd0, 0x7a, 0xbc, 0xba, 0x7e, 0xde, 0x67, 0xe9, 0x6e, 0x9f,
	0xa5, 0x6f, 0xfb, 0x2c, 0x7d, 0x3a, 0x64, 0xc9, 0xee, 0x90, 0x25, 0x2f, 0x87, 0x2c, 0xb9, 0x13,
	0xa5, 0x0b, 0xb6, 0x2d, 0x72, 0x4d, 0x95, 0xf8, 0xa1, 0x81, 0xf5, 0xb9, 0x78, 0x38, 0xd6, 0x10,
	0xb6, 0x0d, 0x72, 0x31, 0xec, 0x4f, 0x77, 0xf1, 0x11, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xd4, 0x1c,
	0x49, 0xb0, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
