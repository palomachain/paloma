// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/gravity/genesis.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState struct, containing all persistant data required by the Gravity
// module
type GenesisState struct {
	Params             *Params              `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	GravityNonces      []GravityNonces      `protobuf:"bytes,2,rep,name=gravity_nonces,json=gravityNonces,proto3" json:"gravity_nonces"`
	Batches            []OutgoingTxBatch    `protobuf:"bytes,3,rep,name=batches,proto3" json:"batches"`
	BatchConfirms      []MsgConfirmBatch    `protobuf:"bytes,4,rep,name=batch_confirms,json=batchConfirms,proto3" json:"batch_confirms"`
	Attestations       []Attestation        `protobuf:"bytes,7,rep,name=attestations,proto3" json:"attestations"`
	Erc20ToDenoms      []ERC20ToDenom       `protobuf:"bytes,9,rep,name=erc20_to_denoms,json=erc20ToDenoms,proto3" json:"erc20_to_denoms"`
	UnbatchedTransfers []OutgoingTransferTx `protobuf:"bytes,10,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_251e5f09dc76aa70, []int{0}
}

func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}

func (m *GenesisState) XXX_Size() int {
	return m.Size()
}

func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetGravityNonces() []GravityNonces {
	if m != nil {
		return m.GravityNonces
	}
	return nil
}

func (m *GenesisState) GetBatches() []OutgoingTxBatch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func (m *GenesisState) GetBatchConfirms() []MsgConfirmBatch {
	if m != nil {
		return m.BatchConfirms
	}
	return nil
}

func (m *GenesisState) GetAttestations() []Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *GenesisState) GetErc20ToDenoms() []ERC20ToDenom {
	if m != nil {
		return m.Erc20ToDenoms
	}
	return nil
}

func (m *GenesisState) GetUnbatchedTransfers() []OutgoingTransferTx {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

// GravityCounters contains the many noces and counters required to maintain the
// bridge state in the genesis
type GravityNonces struct {
	// the last observed Gravity.sol contract event nonce
	LastObservedNonce uint64 `protobuf:"varint,1,opt,name=last_observed_nonce,json=lastObservedNonce,proto3" json:"last_observed_nonce,omitempty"`
	// the last batch Cosmos chain block that batch slashing has completed for
	// there is an individual batch nonce for each token type so this removes
	// the need to store them all
	LastSlashedBatchBlock uint64 `protobuf:"varint,2,opt,name=last_slashed_batch_block,json=lastSlashedBatchBlock,proto3" json:"last_slashed_batch_block,omitempty"`
	// the last transaction id from the Gravity TX pool, this prevents ID
	// duplication during chain upgrades
	LastTxPoolId uint64 `protobuf:"varint,3,opt,name=last_tx_pool_id,json=lastTxPoolId,proto3" json:"last_tx_pool_id,omitempty"`
	// the last batch id from the Gravity batch pool, this prevents ID duplication
	// during chain upgrades
	LastBatchId uint64 `protobuf:"varint,4,opt,name=last_batch_id,json=lastBatchId,proto3" json:"last_batch_id,omitempty"`
	// the reference id of the remote chain this data applies to.
	ChainReferenceId string `protobuf:"bytes,5,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
}

func (m *GravityNonces) Reset()         { *m = GravityNonces{} }
func (m *GravityNonces) String() string { return proto.CompactTextString(m) }
func (*GravityNonces) ProtoMessage()    {}
func (*GravityNonces) Descriptor() ([]byte, []int) {
	return fileDescriptor_251e5f09dc76aa70, []int{1}
}

func (m *GravityNonces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *GravityNonces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GravityNonces.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *GravityNonces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GravityNonces.Merge(m, src)
}

func (m *GravityNonces) XXX_Size() int {
	return m.Size()
}

func (m *GravityNonces) XXX_DiscardUnknown() {
	xxx_messageInfo_GravityNonces.DiscardUnknown(m)
}

var xxx_messageInfo_GravityNonces proto.InternalMessageInfo

func (m *GravityNonces) GetLastObservedNonce() uint64 {
	if m != nil {
		return m.LastObservedNonce
	}
	return 0
}

func (m *GravityNonces) GetLastSlashedBatchBlock() uint64 {
	if m != nil {
		return m.LastSlashedBatchBlock
	}
	return 0
}

func (m *GravityNonces) GetLastTxPoolId() uint64 {
	if m != nil {
		return m.LastTxPoolId
	}
	return 0
}

func (m *GravityNonces) GetLastBatchId() uint64 {
	if m != nil {
		return m.LastBatchId
	}
	return 0
}

func (m *GravityNonces) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "palomachain.paloma.gravity.GenesisState")
	proto.RegisterType((*GravityNonces)(nil), "palomachain.paloma.gravity.GravityNonces")
}

func init() {
	proto.RegisterFile("palomachain/paloma/gravity/genesis.proto", fileDescriptor_251e5f09dc76aa70)
}

var fileDescriptor_251e5f09dc76aa70 = []byte{
	// 577 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x61, 0x6b, 0xd3, 0x4e,
	0x1c, 0xc7, 0x9b, 0xad, 0xff, 0x8d, 0xdd, 0xda, 0xed, 0xef, 0x4d, 0x21, 0xf4, 0x41, 0x2c, 0x85,
	0xb9, 0x8a, 0x33, 0xd9, 0xea, 0x03, 0xc1, 0x67, 0x76, 0x4a, 0x29, 0xa2, 0x9b, 0x59, 0x19, 0xe2,
	0x93, 0x70, 0x49, 0xae, 0x69, 0x30, 0xc9, 0x95, 0xfc, 0xae, 0xa5, 0x7b, 0x17, 0xbe, 0xac, 0x3d,
	0xdc, 0x43, 0x41, 0x10, 0x69, 0x5f, 0x81, 0xef, 0x40, 0xf2, 0xbb, 0xab, 0xb6, 0xa0, 0x71, 0x8f,
	0x7a, 0xdc, 0xf7, 0xf3, 0xfd, 0xf4, 0xf8, 0x5d, 0x12, 0xd2, 0x1e, 0xb3, 0x44, 0xa4, 0x2c, 0x18,
	0xb1, 0x38, 0x73, 0xd4, 0xda, 0x89, 0x72, 0x36, 0x8d, 0xe5, 0xb5, 0x13, 0xf1, 0x8c, 0x43, 0x0c,
	0xf6, 0x38, 0x17, 0x52, 0xd0, 0xc6, 0x0a, 0x69, 0xab, 0xb5, 0xad, 0xc9, 0xc6, 0xfd, 0x48, 0x44,
	0x02, 0x31, 0xa7, 0x58, 0xa9, 0x46, 0xe3, 0x51, 0x89, 0x5b, 0x5e, 0x8f, 0xb9, 0x36, 0x37, 0x0e,
	0x4b, 0xb8, 0x14, 0x22, 0xb8, 0x83, 0xce, 0x67, 0x32, 0x18, 0x69, 0xee, 0xb8, 0x84, 0x63, 0x52,
	0x72, 0x90, 0x4c, 0xc6, 0x22, 0xd3, 0xb4, 0x15, 0x08, 0x48, 0x05, 0x38, 0x3e, 0x03, 0xee, 0x4c,
	0x4f, 0x7d, 0x2e, 0xd9, 0xa9, 0x13, 0x88, 0x78, 0x99, 0x1f, 0x95, 0xd8, 0xc6, 0x2c, 0x67, 0xa9,
	0x3e, 0x5e, 0xeb, 0x6b, 0x95, 0xd4, 0x7a, 0x6a, 0x62, 0x97, 0x92, 0x49, 0x4e, 0x5f, 0x90, 0x2d,
	0x05, 0x98, 0x46, 0xd3, 0x68, 0xef, 0x76, 0x5a, 0xf6, 0xdf, 0x27, 0x68, 0x5f, 0x20, 0xe9, 0xea,
	0x06, 0xbd, 0x22, 0x7b, 0x3a, 0xf1, 0x32, 0x91, 0x05, 0x1c, 0xcc, 0x8d, 0xe6, 0x66, 0x7b, 0xb7,
	0xf3, 0xb8, 0xcc, 0xd1, 0x53, 0xbf, 0xef, 0xb0, 0xd0, 0xad, 0xde, 0x7c, 0x7b, 0x58, 0x71, 0xeb,
	0xd1, 0xea, 0x26, 0x7d, 0x43, 0xb6, 0x71, 0x54, 0x1c, 0xcc, 0x4d, 0x14, 0x3e, 0x29, 0x13, 0x9e,
	0x4f, 0x64, 0x24, 0xe2, 0x2c, 0x1a, 0xcc, 0xba, 0x45, 0x49, 0x2b, 0x97, 0x06, 0xfa, 0x81, 0xec,
	0xe1, 0xd2, 0x0b, 0x44, 0x36, 0x8c, 0xf3, 0x14, 0xcc, 0xea, 0xbf, 0x9d, 0x6f, 0x21, 0x3a, 0x53,
	0xf8, 0xaa, 0xb3, 0x8e, 0x22, 0x1d, 0x00, 0x7d, 0x4f, 0x6a, 0x2b, 0x37, 0x05, 0xe6, 0x36, 0x7a,
	0x8f, 0xca, 0xbc, 0x2f, 0x7f, 0xf3, 0xda, 0xb9, 0xa6, 0xa0, 0x57, 0x64, 0x9f, 0xe7, 0x41, 0xe7,
	0xc4, 0x93, 0xc2, 0x0b, 0x79, 0x26, 0x52, 0x30, 0x77, 0xd0, 0xda, 0x2e, 0xb3, 0xbe, 0x76, 0xcf,
	0x3a, 0x27, 0x03, 0xf1, 0xaa, 0x28, 0x2c, 0x8f, 0x8a, 0x1a, 0xbd, 0x07, 0x94, 0x93, 0x83, 0x49,
	0xa6, 0x26, 0x12, 0x7a, 0x32, 0x67, 0x19, 0x0c, 0x79, 0x0e, 0x26, 0x41, 0xb7, 0x7d, 0xa7, 0xe9,
	0xea, 0xd2, 0x60, 0xa6, 0xff, 0x81, 0xfe, 0x12, 0x2e, 0x23, 0x68, 0xfd, 0x30, 0x48, 0x7d, 0xed,
	0x7e, 0xa9, 0x4d, 0x0e, 0x12, 0x06, 0xd2, 0x13, 0x3e, 0xf0, 0x7c, 0xca, 0x43, 0xf5, 0xa0, 0xe0,
	0xb3, 0x56, 0x75, 0xef, 0x15, 0xd1, 0xb9, 0x4e, 0xb0, 0x40, 0x9f, 0x13, 0x13, 0x79, 0x48, 0x18,
	0x14, 0x67, 0x55, 0x57, 0xe7, 0x27, 0x22, 0xf8, 0x64, 0x6e, 0x60, 0xe9, 0x41, 0x91, 0x5f, 0xaa,
	0x58, 0x5d, 0x4e, 0x11, 0xd2, 0x43, 0xb2, 0x8f, 0x45, 0x39, 0xf3, 0xc6, 0x42, 0x24, 0x5e, 0x1c,
	0x9a, 0x9b, 0xc8, 0xd7, 0x8a, 0xed, 0xc1, 0xec, 0x42, 0x88, 0xa4, 0x1f, 0xd2, 0x16, 0xa9, 0x23,
	0xa6, 0xbc, 0x71, 0x68, 0x56, 0x11, 0xda, 0x2d, 0x36, 0xd1, 0xd6, 0x0f, 0xe9, 0x31, 0xa1, 0x38,
	0x0a, 0x2f, 0xe7, 0x43, 0x9e, 0xf3, 0x2c, 0xe0, 0x05, 0xf8, 0x5f, 0xd3, 0x68, 0xef, 0xb8, 0xff,
	0x63, 0xe2, 0x2e, 0x83, 0x7e, 0xd8, 0xed, 0xdd, 0xcc, 0x2d, 0xe3, 0x76, 0x6e, 0x19, 0xdf, 0xe7,
	0x96, 0xf1, 0x79, 0x61, 0x55, 0x6e, 0x17, 0x56, 0xe5, 0xcb, 0xc2, 0xaa, 0x7c, 0x7c, 0x1a, 0xc5,
	0x72, 0x34, 0xf1, 0xed, 0x40, 0xa4, 0xce, 0x1f, 0xde, 0xcf, 0xd9, 0xfa, 0x67, 0xc6, 0xdf, 0xc2,
	0x37, 0xf4, 0xd9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xd9, 0x53, 0x04, 0xed, 0x04, 0x00,
	0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for iNdEx := len(m.Erc20ToDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc20ToDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BatchConfirms) > 0 {
		for iNdEx := len(m.BatchConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GravityNonces) > 0 {
		for iNdEx := len(m.GravityNonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GravityNonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GravityNonces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GravityNonces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GravityNonces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastBatchId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastBatchId))
		i--
		dAtA[i] = 0x20
	}
	if m.LastTxPoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastTxPoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.LastSlashedBatchBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSlashedBatchBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.LastObservedNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastObservedNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.GravityNonces) > 0 {
		for _, e := range m.GravityNonces {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchConfirms) > 0 {
		for _, e := range m.BatchConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for _, e := range m.Erc20ToDenoms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GravityNonces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastObservedNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastObservedNonce))
	}
	if m.LastSlashedBatchBlock != 0 {
		n += 1 + sovGenesis(uint64(m.LastSlashedBatchBlock))
	}
	if m.LastTxPoolId != 0 {
		n += 1 + sovGenesis(uint64(m.LastTxPoolId))
	}
	if m.LastBatchId != 0 {
		n += 1 + sovGenesis(uint64(m.LastBatchId))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravityNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravityNonces = append(m.GravityNonces, GravityNonces{})
			if err := m.GravityNonces[len(m.GravityNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, OutgoingTxBatch{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchConfirms = append(m.BatchConfirms, MsgConfirmBatch{})
			if err := m.BatchConfirms[len(m.BatchConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20ToDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20ToDenoms = append(m.Erc20ToDenoms, ERC20ToDenom{})
			if err := m.Erc20ToDenoms[len(m.Erc20ToDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, OutgoingTransferTx{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *GravityNonces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GravityNonces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GravityNonces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedNonce", wireType)
			}
			m.LastObservedNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSlashedBatchBlock", wireType)
			}
			m.LastSlashedBatchBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSlashedBatchBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTxPoolId", wireType)
			}
			m.LastTxPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTxPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBatchId", wireType)
			}
			m.LastBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
