// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/gravity/msgs.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types2 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/palomachain/paloma/x/valset/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSendToEth
// This is the message that a user calls when they want to bridge an asset
// it will later be removed when it is included in a batch and successfully
// submitted tokens are removed from the users balance immediately
// -------------
// AMOUNT:
// the coin to send across the bridge, note the restriction that this is a
// single coin not a set of coins that is normal in other Cosmos messages
type MsgSendToEth struct {
	EthDest          string             `protobuf:"bytes,2,opt,name=eth_dest,json=ethDest,proto3" json:"eth_dest,omitempty"`
	Amount           types.Coin         `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	ChainReferenceId string             `protobuf:"bytes,4,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Metadata         types1.MsgMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgSendToEth) Reset()         { *m = MsgSendToEth{} }
func (m *MsgSendToEth) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEth) ProtoMessage()    {}
func (*MsgSendToEth) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{0}
}
func (m *MsgSendToEth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEth.Merge(m, src)
}
func (m *MsgSendToEth) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEth) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEth.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEth proto.InternalMessageInfo

func (m *MsgSendToEth) GetEthDest() string {
	if m != nil {
		return m.EthDest
	}
	return ""
}

func (m *MsgSendToEth) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgSendToEth) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgSendToEth) GetMetadata() types1.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types1.MsgMetadata{}
}

type MsgSendToEthResponse struct {
}

func (m *MsgSendToEthResponse) Reset()         { *m = MsgSendToEthResponse{} }
func (m *MsgSendToEthResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEthResponse) ProtoMessage()    {}
func (*MsgSendToEthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{1}
}
func (m *MsgSendToEthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEthResponse.Merge(m, src)
}
func (m *MsgSendToEthResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEthResponse proto.InternalMessageInfo

// MsgConfirmBatch
// When validators observe a MsgRequestBatch they form a batch by ordering
// transactions currently in the txqueue,
// cutting off when the batch either reaches a hardcoded maximum size (to be
// decided, probably around 100) or when transactions stop being profitable
// (TODO determine this without nondeterminism) This message includes the batch
// as well as an Ethereum signature over this batch by the validator
// -------------
type MsgConfirmBatch struct {
	Nonce         uint64             `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TokenContract string             `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	EthSigner     string             `protobuf:"bytes,3,opt,name=eth_signer,json=ethSigner,proto3" json:"eth_signer,omitempty"`
	Orchestrator  string             `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	Signature     string             `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Metadata      types1.MsgMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgConfirmBatch) Reset()         { *m = MsgConfirmBatch{} }
func (m *MsgConfirmBatch) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBatch) ProtoMessage()    {}
func (*MsgConfirmBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{2}
}
func (m *MsgConfirmBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBatch.Merge(m, src)
}
func (m *MsgConfirmBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBatch proto.InternalMessageInfo

func (m *MsgConfirmBatch) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgConfirmBatch) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgConfirmBatch) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgConfirmBatch) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgConfirmBatch) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *MsgConfirmBatch) GetMetadata() types1.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types1.MsgMetadata{}
}

type MsgConfirmBatchResponse struct {
}

func (m *MsgConfirmBatchResponse) Reset()         { *m = MsgConfirmBatchResponse{} }
func (m *MsgConfirmBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmBatchResponse) ProtoMessage()    {}
func (*MsgConfirmBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{3}
}
func (m *MsgConfirmBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmBatchResponse.Merge(m, src)
}
func (m *MsgConfirmBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmBatchResponse proto.InternalMessageInfo

// MsgSendToPalomaClaim
// When more than 66% of the active validator set has
// claimed to have seen the deposit enter the ethereum blockchain coins are
// issued to the Cosmos address in question
// -------------
type MsgSendToPalomaClaim struct {
	EventNonce       uint64                `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight   uint64                `protobuf:"varint,2,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	TokenContract    string                `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Amount           cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	EthereumSender   string                `protobuf:"bytes,5,opt,name=ethereum_sender,json=ethereumSender,proto3" json:"ethereum_sender,omitempty"`
	PalomaReceiver   string                `protobuf:"bytes,6,opt,name=paloma_receiver,json=palomaReceiver,proto3" json:"paloma_receiver,omitempty"`
	Orchestrator     string                `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	ChainReferenceId string                `protobuf:"bytes,8,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Metadata         types1.MsgMetadata    `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgSendToPalomaClaim) Reset()         { *m = MsgSendToPalomaClaim{} }
func (m *MsgSendToPalomaClaim) String() string { return proto.CompactTextString(m) }
func (*MsgSendToPalomaClaim) ProtoMessage()    {}
func (*MsgSendToPalomaClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{4}
}
func (m *MsgSendToPalomaClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToPalomaClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToPalomaClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToPalomaClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToPalomaClaim.Merge(m, src)
}
func (m *MsgSendToPalomaClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToPalomaClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToPalomaClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToPalomaClaim proto.InternalMessageInfo

func (m *MsgSendToPalomaClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgSendToPalomaClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgSendToPalomaClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetEthereumSender() string {
	if m != nil {
		return m.EthereumSender
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetPalomaReceiver() string {
	if m != nil {
		return m.PalomaReceiver
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgSendToPalomaClaim) GetMetadata() types1.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types1.MsgMetadata{}
}

type MsgSendToPalomaClaimResponse struct {
}

func (m *MsgSendToPalomaClaimResponse) Reset()         { *m = MsgSendToPalomaClaimResponse{} }
func (m *MsgSendToPalomaClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToPalomaClaimResponse) ProtoMessage()    {}
func (*MsgSendToPalomaClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{5}
}
func (m *MsgSendToPalomaClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToPalomaClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToPalomaClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToPalomaClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToPalomaClaimResponse.Merge(m, src)
}
func (m *MsgSendToPalomaClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToPalomaClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToPalomaClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToPalomaClaimResponse proto.InternalMessageInfo

// BatchSendToEthClaim claims that a batch of send to eth
// operations on the bridge contract was executed.
type MsgBatchSendToEthClaim struct {
	EventNonce       uint64             `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EthBlockHeight   uint64             `protobuf:"varint,2,opt,name=eth_block_height,json=ethBlockHeight,proto3" json:"eth_block_height,omitempty"`
	BatchNonce       uint64             `protobuf:"varint,3,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	TokenContract    string             `protobuf:"bytes,4,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	ChainReferenceId string             `protobuf:"bytes,5,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Orchestrator     string             `protobuf:"bytes,6,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	Metadata         types1.MsgMetadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgBatchSendToEthClaim) Reset()         { *m = MsgBatchSendToEthClaim{} }
func (m *MsgBatchSendToEthClaim) String() string { return proto.CompactTextString(m) }
func (*MsgBatchSendToEthClaim) ProtoMessage()    {}
func (*MsgBatchSendToEthClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{6}
}
func (m *MsgBatchSendToEthClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchSendToEthClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchSendToEthClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchSendToEthClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchSendToEthClaim.Merge(m, src)
}
func (m *MsgBatchSendToEthClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchSendToEthClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchSendToEthClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchSendToEthClaim proto.InternalMessageInfo

func (m *MsgBatchSendToEthClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgBatchSendToEthClaim) GetEthBlockHeight() uint64 {
	if m != nil {
		return m.EthBlockHeight
	}
	return 0
}

func (m *MsgBatchSendToEthClaim) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *MsgBatchSendToEthClaim) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *MsgBatchSendToEthClaim) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgBatchSendToEthClaim) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgBatchSendToEthClaim) GetMetadata() types1.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types1.MsgMetadata{}
}

type MsgBatchSendToEthClaimResponse struct {
}

func (m *MsgBatchSendToEthClaimResponse) Reset()         { *m = MsgBatchSendToEthClaimResponse{} }
func (m *MsgBatchSendToEthClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBatchSendToEthClaimResponse) ProtoMessage()    {}
func (*MsgBatchSendToEthClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{7}
}
func (m *MsgBatchSendToEthClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchSendToEthClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchSendToEthClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchSendToEthClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchSendToEthClaimResponse.Merge(m, src)
}
func (m *MsgBatchSendToEthClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchSendToEthClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchSendToEthClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchSendToEthClaimResponse proto.InternalMessageInfo

// This call allows the sender (and only the sender)
// to cancel a given MsgSendToEth and recieve a refund
// of the tokens
type MsgCancelSendToEth struct {
	TransactionId uint64             `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Metadata      types1.MsgMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgCancelSendToEth) Reset()         { *m = MsgCancelSendToEth{} }
func (m *MsgCancelSendToEth) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToEth) ProtoMessage()    {}
func (*MsgCancelSendToEth) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{8}
}
func (m *MsgCancelSendToEth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToEth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToEth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToEth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToEth.Merge(m, src)
}
func (m *MsgCancelSendToEth) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToEth) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToEth.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToEth proto.InternalMessageInfo

func (m *MsgCancelSendToEth) GetTransactionId() uint64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *MsgCancelSendToEth) GetMetadata() types1.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types1.MsgMetadata{}
}

type MsgCancelSendToEthResponse struct {
}

func (m *MsgCancelSendToEthResponse) Reset()         { *m = MsgCancelSendToEthResponse{} }
func (m *MsgCancelSendToEthResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToEthResponse) ProtoMessage()    {}
func (*MsgCancelSendToEthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{9}
}
func (m *MsgCancelSendToEthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToEthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToEthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToEthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToEthResponse.Merge(m, src)
}
func (m *MsgCancelSendToEthResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToEthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToEthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToEthResponse proto.InternalMessageInfo

// This call allows anyone to submit evidence that a
// validator has signed a batch that never
// existed on the Cosmos chain.
// Subject contains the batch.
type MsgSubmitBadSignatureEvidence struct {
	Subject          *types2.Any        `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Signature        string             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	ChainReferenceId string             `protobuf:"bytes,4,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Metadata         types1.MsgMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgSubmitBadSignatureEvidence) Reset()         { *m = MsgSubmitBadSignatureEvidence{} }
func (m *MsgSubmitBadSignatureEvidence) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBadSignatureEvidence) ProtoMessage()    {}
func (*MsgSubmitBadSignatureEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{10}
}
func (m *MsgSubmitBadSignatureEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBadSignatureEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBadSignatureEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBadSignatureEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBadSignatureEvidence.Merge(m, src)
}
func (m *MsgSubmitBadSignatureEvidence) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBadSignatureEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBadSignatureEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBadSignatureEvidence proto.InternalMessageInfo

func (m *MsgSubmitBadSignatureEvidence) GetSubject() *types2.Any {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *MsgSubmitBadSignatureEvidence) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *MsgSubmitBadSignatureEvidence) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *MsgSubmitBadSignatureEvidence) GetMetadata() types1.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types1.MsgMetadata{}
}

type MsgSubmitBadSignatureEvidenceResponse struct {
}

func (m *MsgSubmitBadSignatureEvidenceResponse) Reset()         { *m = MsgSubmitBadSignatureEvidenceResponse{} }
func (m *MsgSubmitBadSignatureEvidenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBadSignatureEvidenceResponse) ProtoMessage()    {}
func (*MsgSubmitBadSignatureEvidenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{11}
}
func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBadSignatureEvidenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBadSignatureEvidenceResponse.Merge(m, src)
}
func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBadSignatureEvidenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBadSignatureEvidenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBadSignatureEvidenceResponse proto.InternalMessageInfo

type EventSetOperatorAddress struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EventSetOperatorAddress) Reset()         { *m = EventSetOperatorAddress{} }
func (m *EventSetOperatorAddress) String() string { return proto.CompactTextString(m) }
func (*EventSetOperatorAddress) ProtoMessage()    {}
func (*EventSetOperatorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{12}
}
func (m *EventSetOperatorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetOperatorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetOperatorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetOperatorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetOperatorAddress.Merge(m, src)
}
func (m *EventSetOperatorAddress) XXX_Size() int {
	return m.Size()
}
func (m *EventSetOperatorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetOperatorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetOperatorAddress proto.InternalMessageInfo

func (m *EventSetOperatorAddress) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventSetOperatorAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type EventBatchCreated struct {
	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	BatchNonce string `protobuf:"bytes,2,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
}

func (m *EventBatchCreated) Reset()         { *m = EventBatchCreated{} }
func (m *EventBatchCreated) String() string { return proto.CompactTextString(m) }
func (*EventBatchCreated) ProtoMessage()    {}
func (*EventBatchCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{13}
}
func (m *EventBatchCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBatchCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBatchCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchCreated.Merge(m, src)
}
func (m *EventBatchCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventBatchCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchCreated proto.InternalMessageInfo

func (m *EventBatchCreated) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventBatchCreated) GetBatchNonce() string {
	if m != nil {
		return m.BatchNonce
	}
	return ""
}

type EventBatchConfirmKey struct {
	Message         string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	BatchConfirmKey string `protobuf:"bytes,2,opt,name=batch_confirm_key,json=batchConfirmKey,proto3" json:"batch_confirm_key,omitempty"`
}

func (m *EventBatchConfirmKey) Reset()         { *m = EventBatchConfirmKey{} }
func (m *EventBatchConfirmKey) String() string { return proto.CompactTextString(m) }
func (*EventBatchConfirmKey) ProtoMessage()    {}
func (*EventBatchConfirmKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{14}
}
func (m *EventBatchConfirmKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBatchConfirmKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchConfirmKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBatchConfirmKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchConfirmKey.Merge(m, src)
}
func (m *EventBatchConfirmKey) XXX_Size() int {
	return m.Size()
}
func (m *EventBatchConfirmKey) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchConfirmKey.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchConfirmKey proto.InternalMessageInfo

func (m *EventBatchConfirmKey) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventBatchConfirmKey) GetBatchConfirmKey() string {
	if m != nil {
		return m.BatchConfirmKey
	}
	return ""
}

type EventBatchSendToEthClaim struct {
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EventBatchSendToEthClaim) Reset()         { *m = EventBatchSendToEthClaim{} }
func (m *EventBatchSendToEthClaim) String() string { return proto.CompactTextString(m) }
func (*EventBatchSendToEthClaim) ProtoMessage()    {}
func (*EventBatchSendToEthClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{15}
}
func (m *EventBatchSendToEthClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBatchSendToEthClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBatchSendToEthClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBatchSendToEthClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatchSendToEthClaim.Merge(m, src)
}
func (m *EventBatchSendToEthClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventBatchSendToEthClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatchSendToEthClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatchSendToEthClaim proto.InternalMessageInfo

func (m *EventBatchSendToEthClaim) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

type EventClaim struct {
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ClaimHash     string `protobuf:"bytes,2,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	AttestationId string `protobuf:"bytes,3,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
}

func (m *EventClaim) Reset()         { *m = EventClaim{} }
func (m *EventClaim) String() string { return proto.CompactTextString(m) }
func (*EventClaim) ProtoMessage()    {}
func (*EventClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{16}
}
func (m *EventClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventClaim.Merge(m, src)
}
func (m *EventClaim) XXX_Size() int {
	return m.Size()
}
func (m *EventClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_EventClaim.DiscardUnknown(m)
}

var xxx_messageInfo_EventClaim proto.InternalMessageInfo

func (m *EventClaim) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventClaim) GetClaimHash() string {
	if m != nil {
		return m.ClaimHash
	}
	return ""
}

func (m *EventClaim) GetAttestationId() string {
	if m != nil {
		return m.AttestationId
	}
	return ""
}

type EventBadSignatureEvidence struct {
	Message                string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	BadEthSignature        string `protobuf:"bytes,2,opt,name=bad_eth_signature,json=badEthSignature,proto3" json:"bad_eth_signature,omitempty"`
	BadEthSignatureSubject string `protobuf:"bytes,3,opt,name=bad_eth_signature_subject,json=badEthSignatureSubject,proto3" json:"bad_eth_signature_subject,omitempty"`
}

func (m *EventBadSignatureEvidence) Reset()         { *m = EventBadSignatureEvidence{} }
func (m *EventBadSignatureEvidence) String() string { return proto.CompactTextString(m) }
func (*EventBadSignatureEvidence) ProtoMessage()    {}
func (*EventBadSignatureEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{17}
}
func (m *EventBadSignatureEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBadSignatureEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBadSignatureEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBadSignatureEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBadSignatureEvidence.Merge(m, src)
}
func (m *EventBadSignatureEvidence) XXX_Size() int {
	return m.Size()
}
func (m *EventBadSignatureEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBadSignatureEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_EventBadSignatureEvidence proto.InternalMessageInfo

func (m *EventBadSignatureEvidence) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventBadSignatureEvidence) GetBadEthSignature() string {
	if m != nil {
		return m.BadEthSignature
	}
	return ""
}

func (m *EventBadSignatureEvidence) GetBadEthSignatureSubject() string {
	if m != nil {
		return m.BadEthSignatureSubject
	}
	return ""
}

type EventMultisigUpdateRequest struct {
	BridgeContract string `protobuf:"bytes,1,opt,name=bridge_contract,json=bridgeContract,proto3" json:"bridge_contract,omitempty"`
	BridgeChainId  string `protobuf:"bytes,2,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	MultisigId     string `protobuf:"bytes,3,opt,name=multisig_id,json=multisigId,proto3" json:"multisig_id,omitempty"`
	Nonce          string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *EventMultisigUpdateRequest) Reset()         { *m = EventMultisigUpdateRequest{} }
func (m *EventMultisigUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*EventMultisigUpdateRequest) ProtoMessage()    {}
func (*EventMultisigUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{18}
}
func (m *EventMultisigUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMultisigUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMultisigUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMultisigUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMultisigUpdateRequest.Merge(m, src)
}
func (m *EventMultisigUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventMultisigUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMultisigUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventMultisigUpdateRequest proto.InternalMessageInfo

func (m *EventMultisigUpdateRequest) GetBridgeContract() string {
	if m != nil {
		return m.BridgeContract
	}
	return ""
}

func (m *EventMultisigUpdateRequest) GetBridgeChainId() string {
	if m != nil {
		return m.BridgeChainId
	}
	return ""
}

func (m *EventMultisigUpdateRequest) GetMultisigId() string {
	if m != nil {
		return m.MultisigId
	}
	return ""
}

func (m *EventMultisigUpdateRequest) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

type EventSignatureSlashing struct {
	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EventSignatureSlashing) Reset()         { *m = EventSignatureSlashing{} }
func (m *EventSignatureSlashing) String() string { return proto.CompactTextString(m) }
func (*EventSignatureSlashing) ProtoMessage()    {}
func (*EventSignatureSlashing) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{19}
}
func (m *EventSignatureSlashing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSignatureSlashing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSignatureSlashing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSignatureSlashing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSignatureSlashing.Merge(m, src)
}
func (m *EventSignatureSlashing) XXX_Size() int {
	return m.Size()
}
func (m *EventSignatureSlashing) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSignatureSlashing.DiscardUnknown(m)
}

var xxx_messageInfo_EventSignatureSlashing proto.InternalMessageInfo

func (m *EventSignatureSlashing) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventSignatureSlashing) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type EventOutgoingTxId struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	TxId    string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *EventOutgoingTxId) Reset()         { *m = EventOutgoingTxId{} }
func (m *EventOutgoingTxId) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingTxId) ProtoMessage()    {}
func (*EventOutgoingTxId) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{20}
}
func (m *EventOutgoingTxId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingTxId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingTxId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingTxId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingTxId.Merge(m, src)
}
func (m *EventOutgoingTxId) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingTxId) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingTxId.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingTxId proto.InternalMessageInfo

func (m *EventOutgoingTxId) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventOutgoingTxId) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/gravity parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params   Params             `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
	Metadata types1.MsgMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{21}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *MsgUpdateParams) GetMetadata() types1.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types1.MsgMetadata{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36e63b8bd447daaa, []int{22}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSendToEth)(nil), "palomachain.paloma.gravity.MsgSendToEth")
	proto.RegisterType((*MsgSendToEthResponse)(nil), "palomachain.paloma.gravity.MsgSendToEthResponse")
	proto.RegisterType((*MsgConfirmBatch)(nil), "palomachain.paloma.gravity.MsgConfirmBatch")
	proto.RegisterType((*MsgConfirmBatchResponse)(nil), "palomachain.paloma.gravity.MsgConfirmBatchResponse")
	proto.RegisterType((*MsgSendToPalomaClaim)(nil), "palomachain.paloma.gravity.MsgSendToPalomaClaim")
	proto.RegisterType((*MsgSendToPalomaClaimResponse)(nil), "palomachain.paloma.gravity.MsgSendToPalomaClaimResponse")
	proto.RegisterType((*MsgBatchSendToEthClaim)(nil), "palomachain.paloma.gravity.MsgBatchSendToEthClaim")
	proto.RegisterType((*MsgBatchSendToEthClaimResponse)(nil), "palomachain.paloma.gravity.MsgBatchSendToEthClaimResponse")
	proto.RegisterType((*MsgCancelSendToEth)(nil), "palomachain.paloma.gravity.MsgCancelSendToEth")
	proto.RegisterType((*MsgCancelSendToEthResponse)(nil), "palomachain.paloma.gravity.MsgCancelSendToEthResponse")
	proto.RegisterType((*MsgSubmitBadSignatureEvidence)(nil), "palomachain.paloma.gravity.MsgSubmitBadSignatureEvidence")
	proto.RegisterType((*MsgSubmitBadSignatureEvidenceResponse)(nil), "palomachain.paloma.gravity.MsgSubmitBadSignatureEvidenceResponse")
	proto.RegisterType((*EventSetOperatorAddress)(nil), "palomachain.paloma.gravity.EventSetOperatorAddress")
	proto.RegisterType((*EventBatchCreated)(nil), "palomachain.paloma.gravity.EventBatchCreated")
	proto.RegisterType((*EventBatchConfirmKey)(nil), "palomachain.paloma.gravity.EventBatchConfirmKey")
	proto.RegisterType((*EventBatchSendToEthClaim)(nil), "palomachain.paloma.gravity.EventBatchSendToEthClaim")
	proto.RegisterType((*EventClaim)(nil), "palomachain.paloma.gravity.EventClaim")
	proto.RegisterType((*EventBadSignatureEvidence)(nil), "palomachain.paloma.gravity.EventBadSignatureEvidence")
	proto.RegisterType((*EventMultisigUpdateRequest)(nil), "palomachain.paloma.gravity.EventMultisigUpdateRequest")
	proto.RegisterType((*EventSignatureSlashing)(nil), "palomachain.paloma.gravity.EventSignatureSlashing")
	proto.RegisterType((*EventOutgoingTxId)(nil), "palomachain.paloma.gravity.EventOutgoingTxId")
	proto.RegisterType((*MsgUpdateParams)(nil), "palomachain.paloma.gravity.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "palomachain.paloma.gravity.MsgUpdateParamsResponse")
}

func init() {
	proto.RegisterFile("palomachain/paloma/gravity/msgs.proto", fileDescriptor_36e63b8bd447daaa)
}

var fileDescriptor_36e63b8bd447daaa = []byte{
	// 1412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcb, 0x6f, 0x1b, 0xd5,
	0x1a, 0xcf, 0xc4, 0xce, 0xc3, 0x5f, 0xd2, 0x24, 0x9d, 0xe6, 0xa6, 0xb6, 0x95, 0x38, 0x91, 0xa5,
	0x36, 0x51, 0xef, 0xed, 0x4c, 0x9b, 0xea, 0xf6, 0xde, 0x76, 0x45, 0x1d, 0x02, 0x35, 0xc8, 0x6d,
	0x35, 0x2e, 0x1b, 0x84, 0x64, 0x1d, 0xcf, 0x9c, 0xce, 0x0c, 0xf1, 0xcc, 0x31, 0x73, 0x8e, 0xad,
	0x58, 0x6c, 0x80, 0x0d, 0x2c, 0x59, 0xb1, 0xea, 0x0a, 0xf1, 0x07, 0xb0, 0xe8, 0x92, 0x3f, 0xa0,
	0x62, 0x55, 0xb1, 0x40, 0x88, 0x45, 0x85, 0x5a, 0x21, 0xfe, 0x04, 0xb6, 0xe8, 0x3c, 0x66, 0x3c,
	0x76, 0x26, 0x76, 0x83, 0xb2, 0x60, 0x95, 0x39, 0xdf, 0xf9, 0x5e, 0xe7, 0xf7, 0x3d, 0x1d, 0xb8,
	0xd2, 0x45, 0x1d, 0x12, 0x20, 0xdb, 0x43, 0x7e, 0x68, 0xca, 0x6f, 0xd3, 0x8d, 0x50, 0xdf, 0x67,
	0x03, 0x33, 0xa0, 0x2e, 0x35, 0xba, 0x11, 0x61, 0x44, 0x2f, 0xa7, 0xd8, 0x0c, 0xf9, 0x6d, 0x28,
	0xb6, 0x72, 0xc5, 0x26, 0x34, 0x20, 0xd4, 0x6c, 0x23, 0x8a, 0xcd, 0xfe, 0xcd, 0x36, 0x66, 0xe8,
	0xa6, 0x69, 0x13, 0xce, 0xc8, 0x65, 0xcb, 0x25, 0x79, 0xdf, 0x12, 0x27, 0x53, 0x1e, 0xd4, 0xd5,
	0xd5, 0x09, 0xd6, 0xd9, 0xa0, 0x8b, 0x27, 0xf1, 0xf5, 0x51, 0x87, 0x62, 0x66, 0xda, 0x24, 0x08,
	0x48, 0x6c, 0x6a, 0xdd, 0x25, 0x2e, 0x91, 0x76, 0xf8, 0x97, 0xa2, 0x6e, 0xba, 0x84, 0xb8, 0x1d,
	0x6c, 0xa2, 0xae, 0x6f, 0xa2, 0x30, 0x24, 0x0c, 0x31, 0x9f, 0x84, 0xb1, 0xee, 0x92, 0xba, 0x15,
	0xa7, 0x76, 0xef, 0x89, 0x89, 0xc2, 0x81, 0xba, 0xba, 0xac, 0x5e, 0x16, 0x50, 0xd7, 0xec, 0xdf,
	0xe4, 0x7f, 0xd4, 0xc5, 0xee, 0x04, 0xbf, 0xbb, 0x28, 0x42, 0x81, 0x52, 0x5e, 0xfd, 0x53, 0x83,
	0xe5, 0x06, 0x75, 0x9b, 0x38, 0x74, 0x1e, 0x93, 0x43, 0xe6, 0xe9, 0x25, 0x58, 0xc4, 0xcc, 0x6b,
	0x39, 0x98, 0xb2, 0xe2, 0xec, 0x8e, 0xb6, 0x57, 0xb0, 0x16, 0x30, 0xf3, 0xde, 0xc6, 0x94, 0xe9,
	0xff, 0x83, 0x79, 0x14, 0x90, 0x5e, 0xc8, 0x8a, 0xb9, 0x1d, 0x6d, 0x6f, 0x69, 0xbf, 0x64, 0x28,
	0xac, 0x38, 0xb0, 0x86, 0x02, 0xd6, 0x38, 0x20, 0x7e, 0x58, 0xcb, 0x3f, 0x7f, 0xb9, 0x3d, 0x63,
	0x29, 0x76, 0xfd, 0x3f, 0xa0, 0x0b, 0x4f, 0x5a, 0x11, 0x7e, 0x82, 0x23, 0x1c, 0xda, 0xb8, 0xe5,
	0x3b, 0xc5, 0xbc, 0xd0, 0xbe, 0x26, 0x6e, 0xac, 0xf8, 0xa2, 0xee, 0xe8, 0xf7, 0x61, 0x31, 0xc0,
	0x0c, 0x39, 0x88, 0xa1, 0xe2, 0x9c, 0x30, 0x74, 0xd5, 0xc8, 0x88, 0xae, 0x84, 0xd7, 0x68, 0x50,
	0xb7, 0xa1, 0xb8, 0x95, 0xd5, 0x44, 0xfa, 0xee, 0x85, 0x2f, 0xfe, 0xf8, 0xfe, 0x5a, 0x72, 0x7c,
	0x2f, 0xbf, 0xa8, 0xad, 0xcd, 0x5a, 0xf3, 0x14, 0x87, 0x0e, 0x8e, 0xaa, 0x1b, 0xb0, 0x9e, 0x7e,
	0xb8, 0x85, 0x69, 0x97, 0x84, 0x14, 0x57, 0xbf, 0x9a, 0x85, 0xd5, 0x06, 0x75, 0x0f, 0x48, 0xf8,
	0xc4, 0x8f, 0x82, 0x1a, 0x62, 0xb6, 0xa7, 0xaf, 0xc3, 0x5c, 0x48, 0x42, 0x1b, 0x17, 0xb5, 0x1d,
	0x6d, 0x2f, 0x6f, 0xc9, 0x83, 0x7e, 0x05, 0x56, 0x18, 0x39, 0xc2, 0x61, 0xcb, 0x26, 0x21, 0x8b,
	0x90, 0x1d, 0x03, 0x76, 0x41, 0x50, 0x0f, 0x14, 0x51, 0xdf, 0x02, 0xe0, 0x88, 0x52, 0xdf, 0x0d,
	0x71, 0x24, 0xa0, 0x2b, 0x58, 0x05, 0xcc, 0xbc, 0xa6, 0x20, 0xe8, 0x55, 0x58, 0x26, 0x91, 0xed,
	0x61, 0xca, 0x22, 0xc4, 0x48, 0xa4, 0x60, 0x19, 0xa1, 0xe9, 0x9b, 0x50, 0xe0, 0xe2, 0x88, 0xf5,
	0x22, 0x2c, 0x30, 0x29, 0x58, 0x43, 0xc2, 0x08, 0x60, 0xf3, 0xe7, 0x08, 0x58, 0xb5, 0x04, 0x97,
	0xc7, 0x90, 0x48, 0x50, 0xfa, 0x21, 0x97, 0x82, 0xef, 0x91, 0x30, 0x70, 0xd0, 0x41, 0x7e, 0xa0,
	0x6f, 0xc3, 0x12, 0xee, 0xe3, 0x90, 0xb5, 0xd2, 0x80, 0x81, 0x20, 0x3d, 0x10, 0xa8, 0xed, 0xc1,
	0x1a, 0x87, 0xa3, 0xdd, 0x21, 0xf6, 0x51, 0xcb, 0xc3, 0xbe, 0xeb, 0x49, 0xdc, 0xf2, 0xd6, 0x0a,
	0x66, 0x5e, 0x8d, 0x93, 0xef, 0x0b, 0x6a, 0x06, 0xbe, 0xb9, 0x2c, 0x7c, 0xff, 0x9b, 0xa4, 0xa5,
	0x80, 0xae, 0xb6, 0xc5, 0x1f, 0xf5, 0xeb, 0xcb, 0xed, 0x7f, 0xc9, 0xec, 0xa4, 0xce, 0x91, 0xe1,
	0x13, 0x33, 0x40, 0xcc, 0x33, 0xea, 0x21, 0x4b, 0x92, 0x72, 0x17, 0x56, 0x31, 0xf3, 0x70, 0x84,
	0x7b, 0x41, 0x4b, 0xa6, 0x84, 0x42, 0x76, 0x25, 0x26, 0x37, 0x05, 0x95, 0x33, 0x4a, 0x04, 0x5b,
	0x11, 0xb6, 0xb1, 0xdf, 0xc7, 0x91, 0x40, 0xb9, 0x60, 0xad, 0x48, 0xb2, 0xa5, 0xa8, 0x27, 0x22,
	0xb9, 0x90, 0x11, 0xc9, 0xec, 0x52, 0x58, 0x7c, 0x83, 0x52, 0x28, 0x9c, 0x67, 0x64, 0x2b, 0xb0,
	0x99, 0x15, 0xbd, 0x24, 0xbc, 0x3f, 0xcf, 0xc2, 0x46, 0x83, 0xba, 0x22, 0xe6, 0x49, 0x89, 0x9c,
	0x7b, 0x80, 0xb7, 0x61, 0xa9, 0xcd, 0x2d, 0x28, 0x55, 0x39, 0xa9, 0x4a, 0x90, 0x1e, 0x9c, 0x52,
	0x61, 0xf9, 0xac, 0x0c, 0xc8, 0x06, 0x75, 0xee, 0x14, 0x50, 0xc7, 0xc3, 0x34, 0x9f, 0x11, 0xa6,
	0x34, 0xf0, 0x0b, 0xe7, 0x09, 0xfc, 0x0e, 0x54, 0xb2, 0x71, 0x4d, 0xa0, 0xff, 0x56, 0x03, 0x9d,
	0x57, 0x1d, 0x0a, 0x6d, 0xdc, 0x19, 0xf6, 0x65, 0x0e, 0x45, 0x84, 0x42, 0x8a, 0x6c, 0x3e, 0x1b,
	0xf8, 0xfb, 0x24, 0xf2, 0x17, 0x52, 0xd4, 0xb1, 0x8c, 0xc9, 0x9d, 0x6f, 0xf3, 0x9c, 0x5d, 0xcb,
	0x25, 0xcd, 0x73, 0x13, 0xca, 0x27, 0x7d, 0x4c, 0x9e, 0xf0, 0xcd, 0x2c, 0x6c, 0xf1, 0xf4, 0xea,
	0xb5, 0x03, 0x9f, 0xd5, 0x90, 0xd3, 0x8c, 0x5b, 0xd5, 0x61, 0xdf, 0x77, 0x78, 0x14, 0xf4, 0x1a,
	0x2c, 0xd0, 0x5e, 0xfb, 0x63, 0x6c, 0x33, 0xf1, 0x8c, 0xa5, 0xfd, 0x75, 0x43, 0x4e, 0x39, 0x23,
	0x9e, 0x72, 0xc6, 0xbd, 0x70, 0x50, 0xd3, 0x7f, 0x7c, 0x76, 0x7d, 0xe5, 0x30, 0x2e, 0x47, 0xde,
	0x2f, 0x1d, 0x2b, 0x16, 0x1c, 0x6d, 0x8a, 0xb3, 0xe3, 0x4d, 0xf1, 0x1f, 0x33, 0x73, 0x72, 0x6b,
	0xf9, 0x04, 0xb6, 0x5d, 0xb8, 0x32, 0x11, 0x97, 0x04, 0xc1, 0x06, 0x5c, 0x3e, 0xe4, 0x15, 0xd5,
	0xc4, 0xec, 0x61, 0x17, 0x8b, 0x9c, 0xbc, 0xe7, 0x38, 0x11, 0xa6, 0x54, 0x2f, 0xc2, 0x42, 0x80,
	0x29, 0x45, 0xae, 0xac, 0xbd, 0x82, 0x15, 0x1f, 0xf9, 0x0d, 0x92, 0x4c, 0xf1, 0xe4, 0x56, 0xc7,
	0xea, 0x03, 0xb8, 0x28, 0xd4, 0x89, 0xbc, 0x3b, 0x88, 0x30, 0x62, 0xd8, 0x99, 0xa0, 0x68, 0xac,
	0x2e, 0xa5, 0xb2, 0x54, 0x5d, 0x56, 0x3f, 0x82, 0xf5, 0x94, 0x3e, 0x39, 0x1f, 0xde, 0xc7, 0x83,
	0x09, 0x2a, 0xaf, 0xc1, 0x45, 0xa9, 0xd2, 0x96, 0xdc, 0xad, 0x23, 0x3c, 0x50, 0x8a, 0x57, 0xdb,
	0xa3, 0x5a, 0xaa, 0x37, 0xa0, 0x38, 0xd4, 0x3e, 0xd6, 0x7d, 0x46, 0x26, 0x71, 0x41, 0x4d, 0xe2,
	0x6a, 0x07, 0x40, 0x48, 0x48, 0x9e, 0xd3, 0xbd, 0xd8, 0x02, 0xb0, 0x39, 0x4b, 0xcb, 0x43, 0xd4,
	0x8b, 0x73, 0x46, 0x50, 0xee, 0x23, 0x2a, 0x6a, 0x0c, 0x31, 0x86, 0xa9, 0xdc, 0xbf, 0x78, 0xbe,
	0xa8, 0x81, 0x93, 0xa2, 0xd6, 0x9d, 0xea, 0x53, 0x0d, 0x4a, 0xca, 0xc1, 0x8c, 0xd4, 0x9e, 0x82,
	0x81, 0xd3, 0x8a, 0x97, 0x81, 0x74, 0xe2, 0xae, 0xb6, 0x91, 0x73, 0x28, 0x57, 0x02, 0x99, 0xbe,
	0x77, 0xa0, 0x74, 0x82, 0xb7, 0x15, 0x97, 0x8c, 0xf4, 0x6a, 0x63, 0x4c, 0xa6, 0x29, 0x6f, 0xab,
	0xdf, 0x69, 0x50, 0x16, 0xee, 0x35, 0x7a, 0x1d, 0xe6, 0x53, 0xdf, 0xfd, 0xa0, 0xeb, 0x20, 0x86,
	0x2d, 0xfc, 0x49, 0x8f, 0x6f, 0x71, 0xbb, 0xb0, 0xda, 0x8e, 0x7c, 0xc7, 0xc5, 0xc3, 0xa6, 0x2a,
	0xfd, 0x5c, 0x91, 0xe4, 0xa4, 0xab, 0x5e, 0x1d, 0x32, 0x8a, 0x42, 0xf2, 0x9d, 0x78, 0xbf, 0x51,
	0x8c, 0x9c, 0x5a, 0x77, 0x78, 0xb6, 0x04, 0xca, 0xd2, 0x10, 0x32, 0x88, 0x49, 0x75, 0x67, 0x18,
	0xb3, 0x7c, 0x3a, 0x66, 0xef, 0xc0, 0x86, 0x4c, 0xf1, 0xc4, 0xff, 0x0e, 0xa2, 0x9e, 0x1f, 0xba,
	0xba, 0x0e, 0x79, 0xbe, 0x5b, 0x2b, 0xb7, 0xc4, 0xf7, 0x84, 0xdc, 0xae, 0xa9, 0xdc, 0x7e, 0xd8,
	0x63, 0x2e, 0xf1, 0x43, 0xf7, 0xf1, 0x71, 0x7d, 0x52, 0x6e, 0x5f, 0x82, 0x39, 0x76, 0x3c, 0x7c,
	0x4b, 0x9e, 0x1d, 0xd7, 0x9d, 0xea, 0xef, 0x9a, 0xd8, 0xf9, 0x24, 0x50, 0x8f, 0xc4, 0x7e, 0xac,
	0xdf, 0x86, 0x02, 0xea, 0x31, 0x8f, 0x44, 0x3e, 0x1b, 0x48, 0x25, 0xb5, 0xe2, 0x4f, 0xcf, 0xae,
	0xaf, 0xab, 0x9d, 0x57, 0x95, 0x63, 0x93, 0x45, 0x7e, 0xe8, 0x5a, 0x43, 0x56, 0xfd, 0x2d, 0x98,
	0x97, 0x1b, 0xb6, 0xb0, 0xb0, 0xb4, 0x5f, 0x35, 0x4e, 0xff, 0x69, 0x62, 0x48, 0x5b, 0xf1, 0xba,
	0x2c, 0xe5, 0xce, 0xb1, 0x87, 0xaf, 0xf0, 0x66, 0x34, 0xf4, 0x4d, 0x2d, 0x74, 0xe9, 0x67, 0xc6,
	0x1d, 0x67, 0xff, 0xb3, 0x05, 0xc8, 0x35, 0xa8, 0xab, 0xfb, 0x50, 0x18, 0x0e, 0x9d, 0xbd, 0x49,
	0xbe, 0xa7, 0xb7, 0xe7, 0xf2, 0x8d, 0x37, 0xe5, 0x4c, 0x5a, 0xdc, 0x8c, 0x1e, 0xc1, 0xf2, 0xc8,
	0x96, 0xfd, 0xef, 0x29, 0x3a, 0xd2, 0xcc, 0xe5, 0x5b, 0x67, 0x60, 0x4e, 0xd9, 0xfc, 0x5c, 0x83,
	0x8b, 0x27, 0x97, 0xd6, 0x37, 0xf3, 0x3e, 0x25, 0x51, 0xfe, 0xff, 0x59, 0x25, 0x52, 0x3e, 0x7c,
	0xa9, 0xc1, 0xa5, 0xac, 0xde, 0xb6, 0x3f, 0x45, 0x67, 0x86, 0x4c, 0xf9, 0xee, 0xd9, 0x65, 0x52,
	0x9e, 0x7c, 0x0a, 0xab, 0xe3, 0x7b, 0x86, 0x31, 0x0d, 0xd7, 0x51, 0xfe, 0xf2, 0xed, 0xb3, 0xf1,
	0xa7, 0x8c, 0x3f, 0xd5, 0xa0, 0x3c, 0x61, 0x45, 0xb8, 0x33, 0x0d, 0xe1, 0x53, 0x45, 0xcb, 0xf7,
	0xfe, 0xb6, 0x68, 0xca, 0xbd, 0x2e, 0x2c, 0x8f, 0xf4, 0x83, 0x69, 0xd9, 0x99, 0x66, 0x9e, 0x9a,
	0x9d, 0x59, 0x25, 0x58, 0x7b, 0xf7, 0xf9, 0xab, 0x8a, 0xf6, 0xe2, 0x55, 0x45, 0xfb, 0xed, 0x55,
	0x45, 0xfb, 0xfa, 0x75, 0x65, 0xe6, 0xc5, 0xeb, 0xca, 0xcc, 0x2f, 0xaf, 0x2b, 0x33, 0x1f, 0x5e,
	0x77, 0x7d, 0xe6, 0xf5, 0xda, 0x86, 0x4d, 0x02, 0x33, 0xe3, 0x97, 0xfd, 0xf1, 0xe8, 0xff, 0x24,
	0xda, 0xf3, 0x62, 0x89, 0xba, 0xf5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x9a, 0x18, 0x72,
	0x3c, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendToEth(ctx context.Context, in *MsgSendToEth, opts ...grpc.CallOption) (*MsgSendToEthResponse, error)
	ConfirmBatch(ctx context.Context, in *MsgConfirmBatch, opts ...grpc.CallOption) (*MsgConfirmBatchResponse, error)
	SendToPalomaClaim(ctx context.Context, in *MsgSendToPalomaClaim, opts ...grpc.CallOption) (*MsgSendToPalomaClaimResponse, error)
	BatchSendToEthClaim(ctx context.Context, in *MsgBatchSendToEthClaim, opts ...grpc.CallOption) (*MsgBatchSendToEthClaimResponse, error)
	CancelSendToEth(ctx context.Context, in *MsgCancelSendToEth, opts ...grpc.CallOption) (*MsgCancelSendToEthResponse, error)
	SubmitBadSignatureEvidence(ctx context.Context, in *MsgSubmitBadSignatureEvidence, opts ...grpc.CallOption) (*MsgSubmitBadSignatureEvidenceResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendToEth(ctx context.Context, in *MsgSendToEth, opts ...grpc.CallOption) (*MsgSendToEthResponse, error) {
	out := new(MsgSendToEthResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.gravity.Msg/SendToEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmBatch(ctx context.Context, in *MsgConfirmBatch, opts ...grpc.CallOption) (*MsgConfirmBatchResponse, error) {
	out := new(MsgConfirmBatchResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.gravity.Msg/ConfirmBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToPalomaClaim(ctx context.Context, in *MsgSendToPalomaClaim, opts ...grpc.CallOption) (*MsgSendToPalomaClaimResponse, error) {
	out := new(MsgSendToPalomaClaimResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.gravity.Msg/SendToPalomaClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BatchSendToEthClaim(ctx context.Context, in *MsgBatchSendToEthClaim, opts ...grpc.CallOption) (*MsgBatchSendToEthClaimResponse, error) {
	out := new(MsgBatchSendToEthClaimResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.gravity.Msg/BatchSendToEthClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSendToEth(ctx context.Context, in *MsgCancelSendToEth, opts ...grpc.CallOption) (*MsgCancelSendToEthResponse, error) {
	out := new(MsgCancelSendToEthResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.gravity.Msg/CancelSendToEth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitBadSignatureEvidence(ctx context.Context, in *MsgSubmitBadSignatureEvidence, opts ...grpc.CallOption) (*MsgSubmitBadSignatureEvidenceResponse, error) {
	out := new(MsgSubmitBadSignatureEvidenceResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.gravity.Msg/SubmitBadSignatureEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.gravity.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendToEth(context.Context, *MsgSendToEth) (*MsgSendToEthResponse, error)
	ConfirmBatch(context.Context, *MsgConfirmBatch) (*MsgConfirmBatchResponse, error)
	SendToPalomaClaim(context.Context, *MsgSendToPalomaClaim) (*MsgSendToPalomaClaimResponse, error)
	BatchSendToEthClaim(context.Context, *MsgBatchSendToEthClaim) (*MsgBatchSendToEthClaimResponse, error)
	CancelSendToEth(context.Context, *MsgCancelSendToEth) (*MsgCancelSendToEthResponse, error)
	SubmitBadSignatureEvidence(context.Context, *MsgSubmitBadSignatureEvidence) (*MsgSubmitBadSignatureEvidenceResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendToEth(ctx context.Context, req *MsgSendToEth) (*MsgSendToEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToEth not implemented")
}
func (*UnimplementedMsgServer) ConfirmBatch(ctx context.Context, req *MsgConfirmBatch) (*MsgConfirmBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBatch not implemented")
}
func (*UnimplementedMsgServer) SendToPalomaClaim(ctx context.Context, req *MsgSendToPalomaClaim) (*MsgSendToPalomaClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToPalomaClaim not implemented")
}
func (*UnimplementedMsgServer) BatchSendToEthClaim(ctx context.Context, req *MsgBatchSendToEthClaim) (*MsgBatchSendToEthClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSendToEthClaim not implemented")
}
func (*UnimplementedMsgServer) CancelSendToEth(ctx context.Context, req *MsgCancelSendToEth) (*MsgCancelSendToEthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendToEth not implemented")
}
func (*UnimplementedMsgServer) SubmitBadSignatureEvidence(ctx context.Context, req *MsgSubmitBadSignatureEvidence) (*MsgSubmitBadSignatureEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBadSignatureEvidence not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.gravity.Msg/SendToEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToEth(ctx, req.(*MsgSendToEth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.gravity.Msg/ConfirmBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmBatch(ctx, req.(*MsgConfirmBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToPalomaClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToPalomaClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToPalomaClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.gravity.Msg/SendToPalomaClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToPalomaClaim(ctx, req.(*MsgSendToPalomaClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BatchSendToEthClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBatchSendToEthClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BatchSendToEthClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.gravity.Msg/BatchSendToEthClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BatchSendToEthClaim(ctx, req.(*MsgBatchSendToEthClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSendToEth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSendToEth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSendToEth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.gravity.Msg/CancelSendToEth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSendToEth(ctx, req.(*MsgCancelSendToEth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitBadSignatureEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBadSignatureEvidence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBadSignatureEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.gravity.Msg/SubmitBadSignatureEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBadSignatureEvidence(ctx, req.(*MsgSubmitBadSignatureEvidence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.gravity.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "palomachain.paloma.gravity.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToEth",
			Handler:    _Msg_SendToEth_Handler,
		},
		{
			MethodName: "ConfirmBatch",
			Handler:    _Msg_ConfirmBatch_Handler,
		},
		{
			MethodName: "SendToPalomaClaim",
			Handler:    _Msg_SendToPalomaClaim_Handler,
		},
		{
			MethodName: "BatchSendToEthClaim",
			Handler:    _Msg_BatchSendToEthClaim_Handler,
		},
		{
			MethodName: "CancelSendToEth",
			Handler:    _Msg_CancelSendToEth_Handler,
		},
		{
			MethodName: "SubmitBadSignatureEvidence",
			Handler:    _Msg_SubmitBadSignatureEvidence_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "palomachain/paloma/gravity/msgs.proto",
}

func (m *MsgSendToEth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EthDest) > 0 {
		i -= len(m.EthDest)
		copy(dAtA[i:], m.EthDest)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthDest)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToEthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendToPalomaClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToPalomaClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToPalomaClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PalomaReceiver) > 0 {
		i -= len(m.PalomaReceiver)
		copy(dAtA[i:], m.PalomaReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.PalomaReceiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthereumSender) > 0 {
		i -= len(m.EthereumSender)
		copy(dAtA[i:], m.EthereumSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthereumSender)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToPalomaClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToPalomaClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToPalomaClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBatchSendToEthClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchSendToEthClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchSendToEthClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x22
	}
	if m.BatchNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x18
	}
	if m.EthBlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EthBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBatchSendToEthClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchSendToEthClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchSendToEthClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToEth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToEth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToEth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TransactionId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToEthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToEthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToEthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBadSignatureEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBadSignatureEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBadSignatureEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Subject != nil {
		{
			size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBadSignatureEvidenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBadSignatureEvidenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBadSignatureEvidenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventSetOperatorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetOperatorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetOperatorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBatchCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchNonce) > 0 {
		i -= len(m.BatchNonce)
		copy(dAtA[i:], m.BatchNonce)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BatchNonce)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBatchConfirmKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchConfirmKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchConfirmKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchConfirmKey) > 0 {
		i -= len(m.BatchConfirmKey)
		copy(dAtA[i:], m.BatchConfirmKey)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BatchConfirmKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBatchSendToEthClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBatchSendToEthClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBatchSendToEthClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBadSignatureEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBadSignatureEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBadSignatureEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BadEthSignatureSubject) > 0 {
		i -= len(m.BadEthSignatureSubject)
		copy(dAtA[i:], m.BadEthSignatureSubject)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BadEthSignatureSubject)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BadEthSignature) > 0 {
		i -= len(m.BadEthSignature)
		copy(dAtA[i:], m.BadEthSignature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BadEthSignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMultisigUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMultisigUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMultisigUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MultisigId) > 0 {
		i -= len(m.MultisigId)
		copy(dAtA[i:], m.MultisigId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.MultisigId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgeChainId) > 0 {
		i -= len(m.BridgeChainId)
		copy(dAtA[i:], m.BridgeChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BridgeChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BridgeContract) > 0 {
		i -= len(m.BridgeContract)
		copy(dAtA[i:], m.BridgeContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.BridgeContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSignatureSlashing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSignatureSlashing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSignatureSlashing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingTxId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingTxId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingTxId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendToEth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthDest)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSendToEthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgConfirmBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendToPalomaClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EthBlockHeight))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.EthereumSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.PalomaReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSendToPalomaClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBatchSendToEthClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EthBlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EthBlockHeight))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovMsgs(uint64(m.BatchNonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgBatchSendToEthClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelSendToEth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionId != 0 {
		n += 1 + sovMsgs(uint64(m.TransactionId))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgCancelSendToEthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitBadSignatureEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgSubmitBadSignatureEvidenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventSetOperatorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventBatchCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BatchNonce)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventBatchConfirmKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BatchConfirmKey)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventBatchSendToEthClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventBadSignatureEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BadEthSignature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BadEthSignatureSubject)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventMultisigUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BridgeContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.BridgeChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.MultisigId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventSignatureSlashing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *EventOutgoingTxId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = m.Metadata.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendToEth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthDest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthDest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToEthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToPalomaClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToPalomaClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToPalomaClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PalomaReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PalomaReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToPalomaClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToPalomaClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToPalomaClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchSendToEthClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchSendToEthClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchSendToEthClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthBlockHeight", wireType)
			}
			m.EthBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchSendToEthClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchSendToEthClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchSendToEthClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToEth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToEth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToEth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToEthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToEthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToEthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBadSignatureEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBadSignatureEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBadSignatureEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &types2.Any{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBadSignatureEvidenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBadSignatureEvidenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBadSignatureEvidenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetOperatorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetOperatorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetOperatorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBatchCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchNonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBatchConfirmKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchConfirmKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchConfirmKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchConfirmKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchConfirmKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBatchSendToEthClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBatchSendToEthClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBatchSendToEthClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBadSignatureEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBadSignatureEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBadSignatureEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadEthSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadEthSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadEthSignatureSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadEthSignatureSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMultisigUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMultisigUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMultisigUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultisigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSignatureSlashing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSignatureSlashing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSignatureSlashing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutgoingTxId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingTxId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingTxId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
