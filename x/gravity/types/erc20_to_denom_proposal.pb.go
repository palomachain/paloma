// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/gravity/erc20_to_denom_proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SetERC20ToDenomProposal struct {
	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ChainReferenceId string `protobuf:"bytes,3,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
	Erc20            string `protobuf:"bytes,4,opt,name=erc20,proto3" json:"erc20,omitempty"`
	Denom            string `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *SetERC20ToDenomProposal) Reset()         { *m = SetERC20ToDenomProposal{} }
func (m *SetERC20ToDenomProposal) String() string { return proto.CompactTextString(m) }
func (*SetERC20ToDenomProposal) ProtoMessage()    {}
func (*SetERC20ToDenomProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_aedb9a8b0e7c953e, []int{0}
}
func (m *SetERC20ToDenomProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetERC20ToDenomProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetERC20ToDenomProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetERC20ToDenomProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetERC20ToDenomProposal.Merge(m, src)
}
func (m *SetERC20ToDenomProposal) XXX_Size() int {
	return m.Size()
}
func (m *SetERC20ToDenomProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SetERC20ToDenomProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SetERC20ToDenomProposal proto.InternalMessageInfo

func (m *SetERC20ToDenomProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SetERC20ToDenomProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SetERC20ToDenomProposal) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func (m *SetERC20ToDenomProposal) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

func (m *SetERC20ToDenomProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*SetERC20ToDenomProposal)(nil), "palomachain.paloma.gravity.SetERC20ToDenomProposal")
}

func init() {
	proto.RegisterFile("palomachain/paloma/gravity/erc20_to_denom_proposal.proto", fileDescriptor_aedb9a8b0e7c953e)
}

var fileDescriptor_aedb9a8b0e7c953e = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x28, 0x48, 0xcc, 0xc9,
	0xcf, 0x4d, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x87, 0xb0, 0xf5, 0xd3, 0x8b, 0x12, 0xcb, 0x32,
	0x4b, 0x2a, 0xf5, 0x53, 0x8b, 0x92, 0x8d, 0x0c, 0xe2, 0x4b, 0xf2, 0xe3, 0x53, 0x52, 0xf3, 0xf2,
	0x73, 0xe3, 0x0b, 0x8a, 0xf2, 0x0b, 0xf2, 0x8b, 0x13, 0x73, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0xa4, 0x90, 0x74, 0xea, 0x41, 0xd8, 0x7a, 0x50, 0x9d, 0x52, 0x92, 0xc9, 0xf9, 0xc5, 0xb9,
	0xf9, 0xc5, 0xf1, 0x60, 0x95, 0xfa, 0x10, 0x0e, 0x44, 0x9b, 0xd2, 0x6a, 0x46, 0x2e, 0xf1, 0xe0,
	0xd4, 0x12, 0xd7, 0x20, 0x67, 0x23, 0x83, 0x90, 0x7c, 0x17, 0x90, 0xc9, 0x01, 0x50, 0x83, 0x85,
	0x44, 0xb8, 0x58, 0x4b, 0x32, 0x4b, 0x72, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20,
	0x1c, 0x21, 0x05, 0x2e, 0xee, 0x94, 0xd4, 0xe2, 0xe4, 0xa2, 0xcc, 0x82, 0x92, 0xcc, 0xfc, 0x3c,
	0x09, 0x26, 0xb0, 0x1c, 0xb2, 0x90, 0x90, 0x0e, 0x97, 0x10, 0xd8, 0x19, 0xf1, 0x45, 0xa9, 0x69,
	0xa9, 0x45, 0xa9, 0x79, 0xc9, 0xa9, 0xf1, 0x99, 0x29, 0x12, 0xcc, 0x60, 0x85, 0x02, 0x60, 0x99,
	0x20, 0x98, 0x84, 0x67, 0x0a, 0xc8, 0x16, 0xb0, 0xcf, 0x24, 0x58, 0x20, 0xb6, 0x80, 0x39, 0x20,
	0x51, 0xb0, 0x37, 0x25, 0x58, 0x21, 0xa2, 0x60, 0x8e, 0x93, 0xfb, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c,
	0x37, 0x1e, 0xcb, 0x31, 0x44, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7,
	0xea, 0x63, 0x09, 0xc3, 0x0a, 0x78, 0x28, 0x96, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x7d,
	0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x43, 0x93, 0x38, 0x70, 0x01, 0x00, 0x00,
}

func (m *SetERC20ToDenomProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetERC20ToDenomProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetERC20ToDenomProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintErc20ToDenomProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintErc20ToDenomProposal(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintErc20ToDenomProposal(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintErc20ToDenomProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintErc20ToDenomProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintErc20ToDenomProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovErc20ToDenomProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetERC20ToDenomProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovErc20ToDenomProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovErc20ToDenomProposal(uint64(l))
	}
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovErc20ToDenomProposal(uint64(l))
	}
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovErc20ToDenomProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovErc20ToDenomProposal(uint64(l))
	}
	return n
}

func sovErc20ToDenomProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErc20ToDenomProposal(x uint64) (n int) {
	return sovErc20ToDenomProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetERC20ToDenomProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErc20ToDenomProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetERC20ToDenomProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetERC20ToDenomProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20ToDenomProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20ToDenomProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20ToDenomProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20ToDenomProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20ToDenomProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErc20ToDenomProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErc20ToDenomProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErc20ToDenomProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErc20ToDenomProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErc20ToDenomProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErc20ToDenomProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErc20ToDenomProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErc20ToDenomProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErc20ToDenomProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErc20ToDenomProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErc20ToDenomProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErc20ToDenomProposal = fmt.Errorf("proto: unexpected end of group")
)
