// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/gravity/bridge_transfer_limit.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LimitPeriod int32

const (
	LimitPeriod_LIMIT_PERIOD_UNSPECIFIED LimitPeriod = 0
	LimitPeriod_LIMIT_PERIOD_DAILY       LimitPeriod = 1
	LimitPeriod_LIMIT_PERIOD_WEEKLY      LimitPeriod = 2
	LimitPeriod_LIMIT_PERIOD_MONTHLY     LimitPeriod = 3
	LimitPeriod_LIMIT_PERIOD_YEARLY      LimitPeriod = 4
)

var LimitPeriod_name = map[int32]string{
	0: "LIMIT_PERIOD_UNSPECIFIED",
	1: "LIMIT_PERIOD_DAILY",
	2: "LIMIT_PERIOD_WEEKLY",
	3: "LIMIT_PERIOD_MONTHLY",
	4: "LIMIT_PERIOD_YEARLY",
}

var LimitPeriod_value = map[string]int32{
	"LIMIT_PERIOD_UNSPECIFIED": 0,
	"LIMIT_PERIOD_DAILY":       1,
	"LIMIT_PERIOD_WEEKLY":      2,
	"LIMIT_PERIOD_MONTHLY":     3,
	"LIMIT_PERIOD_YEARLY":      4,
}

func (x LimitPeriod) String() string {
	return proto.EnumName(LimitPeriod_name, int32(x))
}

func (LimitPeriod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0208292bfcbb8f34, []int{0}
}

type BridgeTransferLimit struct {
	Token           string                                          `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Limit           cosmossdk_io_math.Int                           `protobuf:"bytes,2,opt,name=limit,proto3,customtype=cosmossdk.io/math.Int" json:"limit"`
	LimitPeriod     LimitPeriod                                     `protobuf:"varint,3,opt,name=limit_period,json=limitPeriod,proto3,enum=palomachain.paloma.gravity.LimitPeriod" json:"limit_period,omitempty"`
	ExemptAddresses []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,rep,name=exempt_addresses,json=exemptAddresses,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"exempt_addresses,omitempty"`
}

func (m *BridgeTransferLimit) Reset()         { *m = BridgeTransferLimit{} }
func (m *BridgeTransferLimit) String() string { return proto.CompactTextString(m) }
func (*BridgeTransferLimit) ProtoMessage()    {}
func (*BridgeTransferLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0208292bfcbb8f34, []int{0}
}
func (m *BridgeTransferLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeTransferLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeTransferLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeTransferLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeTransferLimit.Merge(m, src)
}
func (m *BridgeTransferLimit) XXX_Size() int {
	return m.Size()
}
func (m *BridgeTransferLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeTransferLimit.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeTransferLimit proto.InternalMessageInfo

func (m *BridgeTransferLimit) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BridgeTransferLimit) GetLimitPeriod() LimitPeriod {
	if m != nil {
		return m.LimitPeriod
	}
	return LimitPeriod_LIMIT_PERIOD_UNSPECIFIED
}

func (m *BridgeTransferLimit) GetExemptAddresses() []github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ExemptAddresses
	}
	return nil
}

type BridgeTransferUsage struct {
	Usage            cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=usage,proto3,customtype=cosmossdk.io/math.Int" json:"usage"`
	SinceBlockHeight int64                 `protobuf:"varint,2,opt,name=since_block_height,json=sinceBlockHeight,proto3" json:"since_block_height,omitempty"`
}

func (m *BridgeTransferUsage) Reset()         { *m = BridgeTransferUsage{} }
func (m *BridgeTransferUsage) String() string { return proto.CompactTextString(m) }
func (*BridgeTransferUsage) ProtoMessage()    {}
func (*BridgeTransferUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0208292bfcbb8f34, []int{1}
}
func (m *BridgeTransferUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeTransferUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeTransferUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeTransferUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeTransferUsage.Merge(m, src)
}
func (m *BridgeTransferUsage) XXX_Size() int {
	return m.Size()
}
func (m *BridgeTransferUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeTransferUsage.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeTransferUsage proto.InternalMessageInfo

func (m *BridgeTransferUsage) GetSinceBlockHeight() int64 {
	if m != nil {
		return m.SinceBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterEnum("palomachain.paloma.gravity.LimitPeriod", LimitPeriod_name, LimitPeriod_value)
	proto.RegisterType((*BridgeTransferLimit)(nil), "palomachain.paloma.gravity.BridgeTransferLimit")
	proto.RegisterType((*BridgeTransferUsage)(nil), "palomachain.paloma.gravity.BridgeTransferUsage")
}

func init() {
	proto.RegisterFile("palomachain/paloma/gravity/bridge_transfer_limit.proto", fileDescriptor_0208292bfcbb8f34)
}

var fileDescriptor_0208292bfcbb8f34 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xb5, 0x93, 0x16, 0x89, 0x6d, 0x05, 0xd6, 0x36, 0x80, 0x55, 0x81, 0x13, 0xf5, 0x42, 0x84,
	0xe8, 0x5a, 0x50, 0x89, 0xbb, 0x4d, 0x0c, 0x35, 0xb8, 0x6d, 0x64, 0x52, 0x21, 0x23, 0x24, 0xcb,
	0xb1, 0x17, 0x7b, 0x15, 0xdb, 0x6b, 0x79, 0xb7, 0x28, 0xfd, 0x0b, 0x5c, 0xe0, 0x67, 0xf5, 0x98,
	0x23, 0xe2, 0x10, 0xa1, 0xe4, 0x5f, 0x70, 0x42, 0xde, 0x0d, 0x90, 0xf0, 0x21, 0x4e, 0x7e, 0x3b,
	0xf3, 0xde, 0xf3, 0xcc, 0xd3, 0x80, 0x27, 0x55, 0x94, 0xd3, 0x22, 0x8a, 0xb3, 0x88, 0x94, 0xa6,
	0xc4, 0x66, 0x5a, 0x47, 0xef, 0x09, 0xbf, 0x34, 0xc7, 0x35, 0x49, 0x52, 0x1c, 0xf2, 0x3a, 0x2a,
	0xd9, 0x3b, 0x5c, 0x87, 0x39, 0x29, 0x08, 0x47, 0x55, 0x4d, 0x39, 0x85, 0xfb, 0x6b, 0x3a, 0x24,
	0x31, 0x5a, 0xe9, 0xf6, 0x3b, 0x29, 0x4d, 0xa9, 0xa0, 0x99, 0x0d, 0x92, 0x8a, 0x83, 0x0f, 0x2d,
	0xb0, 0x67, 0x0b, 0xc7, 0xd1, 0xca, 0xd0, 0x6b, 0xfc, 0x60, 0x07, 0x6c, 0x73, 0x3a, 0xc1, 0xa5,
	0xae, 0xf6, 0xd4, 0xfe, 0x75, 0x5f, 0x3e, 0xe0, 0x11, 0xd8, 0x16, 0xbf, 0xd3, 0x5b, 0x4d, 0xd5,
	0xbe, 0x77, 0x35, 0xef, 0x2a, 0x5f, 0xe6, 0xdd, 0x5b, 0x31, 0x65, 0x05, 0x65, 0x2c, 0x99, 0x20,
	0x42, 0xcd, 0x22, 0xe2, 0x19, 0x72, 0x4b, 0xee, 0x4b, 0x2e, 0x7c, 0x01, 0x76, 0x05, 0x08, 0x2b,
	0x5c, 0x13, 0x9a, 0xe8, 0xed, 0x9e, 0xda, 0xbf, 0xf1, 0xf8, 0x3e, 0xfa, 0xf7, 0xac, 0x48, 0xcc,
	0x30, 0x14, 0x74, 0x7f, 0x27, 0xff, 0xf5, 0x80, 0x6f, 0x81, 0x86, 0xa7, 0xb8, 0xa8, 0x78, 0x18,
	0x25, 0x49, 0x8d, 0x19, 0xc3, 0x4c, 0xdf, 0xea, 0xb5, 0xfb, 0xbb, 0xf6, 0xa3, 0x6f, 0xf3, 0xee,
	0x61, 0x4a, 0x78, 0x76, 0x31, 0x46, 0x31, 0x2d, 0x4c, 0x39, 0xd2, 0xea, 0x73, 0xc8, 0x92, 0x89,
	0xc9, 0x2f, 0x2b, 0xcc, 0x90, 0x15, 0xc7, 0x96, 0x94, 0xfa, 0x37, 0xa5, 0x95, 0xf5, 0xc3, 0xe9,
	0x60, 0xfa, 0x7b, 0x16, 0xe7, 0x2c, 0x4a, 0x71, 0xb3, 0xf5, 0x45, 0x03, 0x64, 0x16, 0xff, 0xdd,
	0x5a, 0x70, 0xe1, 0x43, 0x00, 0x19, 0x29, 0x63, 0x1c, 0x8e, 0x73, 0x1a, 0x4f, 0xc2, 0x0c, 0x93,
	0x34, 0x93, 0xb9, 0xb5, 0x7d, 0x4d, 0x74, 0xec, 0xa6, 0x71, 0x2c, 0xea, 0x0f, 0x3e, 0xaa, 0x60,
	0x67, 0x6d, 0x69, 0x78, 0x17, 0xe8, 0x9e, 0x7b, 0xe2, 0x8e, 0xc2, 0xa1, 0xe3, 0xbb, 0x67, 0x83,
	0xf0, 0xfc, 0xf4, 0xd5, 0xd0, 0x79, 0xea, 0x3e, 0x73, 0x9d, 0x81, 0xa6, 0xc0, 0xdb, 0x00, 0x6e,
	0x74, 0x07, 0x96, 0xeb, 0x05, 0x9a, 0x0a, 0xef, 0x80, 0xbd, 0x8d, 0xfa, 0x6b, 0xc7, 0x79, 0xe9,
	0x05, 0x5a, 0x0b, 0xea, 0xa0, 0xb3, 0xd1, 0x38, 0x39, 0x3b, 0x1d, 0x1d, 0x7b, 0x81, 0xd6, 0xfe,
	0x43, 0x12, 0x38, 0x96, 0xef, 0x05, 0xda, 0x96, 0xfd, 0xfc, 0x6a, 0x61, 0xa8, 0xb3, 0x85, 0xa1,
	0x7e, 0x5d, 0x18, 0xea, 0xa7, 0xa5, 0xa1, 0xcc, 0x96, 0x86, 0xf2, 0x79, 0x69, 0x28, 0x6f, 0xd6,
	0x53, 0xfe, 0xcb, 0x9d, 0x4e, 0x7f, 0x5e, 0xaa, 0x08, 0x7c, 0x7c, 0x4d, 0x1c, 0xda, 0xd1, 0xf7,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x11, 0x8e, 0xc2, 0xd4, 0x02, 0x00, 0x00,
}

func (m *BridgeTransferLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeTransferLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeTransferLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExemptAddresses) > 0 {
		for iNdEx := len(m.ExemptAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExemptAddresses[iNdEx])
			copy(dAtA[i:], m.ExemptAddresses[iNdEx])
			i = encodeVarintBridgeTransferLimit(dAtA, i, uint64(len(m.ExemptAddresses[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LimitPeriod != 0 {
		i = encodeVarintBridgeTransferLimit(dAtA, i, uint64(m.LimitPeriod))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Limit.Size()
		i -= size
		if _, err := m.Limit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBridgeTransferLimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBridgeTransferLimit(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeTransferUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeTransferUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeTransferUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SinceBlockHeight != 0 {
		i = encodeVarintBridgeTransferLimit(dAtA, i, uint64(m.SinceBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Usage.Size()
		i -= size
		if _, err := m.Usage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBridgeTransferLimit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintBridgeTransferLimit(dAtA []byte, offset int, v uint64) int {
	offset -= sovBridgeTransferLimit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BridgeTransferLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBridgeTransferLimit(uint64(l))
	}
	l = m.Limit.Size()
	n += 1 + l + sovBridgeTransferLimit(uint64(l))
	if m.LimitPeriod != 0 {
		n += 1 + sovBridgeTransferLimit(uint64(m.LimitPeriod))
	}
	if len(m.ExemptAddresses) > 0 {
		for _, b := range m.ExemptAddresses {
			l = len(b)
			n += 1 + l + sovBridgeTransferLimit(uint64(l))
		}
	}
	return n
}

func (m *BridgeTransferUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Usage.Size()
	n += 1 + l + sovBridgeTransferLimit(uint64(l))
	if m.SinceBlockHeight != 0 {
		n += 1 + sovBridgeTransferLimit(uint64(m.SinceBlockHeight))
	}
	return n
}

func sovBridgeTransferLimit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBridgeTransferLimit(x uint64) (n int) {
	return sovBridgeTransferLimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BridgeTransferLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgeTransferLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeTransferLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeTransferLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransferLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransferLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitPeriod", wireType)
			}
			m.LimitPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransferLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitPeriod |= LimitPeriod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExemptAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransferLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExemptAddresses = append(m.ExemptAddresses, make([]byte, postIndex-iNdEx))
			copy(m.ExemptAddresses[len(m.ExemptAddresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgeTransferLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeTransferUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgeTransferLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeTransferUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeTransferUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransferLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinceBlockHeight", wireType)
			}
			m.SinceBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeTransferLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SinceBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBridgeTransferLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgeTransferLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridgeTransferLimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridgeTransferLimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgeTransferLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgeTransferLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBridgeTransferLimit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBridgeTransferLimit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBridgeTransferLimit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBridgeTransferLimit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridgeTransferLimit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBridgeTransferLimit = fmt.Errorf("proto: unexpected end of group")
)
