// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: treasury/ledger.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LedgerData struct {
	ID          uint64     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BlockHeight uint64     `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockTime   time.Time  `protobuf:"bytes,3,opt,name=blockTime,proto3,stdtime" json:"blockTime"`
	From        User       `protobuf:"bytes,4,opt,name=from,proto3" json:"from"`
	To          User       `protobuf:"bytes,5,opt,name=to,proto3" json:"to"`
	Amount      Coin       `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount"`
	Origin      *types.Any `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *LedgerData) Reset()         { *m = LedgerData{} }
func (m *LedgerData) String() string { return proto.CompactTextString(m) }
func (*LedgerData) ProtoMessage()    {}
func (*LedgerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6720ee222b1afc4c, []int{0}
}
func (m *LedgerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerData.Merge(m, src)
}
func (m *LedgerData) XXX_Size() int {
	return m.Size()
}
func (m *LedgerData) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerData.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerData proto.InternalMessageInfo

func (m *LedgerData) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LedgerData) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *LedgerData) GetBlockTime() time.Time {
	if m != nil {
		return m.BlockTime
	}
	return time.Time{}
}

func (m *LedgerData) GetFrom() User {
	if m != nil {
		return m.From
	}
	return User{}
}

func (m *LedgerData) GetTo() User {
	if m != nil {
		return m.To
	}
	return User{}
}

func (m *LedgerData) GetAmount() Coin {
	if m != nil {
		return m.Amount
	}
	return Coin{}
}

func (m *LedgerData) GetOrigin() *types.Any {
	if m != nil {
		return m.Origin
	}
	return nil
}

type User struct {
	// Types that are valid to be assigned to Type:
	//	*User_Job
	//	*User_AccAddress
	//	*User_ExternalAddress
	Type isUser_Type `protobuf_oneof:"type"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_6720ee222b1afc4c, []int{1}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

type isUser_Type interface {
	isUser_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type User_Job struct {
	Job string `protobuf:"bytes,1,opt,name=job,proto3,oneof" json:"job,omitempty"`
}
type User_AccAddress struct {
	AccAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=accAddress,proto3,oneof,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"accAddress,omitempty"`
}
type User_ExternalAddress struct {
	ExternalAddress *ExternalAddress `protobuf:"bytes,3,opt,name=externalAddress,proto3,oneof" json:"externalAddress,omitempty"`
}

func (*User_Job) isUser_Type()             {}
func (*User_AccAddress) isUser_Type()      {}
func (*User_ExternalAddress) isUser_Type() {}

func (m *User) GetType() isUser_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *User) GetJob() string {
	if x, ok := m.GetType().(*User_Job); ok {
		return x.Job
	}
	return ""
}

func (m *User) GetAccAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if x, ok := m.GetType().(*User_AccAddress); ok {
		return x.AccAddress
	}
	return nil
}

func (m *User) GetExternalAddress() *ExternalAddress {
	if x, ok := m.GetType().(*User_ExternalAddress); ok {
		return x.ExternalAddress
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*User) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*User_Job)(nil),
		(*User_AccAddress)(nil),
		(*User_ExternalAddress)(nil),
	}
}

type ExternalAddress struct {
	Address          []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ChainType        string `protobuf:"bytes,2,opt,name=chainType,proto3" json:"chainType,omitempty"`
	ChainReferenceID string `protobuf:"bytes,3,opt,name=chainReferenceID,proto3" json:"chainReferenceID,omitempty"`
}

func (m *ExternalAddress) Reset()         { *m = ExternalAddress{} }
func (m *ExternalAddress) String() string { return proto.CompactTextString(m) }
func (*ExternalAddress) ProtoMessage()    {}
func (*ExternalAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_6720ee222b1afc4c, []int{2}
}
func (m *ExternalAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalAddress.Merge(m, src)
}
func (m *ExternalAddress) XXX_Size() int {
	return m.Size()
}
func (m *ExternalAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalAddress proto.InternalMessageInfo

func (m *ExternalAddress) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ExternalAddress) GetChainType() string {
	if m != nil {
		return m.ChainType
	}
	return ""
}

func (m *ExternalAddress) GetChainReferenceID() string {
	if m != nil {
		return m.ChainReferenceID
	}
	return ""
}

func init() {
	proto.RegisterType((*LedgerData)(nil), "palomachain.paloma.treasury.LedgerData")
	proto.RegisterType((*User)(nil), "palomachain.paloma.treasury.User")
	proto.RegisterType((*ExternalAddress)(nil), "palomachain.paloma.treasury.ExternalAddress")
}

func init() { proto.RegisterFile("treasury/ledger.proto", fileDescriptor_6720ee222b1afc4c) }

var fileDescriptor_6720ee222b1afc4c = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x6d, 0xd7, 0xa4, 0xe4, 0x6d, 0x45, 0xd1, 0x51, 0x24, 0x13, 0x90, 0x13, 0x32, 0x55,
	0xa8, 0x3d, 0x0b, 0x18, 0x18, 0x18, 0x50, 0x4c, 0x90, 0x1c, 0x89, 0xe9, 0x08, 0x12, 0x62, 0x3b,
	0x3b, 0x17, 0xc7, 0xd4, 0xf6, 0x59, 0xe7, 0xb3, 0x54, 0x7f, 0x8b, 0x7e, 0xac, 0x8e, 0x65, 0x63,
	0x2a, 0x28, 0x19, 0xf8, 0x0e, 0x4c, 0xc8, 0x67, 0x3b, 0x0d, 0xa9, 0x54, 0xd1, 0xc9, 0xf7, 0xbe,
	0xf7, 0xfc, 0x9e, 0xf7, 0xcf, 0xc9, 0xf0, 0x58, 0x0a, 0x46, 0xf3, 0x42, 0x94, 0x4e, 0xcc, 0x66,
	0x21, 0x13, 0x38, 0x13, 0x5c, 0x72, 0xf4, 0x34, 0xa3, 0x31, 0x4f, 0x68, 0xb0, 0xa0, 0x51, 0x8a,
	0xeb, 0x33, 0x6e, 0x95, 0xbd, 0xc3, 0x90, 0x87, 0x5c, 0xe9, 0x9c, 0xea, 0x54, 0x23, 0xbd, 0x47,
	0x6b, 0xa7, 0x80, 0x57, 0x90, 0x4a, 0xf6, 0x43, 0xce, 0xc3, 0x98, 0x39, 0x2a, 0xf2, 0x8b, 0xb9,
	0x23, 0xa3, 0x84, 0xe5, 0x92, 0x26, 0x59, 0x23, 0x78, 0xb2, 0x2d, 0xa0, 0x69, 0x59, 0x5f, 0x0d,
	0x7f, 0x1b, 0x00, 0x1f, 0x55, 0x53, 0x63, 0x2a, 0x29, 0x7a, 0x00, 0xc6, 0x64, 0x6c, 0xe9, 0x03,
	0xfd, 0xc8, 0x24, 0xc6, 0x64, 0x8c, 0x06, 0xb0, 0xe7, 0xc7, 0x3c, 0x38, 0xf5, 0x58, 0x14, 0x2e,
	0xa4, 0x65, 0xa8, 0x8b, 0xcd, 0x14, 0x72, 0xa1, 0xab, 0xc2, 0x69, 0x94, 0x30, 0x6b, 0x67, 0xa0,
	0x1f, 0xed, 0xbd, 0xea, 0xe1, 0xba, 0x1e, 0x6e, 0xeb, 0xe1, 0x69, 0xdb, 0x90, 0x7b, 0xff, 0xe2,
	0xaa, 0xaf, 0x9d, 0xff, 0xec, 0xeb, 0xe4, 0x1a, 0x43, 0x6f, 0xc1, 0x9c, 0x0b, 0x9e, 0x58, 0xa6,
	0xc2, 0x9f, 0xe3, 0x5b, 0xf6, 0x82, 0x3f, 0xe7, 0x4c, 0xb8, 0x66, 0xe5, 0x42, 0x14, 0x84, 0xde,
	0x80, 0x21, 0xb9, 0x75, 0xef, 0x6e, 0xa8, 0x21, 0x39, 0x7a, 0x07, 0x1d, 0x9a, 0xf0, 0x22, 0x95,
	0x56, 0xe7, 0x3f, 0xe0, 0xf7, 0x3c, 0x4a, 0x1b, 0xb8, 0xc1, 0xd0, 0x31, 0x74, 0xb8, 0x88, 0xc2,
	0x28, 0xb5, 0x76, 0x95, 0xc1, 0xe1, 0x8d, 0xb9, 0x47, 0x69, 0x49, 0x1a, 0xcd, 0xf0, 0xbb, 0x0e,
	0x66, 0xd5, 0x01, 0x42, 0xb0, 0xf3, 0x8d, 0xfb, 0x6a, 0xc9, 0x5d, 0x4f, 0x23, 0x55, 0x80, 0x3e,
	0x01, 0xd0, 0x20, 0x18, 0xcd, 0x66, 0x82, 0xe5, 0xb9, 0x5a, 0xf3, 0xbe, 0xfb, 0xf2, 0xcf, 0x55,
	0xff, 0x24, 0x8c, 0xe4, 0xa2, 0xf0, 0x71, 0xc0, 0x13, 0x27, 0xe0, 0x79, 0xc2, 0xf3, 0xe6, 0x73,
	0x92, 0xcf, 0x4e, 0x1d, 0x59, 0x66, 0x2c, 0xc7, 0xa3, 0x35, 0xe8, 0x69, 0x64, 0xc3, 0x06, 0x7d,
	0x81, 0x03, 0x76, 0x26, 0x99, 0x48, 0x69, 0xdc, 0x3a, 0xd7, 0x0f, 0x74, 0x7c, 0xeb, 0xa4, 0x1f,
	0xfe, 0x65, 0x3c, 0x8d, 0x6c, 0xdb, 0xb8, 0x1d, 0x30, 0xab, 0xda, 0xc3, 0x02, 0x0e, 0xb6, 0xd4,
	0xc8, 0x82, 0x5d, 0xda, 0x14, 0xab, 0x26, 0xdc, 0x27, 0x6d, 0x88, 0x9e, 0x41, 0x57, 0x15, 0x9c,
	0x96, 0x19, 0x53, 0x23, 0x76, 0xc9, 0x75, 0x02, 0xbd, 0x80, 0x87, 0x2a, 0x20, 0x6c, 0xce, 0x04,
	0x4b, 0x03, 0x36, 0x19, 0xab, 0x6e, 0xbb, 0xe4, 0x46, 0xde, 0xf5, 0x2e, 0x96, 0xb6, 0x7e, 0xb9,
	0xb4, 0xf5, 0x5f, 0x4b, 0x5b, 0x3f, 0x5f, 0xd9, 0xda, 0xe5, 0xca, 0xd6, 0x7e, 0xac, 0x6c, 0xed,
	0x2b, 0xde, 0xd8, 0xd7, 0xc6, 0x8c, 0xcd, 0xd9, 0x39, 0x73, 0xd6, 0xff, 0x8f, 0xda, 0x9d, 0xdf,
	0x51, 0x4f, 0xf5, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x89, 0xad, 0x73, 0xa2, 0x03,
	0x00, 0x00,
}

func (m *LedgerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BlockTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintLedger(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	if m.BlockHeight != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *User_Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Job)
	copy(dAtA[i:], m.Job)
	i = encodeVarintLedger(dAtA, i, uint64(len(m.Job)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *User_AccAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_AccAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccAddress != nil {
		i -= len(m.AccAddress)
		copy(dAtA[i:], m.AccAddress)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.AccAddress)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *User_ExternalAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User_ExternalAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ExternalAddress != nil {
		{
			size, err := m.ExternalAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ExternalAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainReferenceID) > 0 {
		i -= len(m.ChainReferenceID)
		copy(dAtA[i:], m.ChainReferenceID)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.ChainReferenceID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainType) > 0 {
		i -= len(m.ChainType)
		copy(dAtA[i:], m.ChainType)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.ChainType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLedger(dAtA []byte, offset int, v uint64) int {
	offset -= sovLedger(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LedgerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLedger(uint64(m.ID))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovLedger(uint64(m.BlockHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BlockTime)
	n += 1 + l + sovLedger(uint64(l))
	l = m.From.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.To.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovLedger(uint64(l))
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *User_Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Job)
	n += 1 + l + sovLedger(uint64(l))
	return n
}
func (m *User_AccAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccAddress != nil {
		l = len(m.AccAddress)
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}
func (m *User_ExternalAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalAddress != nil {
		l = m.ExternalAddress.Size()
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}
func (m *ExternalAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.ChainType)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.ChainReferenceID)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func sovLedger(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLedger(x uint64) (n int) {
	return sovLedger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LedgerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &types.Any{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = &User_Job{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Type = &User_AccAddress{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExternalAddress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &User_ExternalAddress{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLedger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLedger
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLedger
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLedger
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLedger        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLedger          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLedger = fmt.Errorf("proto: unexpected end of group")
)
