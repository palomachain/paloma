// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/treasury/fees.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	cosmossdk_io_math "cosmossdk.io/math"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Empty represents an empty message
type Empty struct{}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_025e81aa1db4e06a, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}

func (m *Empty) XXX_Size() int {
	return m.Size()
}

func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Fees struct {
	CommunityFundFee string `protobuf:"bytes,1,opt,name=communityFundFee,proto3" json:"communityFundFee,omitempty"`
	SecurityFee      string `protobuf:"bytes,2,opt,name=securityFee,proto3" json:"securityFee,omitempty"`
}

func (m *Fees) Reset()         { *m = Fees{} }
func (m *Fees) String() string { return proto.CompactTextString(m) }
func (*Fees) ProtoMessage()    {}
func (*Fees) Descriptor() ([]byte, []int) {
	return fileDescriptor_025e81aa1db4e06a, []int{1}
}

func (m *Fees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Fees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Fees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fees.Merge(m, src)
}

func (m *Fees) XXX_Size() int {
	return m.Size()
}

func (m *Fees) XXX_DiscardUnknown() {
	xxx_messageInfo_Fees.DiscardUnknown(m)
}

var xxx_messageInfo_Fees proto.InternalMessageInfo

func (m *Fees) GetCommunityFundFee() string {
	if m != nil {
		return m.CommunityFundFee
	}
	return ""
}

func (m *Fees) GetSecurityFee() string {
	if m != nil {
		return m.SecurityFee
	}
	return ""
}

// Represents the fee setting of an individual relayer for a target chain.
type RelayerFeeSetting struct {
	// Validator address of a validator participating in consensus.
	ValAddress string                         `protobuf:"bytes,1,opt,name=val_address,json=valAddress,proto3" json:"val_address,omitempty"`
	Fees       []RelayerFeeSetting_FeeSetting `protobuf:"bytes,2,rep,name=fees,proto3" json:"fees"`
}

func (m *RelayerFeeSetting) Reset()         { *m = RelayerFeeSetting{} }
func (m *RelayerFeeSetting) String() string { return proto.CompactTextString(m) }
func (*RelayerFeeSetting) ProtoMessage()    {}
func (*RelayerFeeSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_025e81aa1db4e06a, []int{2}
}

func (m *RelayerFeeSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *RelayerFeeSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayerFeeSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *RelayerFeeSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayerFeeSetting.Merge(m, src)
}

func (m *RelayerFeeSetting) XXX_Size() int {
	return m.Size()
}

func (m *RelayerFeeSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayerFeeSetting.DiscardUnknown(m)
}

var xxx_messageInfo_RelayerFeeSetting proto.InternalMessageInfo

func (m *RelayerFeeSetting) GetValAddress() string {
	if m != nil {
		return m.ValAddress
	}
	return ""
}

func (m *RelayerFeeSetting) GetFees() []RelayerFeeSetting_FeeSetting {
	if m != nil {
		return m.Fees
	}
	return nil
}

type RelayerFeeSetting_FeeSetting struct {
	// Describes the factor by which the gas spent on a
	// relayed transaction will be reimbursed.
	// e.g. `1.2` -> relayer asks to be reimbursed with `total_gas_cost * 1.2`
	// lower fee settings prioritize the relayer higher in the
	// pool.
	// A value below 1 indicates likely partial loss of funds.
	// `0` means no fees, with a total loss of funds.
	// Negative values are rejected.
	Multiplicator cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=multiplicator,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"multiplicator"`
	// Indicates the reference ID of the target chain.
	ChainReferenceId string `protobuf:"bytes,2,opt,name=chain_reference_id,json=chainReferenceId,proto3" json:"chain_reference_id,omitempty"`
}

func (m *RelayerFeeSetting_FeeSetting) Reset()         { *m = RelayerFeeSetting_FeeSetting{} }
func (m *RelayerFeeSetting_FeeSetting) String() string { return proto.CompactTextString(m) }
func (*RelayerFeeSetting_FeeSetting) ProtoMessage()    {}
func (*RelayerFeeSetting_FeeSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_025e81aa1db4e06a, []int{2, 0}
}

func (m *RelayerFeeSetting_FeeSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *RelayerFeeSetting_FeeSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayerFeeSetting_FeeSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *RelayerFeeSetting_FeeSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayerFeeSetting_FeeSetting.Merge(m, src)
}

func (m *RelayerFeeSetting_FeeSetting) XXX_Size() int {
	return m.Size()
}

func (m *RelayerFeeSetting_FeeSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayerFeeSetting_FeeSetting.DiscardUnknown(m)
}

var xxx_messageInfo_RelayerFeeSetting_FeeSetting proto.InternalMessageInfo

func (m *RelayerFeeSetting_FeeSetting) GetChainReferenceId() string {
	if m != nil {
		return m.ChainReferenceId
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "palomachain.paloma.treasury.Empty")
	proto.RegisterType((*Fees)(nil), "palomachain.paloma.treasury.Fees")
	proto.RegisterType((*RelayerFeeSetting)(nil), "palomachain.paloma.treasury.RelayerFeeSetting")
	proto.RegisterType((*RelayerFeeSetting_FeeSetting)(nil), "palomachain.paloma.treasury.RelayerFeeSetting.FeeSetting")
}

func init() {
	proto.RegisterFile("palomachain/paloma/treasury/fees.proto", fileDescriptor_025e81aa1db4e06a)
}

var fileDescriptor_025e81aa1db4e06a = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcf, 0x8b, 0xd3, 0x40,
	0x18, 0x6d, 0x6a, 0xfd, 0x35, 0x45, 0xd8, 0x0d, 0x7b, 0xa8, 0x5d, 0x49, 0x4b, 0x0f, 0x52, 0x8a,
	0x9b, 0xa1, 0x2b, 0x08, 0xeb, 0xcd, 0xb2, 0x16, 0x44, 0x4f, 0xa9, 0x27, 0x11, 0xca, 0xd7, 0xe4,
	0xdb, 0x74, 0x30, 0x33, 0x13, 0x67, 0x26, 0xc5, 0xfc, 0x17, 0x1e, 0x3d, 0x2e, 0x9e, 0x3c, 0x7a,
	0xd8, 0x3f, 0x62, 0x8f, 0x4b, 0x4f, 0xe2, 0x61, 0x91, 0xf6, 0xa0, 0x7f, 0x86, 0x34, 0x93, 0xd2,
	0xca, 0x4a, 0x2f, 0xe1, 0xe5, 0xbd, 0x37, 0x2f, 0x2f, 0xf3, 0x7d, 0xe4, 0x71, 0x0a, 0x89, 0xe4,
	0x10, 0x4e, 0x81, 0x09, 0x6a, 0x31, 0x35, 0x0a, 0x41, 0x67, 0x2a, 0xa7, 0x67, 0x88, 0xda, 0x4f,
	0x95, 0x34, 0xd2, 0x3d, 0xdc, 0xf2, 0xf9, 0x16, 0xfb, 0x6b, 0x5f, 0xf3, 0x20, 0x96, 0xb1, 0x2c,
	0x7c, 0x74, 0x85, 0xec, 0x91, 0xe6, 0xa3, 0x58, 0xca, 0x38, 0x41, 0x0a, 0x29, 0xa3, 0x20, 0x84,
	0x34, 0x60, 0x98, 0x14, 0x65, 0x60, 0xb3, 0x17, 0x4a, 0xcd, 0xa5, 0xa6, 0x13, 0xd0, 0x48, 0x3f,
	0x66, 0xa8, 0x72, 0x3a, 0xeb, 0x4f, 0xd0, 0x40, 0x9f, 0xa6, 0x10, 0x33, 0x51, 0x98, 0x4b, 0x6f,
	0x77, 0x57, 0xc9, 0x14, 0x14, 0xf0, 0x75, 0xea, 0x43, 0x9b, 0x3a, 0xb6, 0x65, 0xec, 0x4b, 0x29,
	0xed, 0x03, 0x67, 0x42, 0xd2, 0xe2, 0x69, 0xa9, 0xce, 0x5d, 0x72, 0xfb, 0x25, 0x4f, 0x4d, 0xde,
	0x79, 0x4b, 0x6a, 0x43, 0x44, 0xed, 0xf6, 0xc8, 0x5e, 0x28, 0x39, 0xcf, 0x04, 0x33, 0xf9, 0x30,
	0x13, 0xd1, 0x10, 0xb1, 0xe1, 0xb4, 0x9d, 0xee, 0xfd, 0xe0, 0x06, 0xef, 0xb6, 0x49, 0x5d, 0x63,
	0x98, 0xa9, 0x15, 0x85, 0xd8, 0xa8, 0x16, 0xb6, 0x6d, 0xaa, 0x33, 0xaf, 0x92, 0xfd, 0x00, 0x13,
	0xc8, 0x51, 0x0d, 0x11, 0x47, 0x68, 0x0c, 0x13, 0xb1, 0x7b, 0x42, 0xea, 0x33, 0x48, 0xc6, 0x10,
	0x45, 0x0a, 0xb5, 0xb6, 0xf1, 0x83, 0xc6, 0xfc, 0xe2, 0xe8, 0xa0, 0xac, 0xfb, 0xc2, 0x2a, 0x23,
	0xa3, 0x98, 0x88, 0x03, 0x32, 0x83, 0xa4, 0x64, 0xdc, 0x11, 0xa9, 0xad, 0x46, 0xd2, 0xa8, 0xb6,
	0x6f, 0x75, 0xeb, 0xc7, 0x27, 0xfe, 0x8e, 0x99, 0xf8, 0x37, 0x3e, 0xec, 0x6f, 0xe0, 0xa0, 0x76,
	0x79, 0xdd, 0xaa, 0x04, 0x45, 0x58, 0xf3, 0xab, 0x43, 0xc8, 0x56, 0xbd, 0xf7, 0xe4, 0x01, 0xcf,
	0x12, 0xc3, 0xd2, 0x84, 0x85, 0x60, 0xa4, 0x2a, 0x0b, 0x3e, 0x5b, 0x9d, 0xf8, 0x79, 0xdd, 0x3a,
	0xb4, 0x25, 0x75, 0xf4, 0xc1, 0x67, 0x92, 0x72, 0x30, 0x53, 0xff, 0x0d, 0xc6, 0x10, 0xe6, 0xa7,
	0x18, 0xce, 0x2f, 0x8e, 0x48, 0xf9, 0x0f, 0xa7, 0x18, 0x7e, 0xfb, 0xfd, 0xbd, 0xe7, 0x04, 0xff,
	0x86, 0xb9, 0x4f, 0x88, 0x5b, 0xd4, 0x1d, 0x2b, 0x3c, 0x43, 0x85, 0x22, 0xc4, 0x31, 0x8b, 0xca,
	0xbb, 0xdb, 0x2b, 0x94, 0x60, 0x2d, 0xbc, 0x8a, 0x9e, 0xdf, 0xfb, 0x72, 0xde, 0x72, 0xfe, 0x9c,
	0xb7, 0x9c, 0x0d, 0x1a, 0xbc, 0xbe, 0x5c, 0x78, 0xce, 0xd5, 0xc2, 0x73, 0x7e, 0x2d, 0x3c, 0xe7,
	0xf3, 0xd2, 0xab, 0x5c, 0x2d, 0xbd, 0xca, 0x8f, 0xa5, 0x57, 0x79, 0xd7, 0x8f, 0x99, 0x99, 0x66,
	0x13, 0x3f, 0x94, 0x9c, 0xfe, 0x67, 0x61, 0x66, 0xc7, 0xf4, 0xd3, 0x66, 0x6b, 0x4c, 0x9e, 0xa2,
	0x9e, 0xdc, 0x29, 0xf6, 0xe0, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0x67, 0x11, 0x9c,
	0x06, 0x03, 0x00, 0x00,
}

func (this *RelayerFeeSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RelayerFeeSetting)
	if !ok {
		that2, ok := that.(RelayerFeeSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ValAddress != that1.ValAddress {
		return false
	}
	if len(this.Fees) != len(that1.Fees) {
		return false
	}
	for i := range this.Fees {
		if !this.Fees[i].Equal(&that1.Fees[i]) {
			return false
		}
	}
	return true
}

func (this *RelayerFeeSetting_FeeSetting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RelayerFeeSetting_FeeSetting)
	if !ok {
		that2, ok := that.(RelayerFeeSetting_FeeSetting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Multiplicator.Equal(that1.Multiplicator) {
		return false
	}
	if this.ChainReferenceId != that1.ChainReferenceId {
		return false
	}
	return true
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Fees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecurityFee) > 0 {
		i -= len(m.SecurityFee)
		copy(dAtA[i:], m.SecurityFee)
		i = encodeVarintFees(dAtA, i, uint64(len(m.SecurityFee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommunityFundFee) > 0 {
		i -= len(m.CommunityFundFee)
		copy(dAtA[i:], m.CommunityFundFee)
		i = encodeVarintFees(dAtA, i, uint64(len(m.CommunityFundFee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayerFeeSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayerFeeSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayerFeeSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFees(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintFees(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayerFeeSetting_FeeSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayerFeeSetting_FeeSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayerFeeSetting_FeeSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainReferenceId) > 0 {
		i -= len(m.ChainReferenceId)
		copy(dAtA[i:], m.ChainReferenceId)
		i = encodeVarintFees(dAtA, i, uint64(len(m.ChainReferenceId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Multiplicator.Size()
		i -= size
		if _, err := m.Multiplicator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintFees(dAtA []byte, offset int, v uint64) int {
	offset -= sovFees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Fees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommunityFundFee)
	if l > 0 {
		n += 1 + l + sovFees(uint64(l))
	}
	l = len(m.SecurityFee)
	if l > 0 {
		n += 1 + l + sovFees(uint64(l))
	}
	return n
}

func (m *RelayerFeeSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovFees(uint64(l))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovFees(uint64(l))
		}
	}
	return n
}

func (m *RelayerFeeSetting_FeeSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Multiplicator.Size()
	n += 1 + l + sovFees(uint64(l))
	l = len(m.ChainReferenceId)
	if l > 0 {
		n += 1 + l + sovFees(uint64(l))
	}
	return n
}

func sovFees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozFees(x uint64) (n int) {
	return sovFees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *Fees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityFundFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunityFundFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *RelayerFeeSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayerFeeSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayerFeeSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, RelayerFeeSetting_FeeSetting{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *RelayerFeeSetting_FeeSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplicator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplicator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipFees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFees = fmt.Errorf("proto: unexpected end of group")
)
