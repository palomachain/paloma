// Code generated by MockGen. DO NOT EDIT.
// Source: x/valset/types/expected_keepers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/cosmos-sdk/x/staking/types"
	gomock "github.com/golang/mock/gomock"
	types1 "github.com/palomachain/paloma/x/valset/types"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(ctx context.Context, addr types.AccAddress) types.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(types.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), ctx, addr)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SpendableCoins mocks base method.
func (m *MockBankKeeper) SpendableCoins(ctx context.Context, addr types.AccAddress) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", ctx, addr)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockBankKeeperMockRecorder) SpendableCoins(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoins), ctx, addr)
}

// MockStakingKeeper is a mock of StakingKeeper interface.
type MockStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStakingKeeperMockRecorder
}

// MockStakingKeeperMockRecorder is the mock recorder for MockStakingKeeper.
type MockStakingKeeperMockRecorder struct {
	mock *MockStakingKeeper
}

// NewMockStakingKeeper creates a new mock instance.
func NewMockStakingKeeper(ctrl *gomock.Controller) *MockStakingKeeper {
	mock := &MockStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingKeeper) EXPECT() *MockStakingKeeperMockRecorder {
	return m.recorder
}

// IterateValidators mocks base method.
func (m *MockStakingKeeper) IterateValidators(ctx context.Context, fn func(int64, types0.ValidatorI) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IterateValidators", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// IterateValidators indicates an expected call of IterateValidators.
func (mr *MockStakingKeeperMockRecorder) IterateValidators(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateValidators", reflect.TypeOf((*MockStakingKeeper)(nil).IterateValidators), ctx, fn)
}

// Jail mocks base method.
func (m *MockStakingKeeper) Jail(ctx context.Context, consAddr types.ConsAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jail", ctx, consAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Jail indicates an expected call of Jail.
func (mr *MockStakingKeeperMockRecorder) Jail(ctx, consAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jail", reflect.TypeOf((*MockStakingKeeper)(nil).Jail), ctx, consAddr)
}

// Validator mocks base method.
func (m *MockStakingKeeper) Validator(ctx context.Context, addr types.ValAddress) (types0.ValidatorI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validator", ctx, addr)
	ret0, _ := ret[0].(types0.ValidatorI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validator indicates an expected call of Validator.
func (mr *MockStakingKeeperMockRecorder) Validator(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockStakingKeeper)(nil).Validator), ctx, addr)
}

// MockOnSnapshotBuiltListener is a mock of OnSnapshotBuiltListener interface.
type MockOnSnapshotBuiltListener struct {
	ctrl     *gomock.Controller
	recorder *MockOnSnapshotBuiltListenerMockRecorder
}

// MockOnSnapshotBuiltListenerMockRecorder is the mock recorder for MockOnSnapshotBuiltListener.
type MockOnSnapshotBuiltListenerMockRecorder struct {
	mock *MockOnSnapshotBuiltListener
}

// NewMockOnSnapshotBuiltListener creates a new mock instance.
func NewMockOnSnapshotBuiltListener(ctrl *gomock.Controller) *MockOnSnapshotBuiltListener {
	mock := &MockOnSnapshotBuiltListener{ctrl: ctrl}
	mock.recorder = &MockOnSnapshotBuiltListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnSnapshotBuiltListener) EXPECT() *MockOnSnapshotBuiltListenerMockRecorder {
	return m.recorder
}

// OnSnapshotBuilt mocks base method.
func (m *MockOnSnapshotBuiltListener) OnSnapshotBuilt(arg0 types.Context, arg1 *types1.Snapshot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnSnapshotBuilt", arg0, arg1)
}

// OnSnapshotBuilt indicates an expected call of OnSnapshotBuilt.
func (mr *MockOnSnapshotBuiltListenerMockRecorder) OnSnapshotBuilt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSnapshotBuilt", reflect.TypeOf((*MockOnSnapshotBuiltListener)(nil).OnSnapshotBuilt), arg0, arg1)
}

// MockEvmKeeper is a mock of EvmKeeper interface.
type MockEvmKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockEvmKeeperMockRecorder
}

// MockEvmKeeperMockRecorder is the mock recorder for MockEvmKeeper.
type MockEvmKeeperMockRecorder struct {
	mock *MockEvmKeeper
}

// NewMockEvmKeeper creates a new mock instance.
func NewMockEvmKeeper(ctrl *gomock.Controller) *MockEvmKeeper {
	mock := &MockEvmKeeper{ctrl: ctrl}
	mock.recorder = &MockEvmKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvmKeeper) EXPECT() *MockEvmKeeperMockRecorder {
	return m.recorder
}

// MissingChains mocks base method.
func (m *MockEvmKeeper) MissingChains(ctx types.Context, chainReferenceIDs []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MissingChains", ctx, chainReferenceIDs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MissingChains indicates an expected call of MissingChains.
func (mr *MockEvmKeeperMockRecorder) MissingChains(ctx, chainReferenceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MissingChains", reflect.TypeOf((*MockEvmKeeper)(nil).MissingChains), ctx, chainReferenceIDs)
}
