// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/palomachain/paloma/x/valset/types"
	mock "github.com/stretchr/testify/mock"
)

// QueryServer is an autogenerated mock type for the QueryServer type
type QueryServer struct {
	mock.Mock
}

// GetAlivePigeons provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetAlivePigeons(_a0 context.Context, _a1 *types.QueryGetAlivePigeonsRequest) (*types.QueryGetAlivePigeonsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.QueryGetAlivePigeonsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetAlivePigeonsRequest) (*types.QueryGetAlivePigeonsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetAlivePigeonsRequest) *types.QueryGetAlivePigeonsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetAlivePigeonsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetAlivePigeonsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestPublishedSnapshot provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetLatestPublishedSnapshot(_a0 context.Context, _a1 *types.QueryGetLatestPublishedSnapshotRequest) (*types.QueryGetLatestPublishedSnapshotResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.QueryGetLatestPublishedSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetLatestPublishedSnapshotRequest) (*types.QueryGetLatestPublishedSnapshotResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetLatestPublishedSnapshotRequest) *types.QueryGetLatestPublishedSnapshotResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetLatestPublishedSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetLatestPublishedSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotByID provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetSnapshotByID(_a0 context.Context, _a1 *types.QueryGetSnapshotByIDRequest) (*types.QueryGetSnapshotByIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.QueryGetSnapshotByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSnapshotByIDRequest) (*types.QueryGetSnapshotByIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetSnapshotByIDRequest) *types.QueryGetSnapshotByIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetSnapshotByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetSnapshotByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidatorAliveUntil provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetValidatorAliveUntil(_a0 context.Context, _a1 *types.QueryGetValidatorAliveUntilRequest) (*types.QueryGetValidatorAliveUntilResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.QueryGetValidatorAliveUntilResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorAliveUntilRequest) (*types.QueryGetValidatorAliveUntilResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorAliveUntilRequest) *types.QueryGetValidatorAliveUntilResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetValidatorAliveUntilResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetValidatorAliveUntilRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidatorJailReason provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) GetValidatorJailReason(_a0 context.Context, _a1 *types.QueryGetValidatorJailReasonRequest) (*types.QueryGetValidatorJailReasonResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.QueryGetValidatorJailReasonResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorJailReasonRequest) (*types.QueryGetValidatorJailReasonResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetValidatorJailReasonRequest) *types.QueryGetValidatorJailReasonResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryGetValidatorJailReasonResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetValidatorJailReasonRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Params provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) Params(_a0 context.Context, _a1 *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest) (*types.QueryParamsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryParamsRequest) *types.QueryParamsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryParamsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatorInfo provides a mock function with given fields: _a0, _a1
func (_m *QueryServer) ValidatorInfo(_a0 context.Context, _a1 *types.QueryValidatorInfoRequest) (*types.QueryValidatorInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.QueryValidatorInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorInfoRequest) (*types.QueryValidatorInfoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryValidatorInfoRequest) *types.QueryValidatorInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryValidatorInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryValidatorInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQueryServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryServer creates a new instance of QueryServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryServer(t mockConstructorTestingTNewQueryServer) *QueryServer {
	mock := &QueryServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
