// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/valset/pigeon_requirements.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PigeonRequirements struct {
	MinVersion string `protobuf:"bytes,1,opt,name=minVersion,proto3" json:"minVersion,omitempty"`
}

func (m *PigeonRequirements) Reset()         { *m = PigeonRequirements{} }
func (m *PigeonRequirements) String() string { return proto.CompactTextString(m) }
func (*PigeonRequirements) ProtoMessage()    {}
func (*PigeonRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff0dae947bdd130, []int{0}
}

func (m *PigeonRequirements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *PigeonRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PigeonRequirements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *PigeonRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PigeonRequirements.Merge(m, src)
}

func (m *PigeonRequirements) XXX_Size() int {
	return m.Size()
}

func (m *PigeonRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_PigeonRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_PigeonRequirements proto.InternalMessageInfo

func (m *PigeonRequirements) GetMinVersion() string {
	if m != nil {
		return m.MinVersion
	}
	return ""
}

type ScheduledPigeonRequirements struct {
	Requirements      *PigeonRequirements `protobuf:"bytes,1,opt,name=requirements,proto3" json:"requirements,omitempty"`
	TargetBlockHeight uint64              `protobuf:"varint,2,opt,name=targetBlockHeight,proto3" json:"targetBlockHeight,omitempty"`
}

func (m *ScheduledPigeonRequirements) Reset()         { *m = ScheduledPigeonRequirements{} }
func (m *ScheduledPigeonRequirements) String() string { return proto.CompactTextString(m) }
func (*ScheduledPigeonRequirements) ProtoMessage()    {}
func (*ScheduledPigeonRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ff0dae947bdd130, []int{1}
}

func (m *ScheduledPigeonRequirements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ScheduledPigeonRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduledPigeonRequirements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ScheduledPigeonRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledPigeonRequirements.Merge(m, src)
}

func (m *ScheduledPigeonRequirements) XXX_Size() int {
	return m.Size()
}

func (m *ScheduledPigeonRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledPigeonRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledPigeonRequirements proto.InternalMessageInfo

func (m *ScheduledPigeonRequirements) GetRequirements() *PigeonRequirements {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *ScheduledPigeonRequirements) GetTargetBlockHeight() uint64 {
	if m != nil {
		return m.TargetBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*PigeonRequirements)(nil), "palomachain.paloma.valset.PigeonRequirements")
	proto.RegisterType((*ScheduledPigeonRequirements)(nil), "palomachain.paloma.valset.ScheduledPigeonRequirements")
}

func init() {
	proto.RegisterFile("palomachain/paloma/valset/pigeon_requirements.proto", fileDescriptor_5ff0dae947bdd130)
}

var fileDescriptor_5ff0dae947bdd130 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2e, 0x48, 0xcc, 0xc9,
	0xcf, 0x4d, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x87, 0xb0, 0xf5, 0xcb, 0x12, 0x73, 0x8a, 0x53,
	0x4b, 0xf4, 0x0b, 0x32, 0xd3, 0x53, 0xf3, 0xf3, 0xe2, 0x8b, 0x52, 0x0b, 0x4b, 0x33, 0x8b, 0x52,
	0x73, 0x53, 0xf3, 0x4a, 0x8a, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x24, 0x91, 0x34, 0xe9,
	0x41, 0xd8, 0x7a, 0x10, 0x4d, 0x4a, 0x26, 0x5c, 0x42, 0x01, 0x60, 0x7d, 0x41, 0x48, 0xda, 0x84,
	0xe4, 0xb8, 0xb8, 0x72, 0x33, 0xf3, 0xc2, 0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0x24, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0x90, 0x44, 0x94, 0xe6, 0x31, 0x72, 0x49, 0x07, 0x27, 0x67, 0xa4, 0xa6,
	0x94, 0xe6, 0xa4, 0xa6, 0x60, 0xd1, 0x1f, 0xc8, 0xc5, 0x83, 0xec, 0x0c, 0xb0, 0x09, 0xdc, 0x46,
	0xba, 0x7a, 0x38, 0xdd, 0xa1, 0x87, 0x69, 0x48, 0x10, 0x8a, 0x11, 0x42, 0x3a, 0x5c, 0x82, 0x25,
	0x89, 0x45, 0xe9, 0xa9, 0x25, 0x4e, 0x39, 0xf9, 0xc9, 0xd9, 0x1e, 0xa9, 0x99, 0xe9, 0x19, 0x25,
	0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x98, 0x12, 0x4e, 0x9e, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31,
	0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x9f, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f,
	0xab, 0x8f, 0x2d, 0x2c, 0x8d, 0xf4, 0x2b, 0x60, 0x01, 0x5a, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4,
	0x06, 0x0e, 0x43, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xab, 0x95, 0x31, 0xb0, 0x7a, 0x01,
	0x00, 0x00,
}

func (m *PigeonRequirements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PigeonRequirements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PigeonRequirements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinVersion) > 0 {
		i -= len(m.MinVersion)
		copy(dAtA[i:], m.MinVersion)
		i = encodeVarintPigeonRequirements(dAtA, i, uint64(len(m.MinVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScheduledPigeonRequirements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledPigeonRequirements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledPigeonRequirements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetBlockHeight != 0 {
		i = encodeVarintPigeonRequirements(dAtA, i, uint64(m.TargetBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Requirements != nil {
		{
			size, err := m.Requirements.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPigeonRequirements(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPigeonRequirements(dAtA []byte, offset int, v uint64) int {
	offset -= sovPigeonRequirements(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *PigeonRequirements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinVersion)
	if l > 0 {
		n += 1 + l + sovPigeonRequirements(uint64(l))
	}
	return n
}

func (m *ScheduledPigeonRequirements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Requirements != nil {
		l = m.Requirements.Size()
		n += 1 + l + sovPigeonRequirements(uint64(l))
	}
	if m.TargetBlockHeight != 0 {
		n += 1 + sovPigeonRequirements(uint64(m.TargetBlockHeight))
	}
	return n
}

func sovPigeonRequirements(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozPigeonRequirements(x uint64) (n int) {
	return sovPigeonRequirements(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *PigeonRequirements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPigeonRequirements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PigeonRequirements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PigeonRequirements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPigeonRequirements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPigeonRequirements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPigeonRequirements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPigeonRequirements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPigeonRequirements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ScheduledPigeonRequirements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPigeonRequirements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledPigeonRequirements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledPigeonRequirements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPigeonRequirements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPigeonRequirements
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPigeonRequirements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requirements == nil {
				m.Requirements = &PigeonRequirements{}
			}
			if err := m.Requirements.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetBlockHeight", wireType)
			}
			m.TargetBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPigeonRequirements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPigeonRequirements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPigeonRequirements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipPigeonRequirements(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPigeonRequirements
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPigeonRequirements
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPigeonRequirements
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPigeonRequirements
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPigeonRequirements
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPigeonRequirements
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPigeonRequirements        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPigeonRequirements          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPigeonRequirements = fmt.Errorf("proto: unexpected end of group")
)
