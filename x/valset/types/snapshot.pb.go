// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: valset/snapshot.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type State int32

const (
	State_NONE State = 0
)

var State_name = map[int32]string{
	0: "NONE",
}

var State_value = map[string]int32{
	"NONE": 0,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0adf39ac9845c7db, []int{0}
}

type Validator struct {
	ID           uint64                                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ShareCount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=shareCount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"shareCount"`
	SdkValidator *types.Any                             `protobuf:"bytes,3,opt,name=sdkValidator,proto3" json:"sdkValidator,omitempty"`
	State        State                                  `protobuf:"varint,4,opt,name=state,proto3,enum=volumefi.cronchain.valset.State" json:"state,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_0adf39ac9845c7db, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Validator) GetSdkValidator() *types.Any {
	if m != nil {
		return m.SdkValidator
	}
	return nil
}

func (m *Validator) GetState() State {
	if m != nil {
		return m.State
	}
	return State_NONE
}

type Snapshot struct {
	ID              uint64                                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Height          uint64                                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TotalShares     int64                                  `protobuf:"varint,3,opt,name=totalShares,proto3" json:"totalShares,omitempty"`
	TotalShareCount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total_share_count,json=totalShareCount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_share_count"`
	CreatedAt       *timestamppb.Timestamp                 `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Validators      []*Validator                           `protobuf:"bytes,6,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_0adf39ac9845c7db, []int{1}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Snapshot) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Snapshot) GetTotalShares() int64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *Snapshot) GetCreatedAt() *timestamppb.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Snapshot) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func init() {
	proto.RegisterEnum("volumefi.cronchain.valset.State", State_name, State_value)
	proto.RegisterType((*Validator)(nil), "volumefi.cronchain.valset.Validator")
	proto.RegisterType((*Snapshot)(nil), "volumefi.cronchain.valset.Snapshot")
}

func init() { proto.RegisterFile("valset/snapshot.proto", fileDescriptor_0adf39ac9845c7db) }

var fileDescriptor_0adf39ac9845c7db = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x6a, 0xdb, 0x30,
	0x1c, 0xc6, 0xad, 0xc4, 0x09, 0xad, 0x52, 0xba, 0x55, 0x74, 0xc3, 0xcd, 0xc1, 0x31, 0x65, 0x0c,
	0x33, 0x36, 0x89, 0x66, 0x30, 0x76, 0x6d, 0x97, 0x0d, 0x72, 0xc9, 0xc0, 0x19, 0x3b, 0xf4, 0x52,
	0x64, 0x47, 0xb5, 0x4d, 0x6d, 0x29, 0x58, 0xff, 0x84, 0xe5, 0x2d, 0xf6, 0x28, 0x7b, 0x8c, 0x1e,
	0x7b, 0x1c, 0x83, 0x95, 0x91, 0xbc, 0xc8, 0x88, 0x6c, 0xa7, 0xd9, 0xca, 0x76, 0xe8, 0xc9, 0xfe,
	0x5b, 0x9f, 0xf4, 0x7d, 0xdf, 0x0f, 0x0b, 0x3f, 0x99, 0xf3, 0x4c, 0x0b, 0x60, 0x5a, 0xf2, 0xa9,
	0x4e, 0x14, 0xd0, 0x69, 0xa1, 0x40, 0x91, 0xa3, 0xb9, 0xca, 0x66, 0xb9, 0xb8, 0x4c, 0x69, 0x54,
	0x28, 0x19, 0x25, 0x3c, 0x95, 0xb4, 0x54, 0x76, 0x0f, 0x63, 0x15, 0x2b, 0xa3, 0x62, 0xeb, 0xb7,
	0x72, 0x43, 0xb7, 0x17, 0x2b, 0x15, 0x67, 0x82, 0x99, 0x29, 0x9c, 0x5d, 0x32, 0x48, 0x73, 0xa1,
	0x81, 0xe7, 0xd3, 0x4a, 0x70, 0xf4, 0xb7, 0x80, 0xcb, 0x45, 0xb5, 0xe4, 0x46, 0x4a, 0xe7, 0x4a,
	0xb3, 0x90, 0x6b, 0xc1, 0xe6, 0x27, 0xa1, 0x00, 0x7e, 0xc2, 0x22, 0x95, 0xca, 0x72, 0xfd, 0xf8,
	0x27, 0xc2, 0xbb, 0x9f, 0x79, 0x96, 0x4e, 0x38, 0xa8, 0x82, 0xec, 0xe3, 0xc6, 0x70, 0xe0, 0x20,
	0x0f, 0xf9, 0x76, 0xd0, 0x18, 0x0e, 0xc8, 0x08, 0x63, 0x9d, 0xf0, 0x42, 0xbc, 0x53, 0x33, 0x09,
	0x4e, 0xc3, 0x43, 0xfe, 0xde, 0x19, 0xbd, 0xbe, 0xed, 0x59, 0x3f, 0x6e, 0x7b, 0xcf, 0xe3, 0x14,
	0x92, 0x59, 0x48, 0x23, 0x95, 0xb3, 0xca, 0xa4, 0x7c, 0xbc, 0xd2, 0x93, 0x2b, 0x06, 0x8b, 0xa9,
	0xd0, 0x74, 0x28, 0x21, 0xd8, 0x3a, 0x81, 0xbc, 0xc5, 0x7b, 0x7a, 0x72, 0xb5, 0xf1, 0x73, 0x9a,
	0x1e, 0xf2, 0x3b, 0xfd, 0x43, 0x5a, 0xe6, 0xa7, 0x75, 0x7e, 0x7a, 0x2a, 0x17, 0xc1, 0x1f, 0x4a,
	0xf2, 0x06, 0xb7, 0x34, 0x70, 0x10, 0x8e, 0xed, 0x21, 0x7f, 0xbf, 0xef, 0xd1, 0x7f, 0x42, 0xa4,
	0xe3, 0xb5, 0x2e, 0x28, 0xe5, 0xc7, 0xdf, 0x1a, 0x78, 0x67, 0x5c, 0xf1, 0xbf, 0x57, 0xef, 0x29,
	0x6e, 0x27, 0x22, 0x8d, 0x93, 0xb2, 0x9a, 0x1d, 0x54, 0x13, 0xf1, 0x70, 0x07, 0x14, 0xf0, 0x6c,
	0xbc, 0x4e, 0xae, 0x4d, 0xca, 0x66, 0xb0, 0xfd, 0x89, 0x9c, 0xe3, 0x03, 0x33, 0x5e, 0x98, 0x72,
	0x17, 0x91, 0xe1, 0x63, 0x3f, 0x88, 0xcf, 0xa3, 0xbb, 0x73, 0x6b, 0x48, 0xbb, 0x51, 0x21, 0x38,
	0x88, 0xc9, 0x29, 0x38, 0x2d, 0x43, 0xa8, 0x7b, 0x8f, 0xd0, 0xa7, 0xfa, 0x17, 0x08, 0xee, 0xc4,
	0x64, 0x80, 0xf1, 0xbc, 0x26, 0xa6, 0x9d, 0xb6, 0xd7, 0xf4, 0x3b, 0xfd, 0x67, 0xff, 0x21, 0xb5,
	0xc1, 0x1b, 0x6c, 0xed, 0x7b, 0x71, 0x80, 0x5b, 0x06, 0x21, 0xd9, 0xc1, 0xf6, 0xe8, 0xe3, 0xe8,
	0xfd, 0x63, 0xeb, 0xec, 0xc3, 0xf5, 0xd2, 0x45, 0x37, 0x4b, 0x17, 0xfd, 0x5a, 0xba, 0xe8, 0xeb,
	0xca, 0xb5, 0x6e, 0x56, 0xae, 0xf5, 0x7d, 0xe5, 0x5a, 0xe7, 0x2f, 0xb7, 0x5a, 0xd6, 0x46, 0x6c,
	0x63, 0xc4, 0xbe, 0xb0, 0xea, 0x0e, 0x98, 0xbe, 0x61, 0xdb, 0xe4, 0x7f, 0xfd, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x29, 0xb5, 0x43, 0xc0, 0x1a, 0x03, 0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.SdkValidator != nil {
		{
			size, err := m.SdkValidator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.ShareCount.Size()
		i -= size
		if _, err := m.ShareCount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSnapshot(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ID != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSnapshot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSnapshot(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.TotalShareCount.Size()
		i -= size
		if _, err := m.TotalShareCount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSnapshot(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.TotalShares != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSnapshot(dAtA []byte, offset int, v uint64) int {
	offset -= sovSnapshot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSnapshot(uint64(m.ID))
	}
	l = m.ShareCount.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	if m.SdkValidator != nil {
		l = m.SdkValidator.Size()
		n += 1 + l + sovSnapshot(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovSnapshot(uint64(m.State))
	}
	return n
}

func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSnapshot(uint64(m.ID))
	}
	if m.Height != 0 {
		n += 1 + sovSnapshot(uint64(m.Height))
	}
	if m.TotalShares != 0 {
		n += 1 + sovSnapshot(uint64(m.TotalShares))
	}
	l = m.TotalShareCount.Size()
	n += 1 + l + sovSnapshot(uint64(l))
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovSnapshot(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovSnapshot(uint64(l))
		}
	}
	return n
}

func sovSnapshot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSnapshot(x uint64) (n int) {
	return sovSnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdkValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SdkValidator == nil {
				m.SdkValidator = &types.Any{}
			}
			if err := m.SdkValidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShareCount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShareCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timestamppb.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnapshot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSnapshot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSnapshot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSnapshot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSnapshot = fmt.Errorf("proto: unexpected end of group")
)
