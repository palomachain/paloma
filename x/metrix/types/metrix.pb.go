// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/metrix/metrix.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	cosmossdk_io_math "cosmossdk.io/math"

	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorMetrics defines a validator's collected metrics to be
// used during relayer selection.
type ValidatorMetrics struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Percentage of validator uptime within the signed blocks window.
	// Higher is better ([0,1]).
	Uptime cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=uptime,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"uptime"`
	// Percent of validator's relay success rate over the last
	// params.relay_metrics_window messages. Higher is better ([0,1]).
	SuccessRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=success_rate,json=successRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"success_rate"`
	// A median value in ms of the relay execution time over the
	// last params.relay_metrics_window messages. Lower is better, 0 means
	// no collected data.
	ExecutionTime cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=execution_time,json=executionTime,proto3,customtype=cosmossdk.io/math.Int" json:"execution_time"`
	// The value of the relaying fee the relayer has specified for themselves.
	// Lower is better, 0 means no fee.
	Fee cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=fee,proto3,customtype=cosmossdk.io/math.Int" json:"fee"`
	// Artificial decimal value representing the total amount of optional support
	// features that this validator has enabled. Higher is better ([0,1]).
	FeatureSet cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=feature_set,json=featureSet,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"feature_set"`
}

func (m *ValidatorMetrics) Reset()         { *m = ValidatorMetrics{} }
func (m *ValidatorMetrics) String() string { return proto.CompactTextString(m) }
func (*ValidatorMetrics) ProtoMessage()    {}
func (*ValidatorMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb382b6ba8ce0e33, []int{0}
}

func (m *ValidatorMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ValidatorMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ValidatorMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorMetrics.Merge(m, src)
}

func (m *ValidatorMetrics) XXX_Size() int {
	return m.Size()
}

func (m *ValidatorMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorMetrics proto.InternalMessageInfo

func (m *ValidatorMetrics) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*ValidatorMetrics)(nil), "palomachain.paloma.metrix.ValidatorMetrics")
}

func init() {
	proto.RegisterFile("palomachain/paloma/metrix/metrix.proto", fileDescriptor_bb382b6ba8ce0e33)
}

var fileDescriptor_bb382b6ba8ce0e33 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x31, 0x6b, 0x14, 0x41,
	0x14, 0xc7, 0x6f, 0x3d, 0x3d, 0x75, 0xa2, 0xa2, 0x4b, 0x84, 0x4d, 0x94, 0x3d, 0xb1, 0x10, 0x09,
	0x66, 0xc7, 0x28, 0x58, 0xd8, 0x79, 0x04, 0x21, 0xa0, 0x16, 0x17, 0x31, 0x68, 0x73, 0xbc, 0x9b,
	0x7d, 0xd9, 0x1b, 0xbc, 0x99, 0x59, 0x67, 0xde, 0x4a, 0xee, 0x5b, 0x58, 0x5a, 0xa6, 0xb4, 0xb4,
	0xc8, 0x87, 0x48, 0x19, 0x52, 0x89, 0x45, 0x90, 0xbb, 0x42, 0x5b, 0xbf, 0x81, 0xec, 0xce, 0x9c,
	0x04, 0x14, 0x0b, 0xaf, 0xd9, 0x7d, 0xbb, 0xef, 0xf7, 0xff, 0xcd, 0xdb, 0x65, 0x86, 0xdd, 0x29,
	0x61, 0x6c, 0x14, 0x88, 0x11, 0x48, 0xcd, 0x7d, 0xcd, 0x15, 0x92, 0x95, 0x7b, 0xe1, 0x96, 0x95,
	0xd6, 0x90, 0x89, 0x57, 0x4e, 0x71, 0x99, 0xaf, 0x33, 0x0f, 0xac, 0x2e, 0x17, 0xa6, 0x30, 0x0d,
	0xc5, 0xeb, 0xca, 0x07, 0x56, 0x6f, 0x16, 0xc6, 0x14, 0x63, 0xe4, 0x50, 0x4a, 0x0e, 0x5a, 0x1b,
	0x02, 0x92, 0x46, 0xbb, 0xd0, 0x5d, 0x13, 0xc6, 0x29, 0xe3, 0xf8, 0x10, 0x1c, 0xf2, 0x77, 0x15,
	0xda, 0x09, 0x7f, 0xbf, 0x31, 0x44, 0x82, 0x0d, 0x5e, 0x42, 0x21, 0x75, 0x03, 0x07, 0x76, 0xc5,
	0xb3, 0x03, 0xbf, 0x84, 0x7f, 0x08, 0xad, 0x7f, 0x4c, 0x5f, 0x82, 0x05, 0x35, 0xe7, 0xae, 0x81,
	0x92, 0xda, 0xf0, 0xe6, 0xea, 0x5f, 0xdd, 0xfe, 0xd9, 0x66, 0x57, 0x5f, 0xc1, 0x58, 0xe6, 0x40,
	0xc6, 0x3e, 0xaf, 0x33, 0xc2, 0xc5, 0x0f, 0xd8, 0x79, 0xc8, 0x73, 0x8b, 0xce, 0x25, 0xd1, 0xad,
	0xe8, 0xee, 0xc5, 0x5e, 0x72, 0x7c, 0xb0, 0xbe, 0x1c, 0x96, 0x7c, 0xe2, 0x3b, 0xdb, 0x64, 0xa5,
	0x2e, 0xfa, 0x73, 0x30, 0x7e, 0xc1, 0x3a, 0x55, 0x49, 0x52, 0x61, 0x72, 0xa6, 0x89, 0x3c, 0x3a,
	0x3c, 0xe9, 0xb6, 0xbe, 0x9e, 0x74, 0x6f, 0xf8, 0x98, 0xcb, 0xdf, 0x66, 0xd2, 0x70, 0x05, 0x34,
	0xca, 0x9e, 0x61, 0x01, 0x62, 0xb2, 0x89, 0xe2, 0xf8, 0x60, 0x9d, 0x05, 0xeb, 0x26, 0x8a, 0x4f,
	0xdf, 0x3f, 0xaf, 0x45, 0xfd, 0x60, 0x89, 0x5f, 0xb3, 0x4b, 0xae, 0x12, 0x02, 0x9d, 0x1b, 0x58,
	0x20, 0x4c, 0xda, 0x0b, 0x59, 0x97, 0x82, 0xab, 0x0f, 0x84, 0xf1, 0x0e, 0xbb, 0x82, 0x7b, 0x28,
	0xaa, 0xfa, 0xe7, 0x0e, 0x9a, 0x91, 0xcf, 0x36, 0xf2, 0xfb, 0x41, 0x7e, 0xfd, 0x4f, 0xf9, 0x96,
	0xa6, 0x53, 0xda, 0x2d, 0x4d, 0x5e, 0x7b, 0xf9, 0xb7, 0xe7, 0x65, 0x3d, 0x73, 0x8f, 0xb5, 0x77,
	0x11, 0x93, 0x73, 0xff, 0x69, 0xab, 0xc3, 0xf1, 0x0e, 0x5b, 0xda, 0x45, 0xa0, 0xca, 0xe2, 0xc0,
	0x21, 0x25, 0x9d, 0x85, 0x3e, 0x9b, 0x05, 0xd5, 0x36, 0xd2, 0xe3, 0x0b, 0x1f, 0xf7, 0xbb, 0xd1,
	0x8f, 0xfd, 0x6e, 0xd4, 0x7b, 0x7a, 0x38, 0x4d, 0xa3, 0xa3, 0x69, 0x1a, 0x7d, 0x9b, 0xa6, 0xd1,
	0x87, 0x59, 0xda, 0x3a, 0x9a, 0xa5, 0xad, 0x2f, 0xb3, 0xb4, 0xf5, 0xe6, 0x5e, 0x21, 0x69, 0x54,
	0x0d, 0x33, 0x61, 0x14, 0xff, 0xcb, 0x9e, 0x9a, 0x1f, 0x06, 0x4e, 0x93, 0x12, 0xdd, 0xb0, 0xd3,
	0x6c, 0xa1, 0x87, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x98, 0xdb, 0xdc, 0x4d, 0x3d, 0x03, 0x00,
	0x00,
}

func (this *ValidatorMetrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorMetrics)
	if !ok {
		that2, ok := that.(ValidatorMetrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.Uptime.Equal(that1.Uptime) {
		return false
	}
	if !this.SuccessRate.Equal(that1.SuccessRate) {
		return false
	}
	if !this.ExecutionTime.Equal(that1.ExecutionTime) {
		return false
	}
	if !this.Fee.Equal(that1.Fee) {
		return false
	}
	if !this.FeatureSet.Equal(that1.FeatureSet) {
		return false
	}
	return true
}

func (m *ValidatorMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeatureSet.Size()
		i -= size
		if _, err := m.FeatureSet.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetrix(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetrix(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.ExecutionTime.Size()
		i -= size
		if _, err := m.ExecutionTime.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetrix(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.SuccessRate.Size()
		i -= size
		if _, err := m.SuccessRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetrix(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Uptime.Size()
		i -= size
		if _, err := m.Uptime.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMetrix(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMetrix(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetrix(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetrix(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *ValidatorMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMetrix(uint64(l))
	}
	l = m.Uptime.Size()
	n += 1 + l + sovMetrix(uint64(l))
	l = m.SuccessRate.Size()
	n += 1 + l + sovMetrix(uint64(l))
	l = m.ExecutionTime.Size()
	n += 1 + l + sovMetrix(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovMetrix(uint64(l))
	l = m.FeatureSet.Size()
	n += 1 + l + sovMetrix(uint64(l))
	return n
}

func sovMetrix(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozMetrix(x uint64) (n int) {
	return sovMetrix(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *ValidatorMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrix
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Uptime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SuccessRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecutionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrix
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrix
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrix
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeatureSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrix(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetrix
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipMetrix(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetrix
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrix
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrix
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetrix
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetrix
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetrix
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetrix        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetrix          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetrix = fmt.Errorf("proto: unexpected end of group")
)
