// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: concensus/concensus_queue.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueuedSignedMessage struct {
	Id      uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg     *types.Any `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Signers []*Signer  `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *QueuedSignedMessage) Reset()         { *m = QueuedSignedMessage{} }
func (m *QueuedSignedMessage) String() string { return proto.CompactTextString(m) }
func (*QueuedSignedMessage) ProtoMessage()    {}
func (*QueuedSignedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2c91abaf6298ce, []int{0}
}
func (m *QueuedSignedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedSignedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedSignedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedSignedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedSignedMessage.Merge(m, src)
}
func (m *QueuedSignedMessage) XXX_Size() int {
	return m.Size()
}
func (m *QueuedSignedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedSignedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedSignedMessage proto.InternalMessageInfo

func (m *QueuedSignedMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueuedSignedMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *QueuedSignedMessage) GetSigners() []*Signer {
	if m != nil {
		return m.Signers
	}
	return nil
}

type Signer struct {
	ValAddress string     `protobuf:"bytes,1,opt,name=valAddress,proto3" json:"valAddress,omitempty"`
	Pubkey     *types.Any `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature  []byte     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	SignMode   int32      `protobuf:"varint,4,opt,name=signMode,proto3" json:"signMode,omitempty"`
	Sequence   uint64     `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *Signer) Reset()         { *m = Signer{} }
func (m *Signer) String() string { return proto.CompactTextString(m) }
func (*Signer) ProtoMessage()    {}
func (*Signer) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2c91abaf6298ce, []int{1}
}
func (m *Signer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signer.Merge(m, src)
}
func (m *Signer) XXX_Size() int {
	return m.Size()
}
func (m *Signer) XXX_DiscardUnknown() {
	xxx_messageInfo_Signer.DiscardUnknown(m)
}

var xxx_messageInfo_Signer proto.InternalMessageInfo

func (m *Signer) GetValAddress() string {
	if m != nil {
		return m.ValAddress
	}
	return ""
}

func (m *Signer) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Signer) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Signer) GetSignMode() int32 {
	if m != nil {
		return m.SignMode
	}
	return 0
}

func (m *Signer) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterType((*QueuedSignedMessage)(nil), "volumefi.cronchain.concensus.QueuedSignedMessage")
	proto.RegisterType((*Signer)(nil), "volumefi.cronchain.concensus.Signer")
}

func init() { proto.RegisterFile("concensus/concensus_queue.proto", fileDescriptor_7d2c91abaf6298ce) }

var fileDescriptor_7d2c91abaf6298ce = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0xac, 0x9b, 0xb6, 0x50, 0x17, 0x31, 0x18, 0x86, 0x50, 0x55, 0x26, 0xaa, 0x10, 0xca, 0x80,
	0x6c, 0xa9, 0xec, 0x48, 0x65, 0x63, 0xe8, 0x40, 0xd8, 0x58, 0x50, 0x12, 0xbf, 0xa6, 0x11, 0xad,
	0xdd, 0xc6, 0x71, 0x45, 0x3e, 0x02, 0x89, 0x0f, 0xe1, 0x43, 0x18, 0x3b, 0x32, 0xa2, 0xf6, 0x47,
	0x50, 0x5c, 0x9a, 0x32, 0x75, 0xf3, 0x9d, 0xef, 0xdd, 0x3b, 0xdd, 0xc3, 0x97, 0xb1, 0x92, 0x31,
	0x48, 0x6d, 0x34, 0xaf, 0x5e, 0x2f, 0x0b, 0x03, 0x06, 0xd8, 0x3c, 0x53, 0xb9, 0x22, 0xbd, 0xa5,
	0x9a, 0x9a, 0x19, 0x8c, 0x53, 0x16, 0x67, 0x4a, 0xc6, 0x93, 0x30, 0x95, 0xac, 0x52, 0x76, 0x2f,
	0x12, 0xa5, 0x92, 0x29, 0x70, 0xab, 0x8d, 0xcc, 0x98, 0x87, 0xb2, 0xd8, 0x0e, 0xf6, 0xdf, 0x11,
	0x3e, 0x7b, 0x2c, 0x8d, 0xc4, 0x53, 0x9a, 0x48, 0x10, 0x23, 0xd0, 0x3a, 0x4c, 0x80, 0x9c, 0xe2,
	0x7a, 0x2a, 0x5c, 0xe4, 0x21, 0xbf, 0x11, 0xd4, 0x53, 0x41, 0xae, 0xb1, 0x33, 0xd3, 0x89, 0x5b,
	0xf7, 0x90, 0xdf, 0x19, 0x9c, 0xb3, 0xad, 0x21, 0xdb, 0x19, 0xb2, 0xa1, 0x2c, 0x82, 0x52, 0x40,
	0xee, 0xf0, 0x91, 0x2e, 0x8d, 0x32, 0xed, 0x3a, 0x9e, 0xe3, 0x77, 0x06, 0x57, 0xec, 0x50, 0x34,
	0x66, 0xb7, 0x66, 0xc1, 0x6e, 0xa8, 0xff, 0x89, 0x70, 0x6b, 0xcb, 0x11, 0x8a, 0xf1, 0x32, 0x9c,
	0x0e, 0x85, 0xc8, 0x40, 0x6b, 0x1b, 0xa5, 0x1d, 0xfc, 0x63, 0xc8, 0x0d, 0x6e, 0xcd, 0x4d, 0xf4,
	0x0a, 0xc5, 0xc1, 0x54, 0x7f, 0x1a, 0xd2, 0xc3, 0xed, 0x72, 0x47, 0x98, 0x9b, 0x0c, 0x5c, 0xc7,
	0x43, 0xfe, 0x49, 0xb0, 0x27, 0x48, 0x17, 0x1f, 0x97, 0x60, 0xa4, 0x04, 0xb8, 0x0d, 0x0f, 0xf9,
	0xcd, 0xa0, 0xc2, 0xf6, 0x0f, 0x16, 0x06, 0x64, 0x0c, 0x6e, 0xd3, 0x16, 0x52, 0xe1, 0xfb, 0x87,
	0xaf, 0x35, 0x45, 0xab, 0x35, 0x45, 0x3f, 0x6b, 0x8a, 0x3e, 0x36, 0xb4, 0xb6, 0xda, 0xd0, 0xda,
	0xf7, 0x86, 0xd6, 0x9e, 0x79, 0x92, 0xe6, 0x13, 0x13, 0xb1, 0x58, 0xcd, 0xf8, 0xae, 0x01, 0x5e,
	0x35, 0xc0, 0xdf, 0xf6, 0x87, 0xe4, 0x79, 0x31, 0x07, 0x1d, 0xb5, 0x6c, 0xec, 0xdb, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xa1, 0x60, 0x19, 0x5e, 0xec, 0x01, 0x00, 0x00,
}

func (m *QueuedSignedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedSignedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedSignedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConcensusQueue(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConcensusQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintConcensusQueue(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Signer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintConcensusQueue(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x28
	}
	if m.SignMode != 0 {
		i = encodeVarintConcensusQueue(dAtA, i, uint64(m.SignMode))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintConcensusQueue(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConcensusQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintConcensusQueue(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConcensusQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovConcensusQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueuedSignedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovConcensusQueue(uint64(m.Id))
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovConcensusQueue(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, e := range m.Signers {
			l = e.Size()
			n += 1 + l + sovConcensusQueue(uint64(l))
		}
	}
	return n
}

func (m *Signer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovConcensusQueue(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovConcensusQueue(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovConcensusQueue(uint64(l))
	}
	if m.SignMode != 0 {
		n += 1 + sovConcensusQueue(uint64(m.SignMode))
	}
	if m.Sequence != 0 {
		n += 1 + sovConcensusQueue(uint64(m.Sequence))
	}
	return n
}

func sovConcensusQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConcensusQueue(x uint64) (n int) {
	return sovConcensusQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueuedSignedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConcensusQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedSignedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedSignedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, &Signer{})
			if err := m.Signers[len(m.Signers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConcensusQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConcensusQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignMode", wireType)
			}
			m.SignMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConcensusQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConcensusQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConcensusQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConcensusQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConcensusQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConcensusQueue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConcensusQueue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConcensusQueue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConcensusQueue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConcensusQueue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConcensusQueue = fmt.Errorf("proto: unexpected end of group")
)
