// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/consensus/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/palomachain/paloma/x/valset/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddMessagesSignatures struct {
	Creator        string                       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"` // Deprecated: Do not use.
	SignedMessages []*ConsensusMessageSignature `protobuf:"bytes,2,rep,name=signedMessages,proto3" json:"signedMessages,omitempty"`
	Metadata       types.MsgMetadata            `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgAddMessagesSignatures) Reset()         { *m = MsgAddMessagesSignatures{} }
func (m *MsgAddMessagesSignatures) String() string { return proto.CompactTextString(m) }
func (*MsgAddMessagesSignatures) ProtoMessage()    {}
func (*MsgAddMessagesSignatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a053a9b8cda05fe, []int{0}
}

func (m *MsgAddMessagesSignatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgAddMessagesSignatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMessagesSignatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgAddMessagesSignatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMessagesSignatures.Merge(m, src)
}

func (m *MsgAddMessagesSignatures) XXX_Size() int {
	return m.Size()
}

func (m *MsgAddMessagesSignatures) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMessagesSignatures.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMessagesSignatures proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *MsgAddMessagesSignatures) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddMessagesSignatures) GetSignedMessages() []*ConsensusMessageSignature {
	if m != nil {
		return m.SignedMessages
	}
	return nil
}

func (m *MsgAddMessagesSignatures) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type ConsensusMessageSignature struct {
	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QueueTypeName   string `protobuf:"bytes,2,opt,name=queueTypeName,proto3" json:"queueTypeName,omitempty"`
	Signature       []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	SignedByAddress string `protobuf:"bytes,5,opt,name=signedByAddress,proto3" json:"signedByAddress,omitempty"`
}

func (m *ConsensusMessageSignature) Reset()         { *m = ConsensusMessageSignature{} }
func (m *ConsensusMessageSignature) String() string { return proto.CompactTextString(m) }
func (*ConsensusMessageSignature) ProtoMessage()    {}
func (*ConsensusMessageSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a053a9b8cda05fe, []int{1}
}

func (m *ConsensusMessageSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ConsensusMessageSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusMessageSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ConsensusMessageSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusMessageSignature.Merge(m, src)
}

func (m *ConsensusMessageSignature) XXX_Size() int {
	return m.Size()
}

func (m *ConsensusMessageSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusMessageSignature.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusMessageSignature proto.InternalMessageInfo

func (m *ConsensusMessageSignature) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ConsensusMessageSignature) GetQueueTypeName() string {
	if m != nil {
		return m.QueueTypeName
	}
	return ""
}

func (m *ConsensusMessageSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ConsensusMessageSignature) GetSignedByAddress() string {
	if m != nil {
		return m.SignedByAddress
	}
	return ""
}

type MsgAddMessagesSignaturesResponse struct{}

func (m *MsgAddMessagesSignaturesResponse) Reset()         { *m = MsgAddMessagesSignaturesResponse{} }
func (m *MsgAddMessagesSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddMessagesSignaturesResponse) ProtoMessage()    {}
func (*MsgAddMessagesSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a053a9b8cda05fe, []int{2}
}

func (m *MsgAddMessagesSignaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgAddMessagesSignaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddMessagesSignaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgAddMessagesSignaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddMessagesSignaturesResponse.Merge(m, src)
}

func (m *MsgAddMessagesSignaturesResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgAddMessagesSignaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddMessagesSignaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddMessagesSignaturesResponse proto.InternalMessageInfo

type MsgAddEvidence struct {
	Creator       string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"` // Deprecated: Do not use.
	Proof         *types1.Any       `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	MessageID     uint64            `protobuf:"varint,3,opt,name=messageID,proto3" json:"messageID,omitempty"`
	QueueTypeName string            `protobuf:"bytes,4,opt,name=queueTypeName,proto3" json:"queueTypeName,omitempty"`
	Metadata      types.MsgMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgAddEvidence) Reset()         { *m = MsgAddEvidence{} }
func (m *MsgAddEvidence) String() string { return proto.CompactTextString(m) }
func (*MsgAddEvidence) ProtoMessage()    {}
func (*MsgAddEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a053a9b8cda05fe, []int{3}
}

func (m *MsgAddEvidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgAddEvidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddEvidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgAddEvidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddEvidence.Merge(m, src)
}

func (m *MsgAddEvidence) XXX_Size() int {
	return m.Size()
}

func (m *MsgAddEvidence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddEvidence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddEvidence proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *MsgAddEvidence) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddEvidence) GetProof() *types1.Any {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MsgAddEvidence) GetMessageID() uint64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *MsgAddEvidence) GetQueueTypeName() string {
	if m != nil {
		return m.QueueTypeName
	}
	return ""
}

func (m *MsgAddEvidence) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type MsgAddEvidenceResponse struct{}

func (m *MsgAddEvidenceResponse) Reset()         { *m = MsgAddEvidenceResponse{} }
func (m *MsgAddEvidenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddEvidenceResponse) ProtoMessage()    {}
func (*MsgAddEvidenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a053a9b8cda05fe, []int{4}
}

func (m *MsgAddEvidenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgAddEvidenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddEvidenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgAddEvidenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddEvidenceResponse.Merge(m, src)
}

func (m *MsgAddEvidenceResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgAddEvidenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddEvidenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddEvidenceResponse proto.InternalMessageInfo

type MsgSetPublicAccessData struct {
	Creator       string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"` // Deprecated: Do not use.
	MessageID     uint64            `protobuf:"varint,2,opt,name=messageID,proto3" json:"messageID,omitempty"`
	QueueTypeName string            `protobuf:"bytes,3,opt,name=queueTypeName,proto3" json:"queueTypeName,omitempty"`
	Data          []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Metadata      types.MsgMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgSetPublicAccessData) Reset()         { *m = MsgSetPublicAccessData{} }
func (m *MsgSetPublicAccessData) String() string { return proto.CompactTextString(m) }
func (*MsgSetPublicAccessData) ProtoMessage()    {}
func (*MsgSetPublicAccessData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a053a9b8cda05fe, []int{5}
}

func (m *MsgSetPublicAccessData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetPublicAccessData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPublicAccessData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetPublicAccessData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPublicAccessData.Merge(m, src)
}

func (m *MsgSetPublicAccessData) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetPublicAccessData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPublicAccessData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPublicAccessData proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *MsgSetPublicAccessData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetPublicAccessData) GetMessageID() uint64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *MsgSetPublicAccessData) GetQueueTypeName() string {
	if m != nil {
		return m.QueueTypeName
	}
	return ""
}

func (m *MsgSetPublicAccessData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MsgSetPublicAccessData) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type MsgSetPublicAccessDataResponse struct{}

func (m *MsgSetPublicAccessDataResponse) Reset()         { *m = MsgSetPublicAccessDataResponse{} }
func (m *MsgSetPublicAccessDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPublicAccessDataResponse) ProtoMessage()    {}
func (*MsgSetPublicAccessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a053a9b8cda05fe, []int{6}
}

func (m *MsgSetPublicAccessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetPublicAccessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPublicAccessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetPublicAccessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPublicAccessDataResponse.Merge(m, src)
}

func (m *MsgSetPublicAccessDataResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetPublicAccessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPublicAccessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPublicAccessDataResponse proto.InternalMessageInfo

type MsgSetErrorData struct {
	Creator       string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"` // Deprecated: Do not use.
	MessageID     uint64            `protobuf:"varint,2,opt,name=messageID,proto3" json:"messageID,omitempty"`
	QueueTypeName string            `protobuf:"bytes,3,opt,name=queueTypeName,proto3" json:"queueTypeName,omitempty"`
	Data          []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Metadata      types.MsgMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgSetErrorData) Reset()         { *m = MsgSetErrorData{} }
func (m *MsgSetErrorData) String() string { return proto.CompactTextString(m) }
func (*MsgSetErrorData) ProtoMessage()    {}
func (*MsgSetErrorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a053a9b8cda05fe, []int{7}
}

func (m *MsgSetErrorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetErrorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetErrorData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetErrorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetErrorData.Merge(m, src)
}

func (m *MsgSetErrorData) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetErrorData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetErrorData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetErrorData proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *MsgSetErrorData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetErrorData) GetMessageID() uint64 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *MsgSetErrorData) GetQueueTypeName() string {
	if m != nil {
		return m.QueueTypeName
	}
	return ""
}

func (m *MsgSetErrorData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MsgSetErrorData) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type MsgSetErrorDataResponse struct{}

func (m *MsgSetErrorDataResponse) Reset()         { *m = MsgSetErrorDataResponse{} }
func (m *MsgSetErrorDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetErrorDataResponse) ProtoMessage()    {}
func (*MsgSetErrorDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a053a9b8cda05fe, []int{8}
}

func (m *MsgSetErrorDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *MsgSetErrorDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetErrorDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *MsgSetErrorDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetErrorDataResponse.Merge(m, src)
}

func (m *MsgSetErrorDataResponse) XXX_Size() int {
	return m.Size()
}

func (m *MsgSetErrorDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetErrorDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetErrorDataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddMessagesSignatures)(nil), "palomachain.paloma.consensus.MsgAddMessagesSignatures")
	proto.RegisterType((*ConsensusMessageSignature)(nil), "palomachain.paloma.consensus.ConsensusMessageSignature")
	proto.RegisterType((*MsgAddMessagesSignaturesResponse)(nil), "palomachain.paloma.consensus.MsgAddMessagesSignaturesResponse")
	proto.RegisterType((*MsgAddEvidence)(nil), "palomachain.paloma.consensus.MsgAddEvidence")
	proto.RegisterType((*MsgAddEvidenceResponse)(nil), "palomachain.paloma.consensus.MsgAddEvidenceResponse")
	proto.RegisterType((*MsgSetPublicAccessData)(nil), "palomachain.paloma.consensus.MsgSetPublicAccessData")
	proto.RegisterType((*MsgSetPublicAccessDataResponse)(nil), "palomachain.paloma.consensus.MsgSetPublicAccessDataResponse")
	proto.RegisterType((*MsgSetErrorData)(nil), "palomachain.paloma.consensus.MsgSetErrorData")
	proto.RegisterType((*MsgSetErrorDataResponse)(nil), "palomachain.paloma.consensus.MsgSetErrorDataResponse")
}

func init() {
	proto.RegisterFile("palomachain/paloma/consensus/tx.proto", fileDescriptor_9a053a9b8cda05fe)
}

var fileDescriptor_9a053a9b8cda05fe = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb3, 0x8e, 0x0b, 0x74, 0x52, 0x5a, 0xc9, 0x14, 0x70, 0xad, 0xc8, 0x44, 0x11, 0x54,
	0x11, 0x02, 0x5b, 0x0a, 0x5f, 0x17, 0x84, 0x94, 0xd0, 0x4a, 0xf4, 0x10, 0x84, 0x5c, 0x4e, 0x5c,
	0xd0, 0xc6, 0xde, 0xba, 0x96, 0x62, 0xaf, 0xeb, 0x5d, 0x57, 0xcd, 0x23, 0x20, 0x21, 0xc1, 0x95,
	0x37, 0xea, 0xb1, 0xdc, 0x7a, 0x42, 0x28, 0xb9, 0xf0, 0x18, 0x28, 0xbb, 0xb1, 0x9b, 0x04, 0xa7,
	0x69, 0x0b, 0x27, 0x6e, 0xe3, 0xf1, 0x7f, 0x3e, 0x7e, 0x3b, 0xe3, 0x35, 0x3c, 0x88, 0x71, 0x8f,
	0x86, 0xd8, 0xdd, 0xc7, 0x41, 0x64, 0x4b, 0xdb, 0x76, 0x69, 0xc4, 0x48, 0xc4, 0x52, 0x66, 0xf3,
	0x23, 0x2b, 0x4e, 0x28, 0xa7, 0x5a, 0x75, 0x42, 0x66, 0x49, 0xdb, 0xca, 0x65, 0xc6, 0xba, 0x4f,
	0x7d, 0x2a, 0x84, 0xf6, 0xc8, 0x92, 0x31, 0xc6, 0x86, 0x4f, 0xa9, 0xdf, 0x23, 0xb6, 0x78, 0xea,
	0xa6, 0x7b, 0x36, 0x8e, 0xfa, 0xe3, 0x57, 0x9b, 0x05, 0x55, 0x0f, 0x71, 0x8f, 0x11, 0x6e, 0xbb,
	0x34, 0x0c, 0x69, 0x24, 0x75, 0xf5, 0x21, 0x02, 0xbd, 0xc3, 0xfc, 0x96, 0xe7, 0x75, 0x08, 0x63,
	0xd8, 0x27, 0x6c, 0x37, 0xf0, 0x23, 0xcc, 0xd3, 0x84, 0x30, 0xad, 0x0a, 0xd7, 0xdd, 0x84, 0x60,
	0x4e, 0x13, 0x1d, 0xd5, 0x50, 0x63, 0xb9, 0xad, 0xe8, 0xc8, 0xc9, 0x5c, 0xda, 0x47, 0x58, 0x65,
	0x81, 0x1f, 0x91, 0x3c, 0x52, 0x57, 0x6a, 0xe5, 0x46, 0xa5, 0xf9, 0xc2, 0x3a, 0x0f, 0xc5, 0x7a,
	0x9d, 0x59, 0xe3, 0xb0, 0xbc, 0x9e, 0x33, 0x93, 0x4e, 0x7b, 0x03, 0x37, 0x42, 0xc2, 0xb1, 0x87,
	0x39, 0xd6, 0xcb, 0x35, 0xd4, 0xa8, 0x34, 0x37, 0x8b, 0x52, 0x4b, 0x2c, 0xab, 0xc3, 0xfc, 0xce,
	0x58, 0xdd, 0x56, 0x8f, 0x7f, 0xdc, 0x2b, 0x39, 0x79, 0x74, 0xfd, 0x1b, 0x82, 0x8d, 0xb9, 0x75,
	0xb5, 0x55, 0x50, 0x02, 0x4f, 0x10, 0xaa, 0x8e, 0x12, 0x78, 0xda, 0x7d, 0xb8, 0x79, 0x90, 0x92,
	0x94, 0xbc, 0xef, 0xc7, 0xe4, 0x2d, 0x0e, 0x89, 0xae, 0x8c, 0xe0, 0x9d, 0x69, 0xa7, 0x56, 0x85,
	0x65, 0x96, 0xa5, 0x10, 0xed, 0xad, 0x38, 0x67, 0x0e, 0xad, 0x01, 0x6b, 0x92, 0xa6, 0xdd, 0x6f,
	0x79, 0x5e, 0x42, 0x18, 0xd3, 0x97, 0x44, 0x96, 0x59, 0x77, 0xbd, 0x0e, 0xb5, 0x79, 0x03, 0x70,
	0x08, 0x8b, 0x47, 0x5d, 0xd7, 0x7f, 0x21, 0x58, 0x95, 0xa2, 0xed, 0xc3, 0xc0, 0x23, 0x91, 0x4b,
	0x16, 0xcc, 0xe6, 0x21, 0x2c, 0xc5, 0x09, 0xa5, 0x7b, 0xa2, 0xf5, 0x4a, 0x73, 0xdd, 0x92, 0x9b,
	0x62, 0x65, 0x9b, 0x62, 0xb5, 0xa2, 0xbe, 0x23, 0x25, 0x23, 0x90, 0x50, 0x96, 0xde, 0xd9, 0x12,
	0x20, 0xaa, 0x73, 0xe6, 0xf8, 0xf3, 0x30, 0xd4, 0xa2, 0xc3, 0x98, 0x1c, 0xd5, 0xd2, 0x5f, 0x8d,
	0x4a, 0x87, 0x3b, 0xd3, 0xa4, 0xf9, 0x21, 0x9c, 0x22, 0xf1, 0x6a, 0x97, 0xf0, 0x77, 0x69, 0xb7,
	0x17, 0xb8, 0x2d, 0xd7, 0x25, 0x8c, 0x6d, 0x61, 0x8e, 0x17, 0x1c, 0xc6, 0x14, 0xa0, 0xb2, 0x10,
	0xb0, 0x5c, 0x04, 0xa8, 0x81, 0x2a, 0xe0, 0x54, 0x31, 0x68, 0x61, 0xff, 0x43, 0xe8, 0x1a, 0x98,
	0xc5, 0x64, 0x39, 0xfc, 0x77, 0x04, 0x6b, 0x52, 0xb2, 0x9d, 0x24, 0x34, 0xf9, 0x2f, 0xa8, 0x37,
	0xe0, 0xee, 0x0c, 0x52, 0x86, 0xdb, 0xfc, 0xac, 0x42, 0xb9, 0xc3, 0x7c, 0xed, 0x0b, 0x82, 0xdb,
	0xc5, 0x77, 0xd3, 0xf3, 0xf3, 0x6f, 0x99, 0x79, 0x9f, 0x94, 0xf1, 0xea, 0x6a, 0x71, 0x59, 0x67,
	0xda, 0x01, 0x54, 0x26, 0x3f, 0xc3, 0x47, 0x17, 0x49, 0x97, 0xa9, 0x8d, 0xa7, 0x97, 0x51, 0xe7,
	0x25, 0x3f, 0x21, 0xb8, 0x55, 0xb4, 0xf5, 0x8b, 0xb3, 0x15, 0x44, 0x19, 0x2f, 0xaf, 0x12, 0x95,
	0xf7, 0xc2, 0x61, 0x65, 0x6a, 0x07, 0x1f, 0x5f, 0x24, 0x5b, 0x2e, 0x37, 0x9e, 0x5d, 0x4a, 0x9e,
	0x55, 0x6d, 0xef, 0x1c, 0x0f, 0x4c, 0x74, 0x32, 0x30, 0xd1, 0xcf, 0x81, 0x89, 0xbe, 0x0e, 0xcd,
	0xd2, 0xc9, 0xd0, 0x2c, 0x9d, 0x0e, 0xcd, 0xd2, 0x07, 0xdb, 0x0f, 0xf8, 0x7e, 0xda, 0xb5, 0x5c,
	0x1a, 0xda, 0x05, 0xbf, 0xbc, 0xa3, 0xc9, 0x5f, 0x6d, 0x3f, 0x26, 0xac, 0x7b, 0x4d, 0x5c, 0x81,
	0x4f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x76, 0xbe, 0xe0, 0x97, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddMessagesSignatures(ctx context.Context, in *MsgAddMessagesSignatures, opts ...grpc.CallOption) (*MsgAddMessagesSignaturesResponse, error)
	AddEvidence(ctx context.Context, in *MsgAddEvidence, opts ...grpc.CallOption) (*MsgAddEvidenceResponse, error)
	SetPublicAccessData(ctx context.Context, in *MsgSetPublicAccessData, opts ...grpc.CallOption) (*MsgSetPublicAccessDataResponse, error)
	SetErrorData(ctx context.Context, in *MsgSetErrorData, opts ...grpc.CallOption) (*MsgSetErrorDataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddMessagesSignatures(ctx context.Context, in *MsgAddMessagesSignatures, opts ...grpc.CallOption) (*MsgAddMessagesSignaturesResponse, error) {
	out := new(MsgAddMessagesSignaturesResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.consensus.Msg/AddMessagesSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddEvidence(ctx context.Context, in *MsgAddEvidence, opts ...grpc.CallOption) (*MsgAddEvidenceResponse, error) {
	out := new(MsgAddEvidenceResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.consensus.Msg/AddEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPublicAccessData(ctx context.Context, in *MsgSetPublicAccessData, opts ...grpc.CallOption) (*MsgSetPublicAccessDataResponse, error) {
	out := new(MsgSetPublicAccessDataResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.consensus.Msg/SetPublicAccessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetErrorData(ctx context.Context, in *MsgSetErrorData, opts ...grpc.CallOption) (*MsgSetErrorDataResponse, error) {
	out := new(MsgSetErrorDataResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.consensus.Msg/SetErrorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddMessagesSignatures(context.Context, *MsgAddMessagesSignatures) (*MsgAddMessagesSignaturesResponse, error)
	AddEvidence(context.Context, *MsgAddEvidence) (*MsgAddEvidenceResponse, error)
	SetPublicAccessData(context.Context, *MsgSetPublicAccessData) (*MsgSetPublicAccessDataResponse, error)
	SetErrorData(context.Context, *MsgSetErrorData) (*MsgSetErrorDataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct{}

func (*UnimplementedMsgServer) AddMessagesSignatures(ctx context.Context, req *MsgAddMessagesSignatures) (*MsgAddMessagesSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessagesSignatures not implemented")
}

func (*UnimplementedMsgServer) AddEvidence(ctx context.Context, req *MsgAddEvidence) (*MsgAddEvidenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvidence not implemented")
}

func (*UnimplementedMsgServer) SetPublicAccessData(ctx context.Context, req *MsgSetPublicAccessData) (*MsgSetPublicAccessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPublicAccessData not implemented")
}

func (*UnimplementedMsgServer) SetErrorData(ctx context.Context, req *MsgSetErrorData) (*MsgSetErrorDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetErrorData not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddMessagesSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddMessagesSignatures)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddMessagesSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.consensus.Msg/AddMessagesSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddMessagesSignatures(ctx, req.(*MsgAddMessagesSignatures))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddEvidence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.consensus.Msg/AddEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddEvidence(ctx, req.(*MsgAddEvidence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPublicAccessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPublicAccessData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPublicAccessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.consensus.Msg/SetPublicAccessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPublicAccessData(ctx, req.(*MsgSetPublicAccessData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetErrorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetErrorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetErrorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.consensus.Msg/SetErrorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetErrorData(ctx, req.(*MsgSetErrorData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "palomachain.paloma.consensus.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMessagesSignatures",
			Handler:    _Msg_AddMessagesSignatures_Handler,
		},
		{
			MethodName: "AddEvidence",
			Handler:    _Msg_AddEvidence_Handler,
		},
		{
			MethodName: "SetPublicAccessData",
			Handler:    _Msg_SetPublicAccessData_Handler,
		},
		{
			MethodName: "SetErrorData",
			Handler:    _Msg_SetErrorData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "palomachain/paloma/consensus/tx.proto",
}

func (m *MsgAddMessagesSignatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMessagesSignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMessagesSignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SignedMessages) > 0 {
		for iNdEx := len(m.SignedMessages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignedMessages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusMessageSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusMessageSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusMessageSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignedByAddress) > 0 {
		i -= len(m.SignedByAddress)
		copy(dAtA[i:], m.SignedByAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignedByAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QueueTypeName) > 0 {
		i -= len(m.QueueTypeName)
		copy(dAtA[i:], m.QueueTypeName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QueueTypeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddMessagesSignaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddMessagesSignaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddMessagesSignaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddEvidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddEvidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.QueueTypeName) > 0 {
		i -= len(m.QueueTypeName)
		copy(dAtA[i:], m.QueueTypeName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QueueTypeName)))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddEvidenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddEvidenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddEvidenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetPublicAccessData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPublicAccessData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPublicAccessData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QueueTypeName) > 0 {
		i -= len(m.QueueTypeName)
		copy(dAtA[i:], m.QueueTypeName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QueueTypeName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MessageID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPublicAccessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPublicAccessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPublicAccessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetErrorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetErrorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetErrorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QueueTypeName) > 0 {
		i -= len(m.QueueTypeName)
		copy(dAtA[i:], m.QueueTypeName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QueueTypeName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MessageID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetErrorDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetErrorDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetErrorDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *MsgAddMessagesSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SignedMessages) > 0 {
		for _, e := range m.SignedMessages {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *ConsensusMessageSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.QueueTypeName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SignedByAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddMessagesSignaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddEvidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovTx(uint64(m.MessageID))
	}
	l = len(m.QueueTypeName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddEvidenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetPublicAccessData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovTx(uint64(m.MessageID))
	}
	l = len(m.QueueTypeName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetPublicAccessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetErrorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovTx(uint64(m.MessageID))
	}
	l = len(m.QueueTypeName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetErrorDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *MsgAddMessagesSignatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMessagesSignatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMessagesSignatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedMessages = append(m.SignedMessages, &ConsensusMessageSignature{})
			if err := m.SignedMessages[len(m.SignedMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ConsensusMessageSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusMessageSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusMessageSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedByAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedByAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgAddMessagesSignaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddMessagesSignaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddMessagesSignaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgAddEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &types1.Any{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgAddEvidenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddEvidenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddEvidenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetPublicAccessData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPublicAccessData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPublicAccessData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetPublicAccessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPublicAccessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPublicAccessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetErrorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetErrorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetErrorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *MsgSetErrorDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetErrorDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetErrorDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
