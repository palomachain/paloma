// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"

	valsettypes "github.com/palomachain/paloma/x/valset/types"
)

// ValsetKeeper is an autogenerated mock type for the ValsetKeeper type
type ValsetKeeper struct {
	mock.Mock
}

// CanAcceptValidator provides a mock function with given fields: ctx, valAddr
func (_m *ValsetKeeper) CanAcceptValidator(ctx types.Context, valAddr types.ValAddress) error {
	ret := _m.Called(ctx, valAddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, types.ValAddress) error); ok {
		r0 = rf(ctx, valAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrentSnapshot provides a mock function with given fields: ctx
func (_m *ValsetKeeper) GetCurrentSnapshot(ctx types.Context) (*valsettypes.Snapshot, error) {
	ret := _m.Called(ctx)

	var r0 *valsettypes.Snapshot
	if rf, ok := ret.Get(0).(func(types.Context) *valsettypes.Snapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*valsettypes.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSigningKey provides a mock function with given fields: ctx, valAddr, chainType, chainReferenceID, signedByAddress
func (_m *ValsetKeeper) GetSigningKey(ctx types.Context, valAddr types.ValAddress, chainType string, chainReferenceID string, signedByAddress string) ([]byte, error) {
	ret := _m.Called(ctx, valAddr, chainType, chainReferenceID, signedByAddress)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(types.Context, types.ValAddress, string, string, string) []byte); ok {
		r0 = rf(ctx, valAddr, chainType, chainReferenceID, signedByAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Context, types.ValAddress, string, string, string) error); ok {
		r1 = rf(ctx, valAddr, chainType, chainReferenceID, signedByAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewValsetKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewValsetKeeper creates a new instance of ValsetKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValsetKeeper(t mockConstructorTestingTNewValsetKeeper) *ValsetKeeper {
	mock := &ValsetKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
