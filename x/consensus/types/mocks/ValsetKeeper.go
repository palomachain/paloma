// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	crypto "github.com/tendermint/tendermint/crypto"

	testing "testing"

	types "github.com/cosmos/cosmos-sdk/types"

	valsettypes "github.com/palomachain/paloma/x/valset/types"
)

// ValsetKeeper is an autogenerated mock type for the ValsetKeeper type
type ValsetKeeper struct {
	mock.Mock
}

// GetCurrentSnapshot provides a mock function with given fields: ctx
func (_m *ValsetKeeper) GetCurrentSnapshot(ctx types.Context) (*valsettypes.Snapshot, error) {
	ret := _m.Called(ctx)

	var r0 *valsettypes.Snapshot
	if rf, ok := ret.Get(0).(func(types.Context) *valsettypes.Snapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*valsettypes.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSigningKey provides a mock function with given fields: ctx, valAddr
func (_m *ValsetKeeper) GetSigningKey(ctx types.Context, valAddr types.ValAddress) crypto.PubKey {
	ret := _m.Called(ctx, valAddr)

	var r0 crypto.PubKey
	if rf, ok := ret.Get(0).(func(types.Context, types.ValAddress) crypto.PubKey); ok {
		r0 = rf(ctx, valAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PubKey)
		}
	}

	return r0
}

// NewValsetKeeper creates a new instance of ValsetKeeper. It also registers a cleanup function to assert the mocks expectations.
func NewValsetKeeper(t testing.TB) *ValsetKeeper {
	mock := &ValsetKeeper{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
