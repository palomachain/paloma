// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	types "github.com/palomachain/paloma/x/consensus/types"
)

// QueuedSignedMessageI is an autogenerated mock type for the QueuedSignedMessageI type
type QueuedSignedMessageI struct {
	mock.Mock
}

// AddSignData provides a mock function with given fields: _a0
func (_m *QueuedSignedMessageI) AddSignData(_a0 *types.SignData) {
	_m.Called(_a0)
}

// ConsensusMsg provides a mock function with given fields: _a0
func (_m *QueuedSignedMessageI) ConsensusMsg(_a0 types.AnyUnpacker) (types.ConsensusMsg, error) {
	ret := _m.Called(_a0)

	var r0 types.ConsensusMsg
	if rf, ok := ret.Get(0).(func(types.AnyUnpacker) types.ConsensusMsg); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ConsensusMsg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.AnyUnpacker) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBytesToSign provides a mock function with given fields:
func (_m *QueuedSignedMessageI) GetBytesToSign() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetId provides a mock function with given fields:
func (_m *QueuedSignedMessageI) GetId() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetSignData provides a mock function with given fields:
func (_m *QueuedSignedMessageI) GetSignData() []*types.SignData {
	ret := _m.Called()

	var r0 []*types.SignData
	if rf, ok := ret.Get(0).(func() []*types.SignData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.SignData)
		}
	}

	return r0
}

// Nonce provides a mock function with given fields:
func (_m *QueuedSignedMessageI) Nonce() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ProtoMessage provides a mock function with given fields:
func (_m *QueuedSignedMessageI) ProtoMessage() {
	_m.Called()
}

// Reset provides a mock function with given fields:
func (_m *QueuedSignedMessageI) Reset() {
	_m.Called()
}

// String provides a mock function with given fields:
func (_m *QueuedSignedMessageI) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewQueuedSignedMessageI creates a new instance of QueuedSignedMessageI. It also registers a cleanup function to assert the mocks expectations.
func NewQueuedSignedMessageI(t testing.TB) *QueuedSignedMessageI {
	mock := &QueuedSignedMessageI{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
