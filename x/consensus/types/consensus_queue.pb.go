// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/consensus/consensus_queue.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// message for storing the queued signed message in the internal queue
type QueuedSignedMessage struct {
	Id                 uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AddedAtBlockHeight int64             `protobuf:"varint,2,opt,name=addedAtBlockHeight,proto3" json:"addedAtBlockHeight,omitempty"`
	AddedAt            time.Time         `protobuf:"bytes,3,opt,name=addedAt,proto3,stdtime" json:"addedAt"`
	Msg                *types.Any        `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	BytesToSign        []byte            `protobuf:"bytes,5,opt,name=bytesToSign,proto3" json:"bytesToSign,omitempty"`
	SignData           []*SignData       `protobuf:"bytes,6,rep,name=signData,proto3" json:"signData,omitempty"`
	Evidence           []*Evidence       `protobuf:"bytes,7,rep,name=evidence,proto3" json:"evidence,omitempty"`
	PublicAccessData   *PublicAccessData `protobuf:"bytes,8,opt,name=publicAccessData,proto3" json:"publicAccessData,omitempty"`
	RequireSignatures  bool              `protobuf:"varint,9,opt,name=requireSignatures,proto3" json:"requireSignatures,omitempty"`
	ErrorData          *ErrorData        `protobuf:"bytes,10,opt,name=errorData,proto3" json:"errorData,omitempty"`
	// block height at which the message was assinged to the
	// current relayer. Updated when message is reassigned.
	HandledAtBlockHeight *cosmossdk_io_math.Int `protobuf:"bytes,11,opt,name=handled_at_block_height,json=handledAtBlockHeight,proto3,customtype=cosmossdk.io/math.Int" json:"handled_at_block_height,omitempty"`
}

func (m *QueuedSignedMessage) Reset()      { *m = QueuedSignedMessage{} }
func (*QueuedSignedMessage) ProtoMessage() {}
func (*QueuedSignedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a5520bff1a7c91d, []int{0}
}
func (m *QueuedSignedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedSignedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedSignedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedSignedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedSignedMessage.Merge(m, src)
}
func (m *QueuedSignedMessage) XXX_Size() int {
	return m.Size()
}
func (m *QueuedSignedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedSignedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedSignedMessage proto.InternalMessageInfo

func (m *QueuedSignedMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueuedSignedMessage) GetAddedAtBlockHeight() int64 {
	if m != nil {
		return m.AddedAtBlockHeight
	}
	return 0
}

func (m *QueuedSignedMessage) GetAddedAt() time.Time {
	if m != nil {
		return m.AddedAt
	}
	return time.Time{}
}

func (m *QueuedSignedMessage) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *QueuedSignedMessage) GetBytesToSign() []byte {
	if m != nil {
		return m.BytesToSign
	}
	return nil
}

func (m *QueuedSignedMessage) GetSignData() []*SignData {
	if m != nil {
		return m.SignData
	}
	return nil
}

func (m *QueuedSignedMessage) GetEvidence() []*Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *QueuedSignedMessage) GetPublicAccessData() *PublicAccessData {
	if m != nil {
		return m.PublicAccessData
	}
	return nil
}

func (m *QueuedSignedMessage) GetRequireSignatures() bool {
	if m != nil {
		return m.RequireSignatures
	}
	return false
}

func (m *QueuedSignedMessage) GetErrorData() *ErrorData {
	if m != nil {
		return m.ErrorData
	}
	return nil
}

type BatchOfConsensusMessages struct {
	Msg *types.Any `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BatchOfConsensusMessages) Reset()         { *m = BatchOfConsensusMessages{} }
func (m *BatchOfConsensusMessages) String() string { return proto.CompactTextString(m) }
func (*BatchOfConsensusMessages) ProtoMessage()    {}
func (*BatchOfConsensusMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a5520bff1a7c91d, []int{1}
}
func (m *BatchOfConsensusMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchOfConsensusMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchOfConsensusMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchOfConsensusMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchOfConsensusMessages.Merge(m, src)
}
func (m *BatchOfConsensusMessages) XXX_Size() int {
	return m.Size()
}
func (m *BatchOfConsensusMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchOfConsensusMessages.DiscardUnknown(m)
}

var xxx_messageInfo_BatchOfConsensusMessages proto.InternalMessageInfo

func (m *BatchOfConsensusMessages) GetMsg() *types.Any {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Batch struct {
	Msgs        []*types.Any `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
	BytesToSign []byte       `protobuf:"bytes,2,opt,name=bytesToSign,proto3" json:"bytesToSign,omitempty"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a5520bff1a7c91d, []int{2}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return m.Size()
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetMsgs() []*types.Any {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *Batch) GetBytesToSign() []byte {
	if m != nil {
		return m.BytesToSign
	}
	return nil
}

type SignData struct {
	ValAddress             github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=valAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"valAddress,omitempty"`
	Signature              []byte                                        `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	ExtraData              []byte                                        `protobuf:"bytes,3,opt,name=extraData,proto3" json:"extraData,omitempty"`
	ExternalAccountAddress string                                        `protobuf:"bytes,4,opt,name=externalAccountAddress,proto3" json:"externalAccountAddress,omitempty"`
	PublicKey              []byte                                        `protobuf:"bytes,5,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (m *SignData) Reset()         { *m = SignData{} }
func (m *SignData) String() string { return proto.CompactTextString(m) }
func (*SignData) ProtoMessage()    {}
func (*SignData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a5520bff1a7c91d, []int{3}
}
func (m *SignData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignData.Merge(m, src)
}
func (m *SignData) XXX_Size() int {
	return m.Size()
}
func (m *SignData) XXX_DiscardUnknown() {
	xxx_messageInfo_SignData.DiscardUnknown(m)
}

var xxx_messageInfo_SignData proto.InternalMessageInfo

func (m *SignData) GetValAddress() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.ValAddress
	}
	return nil
}

func (m *SignData) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignData) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *SignData) GetExternalAccountAddress() string {
	if m != nil {
		return m.ExternalAccountAddress
	}
	return ""
}

func (m *SignData) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type Evidence struct {
	ValAddress github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=valAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"valAddress,omitempty"`
	Proof      *types.Any                                    `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *Evidence) Reset()         { *m = Evidence{} }
func (m *Evidence) String() string { return proto.CompactTextString(m) }
func (*Evidence) ProtoMessage()    {}
func (*Evidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a5520bff1a7c91d, []int{4}
}
func (m *Evidence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Evidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Evidence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Evidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Evidence.Merge(m, src)
}
func (m *Evidence) XXX_Size() int {
	return m.Size()
}
func (m *Evidence) XXX_DiscardUnknown() {
	xxx_messageInfo_Evidence.DiscardUnknown(m)
}

var xxx_messageInfo_Evidence proto.InternalMessageInfo

func (m *Evidence) GetValAddress() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.ValAddress
	}
	return nil
}

func (m *Evidence) GetProof() *types.Any {
	if m != nil {
		return m.Proof
	}
	return nil
}

type PublicAccessData struct {
	ValAddress github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=valAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"valAddress,omitempty"`
	Data       []byte                                        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PublicAccessData) Reset()         { *m = PublicAccessData{} }
func (m *PublicAccessData) String() string { return proto.CompactTextString(m) }
func (*PublicAccessData) ProtoMessage()    {}
func (*PublicAccessData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a5520bff1a7c91d, []int{5}
}
func (m *PublicAccessData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicAccessData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicAccessData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicAccessData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicAccessData.Merge(m, src)
}
func (m *PublicAccessData) XXX_Size() int {
	return m.Size()
}
func (m *PublicAccessData) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicAccessData.DiscardUnknown(m)
}

var xxx_messageInfo_PublicAccessData proto.InternalMessageInfo

func (m *PublicAccessData) GetValAddress() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.ValAddress
	}
	return nil
}

func (m *PublicAccessData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ErrorData struct {
	ValAddress github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=valAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"valAddress,omitempty"`
	Data       []byte                                        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ErrorData) Reset()         { *m = ErrorData{} }
func (m *ErrorData) String() string { return proto.CompactTextString(m) }
func (*ErrorData) ProtoMessage()    {}
func (*ErrorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a5520bff1a7c91d, []int{6}
}
func (m *ErrorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorData.Merge(m, src)
}
func (m *ErrorData) XXX_Size() int {
	return m.Size()
}
func (m *ErrorData) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorData.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorData proto.InternalMessageInfo

func (m *ErrorData) GetValAddress() github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.ValAddress
	}
	return nil
}

func (m *ErrorData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*QueuedSignedMessage)(nil), "palomachain.paloma.consensus.QueuedSignedMessage")
	proto.RegisterType((*BatchOfConsensusMessages)(nil), "palomachain.paloma.consensus.BatchOfConsensusMessages")
	proto.RegisterType((*Batch)(nil), "palomachain.paloma.consensus.Batch")
	proto.RegisterType((*SignData)(nil), "palomachain.paloma.consensus.SignData")
	proto.RegisterType((*Evidence)(nil), "palomachain.paloma.consensus.Evidence")
	proto.RegisterType((*PublicAccessData)(nil), "palomachain.paloma.consensus.PublicAccessData")
	proto.RegisterType((*ErrorData)(nil), "palomachain.paloma.consensus.ErrorData")
}

func init() {
	proto.RegisterFile("palomachain/paloma/consensus/consensus_queue.proto", fileDescriptor_3a5520bff1a7c91d)
}

var fileDescriptor_3a5520bff1a7c91d = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0xe5, 0x47, 0x9b, 0x5c, 0x2a, 0xd4, 0x1e, 0x05, 0xdc, 0xaa, 0x4a, 0xac, 0x0c, 0xc5,
	0xaa, 0xa8, 0x0d, 0x45, 0x62, 0x60, 0x40, 0x8a, 0xa1, 0x12, 0x15, 0x42, 0x50, 0xb7, 0x62, 0xe8,
	0x12, 0x5d, 0x7c, 0x57, 0xc7, 0xaa, 0xed, 0x4b, 0x7d, 0xe7, 0xaa, 0xf9, 0x13, 0xd8, 0x3a, 0x32,
	0xb2, 0xc1, 0xc8, 0xc0, 0x1f, 0xd1, 0xb1, 0x62, 0x42, 0x0c, 0x01, 0xb5, 0x03, 0x23, 0x3b, 0x13,
	0xf2, 0xd9, 0x4e, 0x42, 0xd2, 0x1f, 0x2c, 0x65, 0x69, 0x5f, 0xde, 0xfb, 0xbe, 0x77, 0xdf, 0xdd,
	0xfb, 0x9e, 0x0c, 0xd7, 0xba, 0xd8, 0x63, 0x3e, 0xb6, 0x3b, 0xd8, 0x0d, 0x8c, 0x24, 0x36, 0x6c,
	0x16, 0x70, 0x1a, 0xf0, 0x88, 0x0f, 0xa3, 0xd6, 0x7e, 0x44, 0x23, 0xaa, 0x77, 0x43, 0x26, 0x18,
	0x5a, 0x1a, 0xe1, 0xe8, 0x49, 0xac, 0x0f, 0x90, 0x8b, 0x0b, 0x0e, 0x63, 0x8e, 0x47, 0x0d, 0x89,
	0x6d, 0x47, 0xbb, 0x06, 0x0e, 0x7a, 0x09, 0x71, 0x71, 0xde, 0x61, 0x0e, 0x93, 0xa1, 0x11, 0x47,
	0x69, 0xb6, 0x3e, 0x4e, 0x10, 0xae, 0x4f, 0xb9, 0xc0, 0x7e, 0x37, 0x05, 0x2c, 0xd8, 0x8c, 0xfb,
	0x8c, 0xb7, 0x12, 0x66, 0xf2, 0x23, 0x2d, 0xcd, 0x61, 0xdf, 0x0d, 0x98, 0x21, 0xff, 0x26, 0xa9,
	0xc6, 0x87, 0x12, 0xbc, 0xb9, 0x19, 0xab, 0x25, 0x5b, 0xae, 0x13, 0x50, 0xf2, 0x92, 0x72, 0x8e,
	0x1d, 0x8a, 0x6e, 0xc0, 0xbc, 0x4b, 0x14, 0xa0, 0x02, 0xad, 0x68, 0xe5, 0x5d, 0x82, 0x74, 0x88,
	0x30, 0x21, 0x94, 0x34, 0x85, 0xe9, 0x31, 0x7b, 0xef, 0x39, 0x75, 0x9d, 0x8e, 0x50, 0xf2, 0x2a,
	0xd0, 0x0a, 0xd6, 0x39, 0x15, 0xf4, 0x04, 0x4e, 0xa7, 0x59, 0xa5, 0xa0, 0x02, 0xad, 0xba, 0xb6,
	0xa8, 0x27, 0xc2, 0xf5, 0x4c, 0xb8, 0xbe, 0x9d, 0x09, 0x37, 0xcb, 0xc7, 0xfd, 0x7a, 0xee, 0xe8,
	0x7b, 0x1d, 0x58, 0x19, 0x09, 0x2d, 0xc3, 0x82, 0xcf, 0x1d, 0xa5, 0x28, 0xb9, 0xf3, 0x13, 0xdc,
	0x66, 0xd0, 0xb3, 0x62, 0x00, 0x52, 0x61, 0xb5, 0xdd, 0x13, 0x94, 0x6f, 0xb3, 0x58, 0xbf, 0x52,
	0x52, 0x81, 0x36, 0x63, 0x8d, 0xa6, 0x90, 0x09, 0xcb, 0xdc, 0x75, 0x82, 0x67, 0x58, 0x60, 0x65,
	0x4a, 0x2d, 0x68, 0xd5, 0xb5, 0x65, 0xfd, 0xb2, 0x91, 0xe8, 0x5b, 0x29, 0xda, 0x1a, 0xf0, 0xe2,
	0x1e, 0xf4, 0xc0, 0x25, 0x34, 0xb0, 0xa9, 0x32, 0xfd, 0x2f, 0x3d, 0xd6, 0x53, 0xb4, 0x35, 0xe0,
	0xa1, 0x1d, 0x38, 0xdb, 0x8d, 0xda, 0x9e, 0x6b, 0x37, 0x6d, 0x9b, 0x72, 0x2e, 0xf5, 0x94, 0xe5,
	0xf5, 0xf4, 0xcb, 0x7b, 0xbd, 0x1e, 0x63, 0x59, 0x13, 0x7d, 0xd0, 0x3d, 0x38, 0x17, 0xd2, 0xfd,
	0xc8, 0x0d, 0x69, 0x2c, 0x1e, 0x8b, 0x28, 0xa4, 0x5c, 0xa9, 0xa8, 0x40, 0x2b, 0x5b, 0x93, 0x05,
	0xb4, 0x0e, 0x2b, 0x34, 0x0c, 0x59, 0x28, 0x25, 0x40, 0x29, 0xe1, 0xee, 0x15, 0xd7, 0xc9, 0xe0,
	0xd6, 0x90, 0x89, 0x1c, 0x78, 0xa7, 0x83, 0x03, 0xe2, 0x51, 0xd2, 0xc2, 0xa2, 0xd5, 0x8e, 0x87,
	0xdf, 0xea, 0x24, 0xbe, 0xa8, 0xaa, 0x40, 0xab, 0x98, 0xf7, 0x8f, 0xfb, 0x75, 0xf0, 0xad, 0x5f,
	0xbf, 0x95, 0x98, 0x90, 0x93, 0x3d, 0xdd, 0x65, 0x86, 0x8f, 0x45, 0x47, 0xdf, 0x08, 0xc4, 0x97,
	0xcf, 0xab, 0x30, 0x75, 0xe7, 0x46, 0x20, 0x3e, 0xfe, 0xfc, 0xb4, 0x02, 0xac, 0xf9, 0xb4, 0xe1,
	0x5f, 0x5e, 0x7a, 0x5c, 0x7c, 0xf7, 0xbe, 0x9e, 0x6b, 0x98, 0x50, 0x31, 0xb1, 0xb0, 0x3b, 0xaf,
	0x76, 0x9f, 0x66, 0xba, 0x52, 0xb3, 0xf2, 0xcc, 0x2d, 0xe0, 0x0a, 0xb7, 0x34, 0xb6, 0x60, 0x49,
	0xf6, 0x40, 0x1a, 0x2c, 0xfa, 0xdc, 0xe1, 0x0a, 0x90, 0xc3, 0x3c, 0x9f, 0x21, 0x11, 0xe3, 0x06,
	0xcb, 0x4f, 0x18, 0xac, 0xf1, 0x0b, 0xc0, 0x72, 0xe6, 0x19, 0xb4, 0x09, 0xe1, 0x01, 0xf6, 0x9a,
	0x84, 0x84, 0x94, 0x73, 0x29, 0x68, 0xc6, 0x7c, 0xf0, 0xbb, 0x5f, 0x5f, 0x75, 0x5c, 0xd1, 0x89,
	0xda, 0xba, 0xcd, 0xfc, 0x74, 0x27, 0xd3, 0x7f, 0xab, 0x9c, 0xec, 0x19, 0xa2, 0xd7, 0xa5, 0x5c,
	0x7f, 0x33, 0x20, 0x5a, 0x23, 0x4d, 0xd0, 0x12, 0xac, 0xf0, 0x6c, 0x78, 0xe9, 0xf9, 0xc3, 0x44,
	0x5c, 0xa5, 0x87, 0x22, 0xc4, 0x72, 0x98, 0x85, 0xa4, 0x3a, 0x48, 0xa0, 0x47, 0xf0, 0x36, 0x3d,
	0x14, 0x34, 0x0c, 0xb0, 0xd7, 0xb4, 0x6d, 0x16, 0x05, 0x22, 0x93, 0x16, 0x6f, 0x56, 0xc5, 0xba,
	0xa0, 0x1a, 0x77, 0x4d, 0x4c, 0xf6, 0x82, 0xf6, 0xd2, 0xa5, 0x1a, 0x26, 0x1a, 0x6f, 0x01, 0x2c,
	0x67, 0x0e, 0xbf, 0x8e, 0x1b, 0xaf, 0xc0, 0x52, 0x37, 0x64, 0x6c, 0x57, 0xde, 0xf6, 0xa2, 0xf1,
	0x24, 0x90, 0x46, 0x0f, 0xce, 0x8e, 0x2f, 0xc8, 0x75, 0x48, 0x42, 0xb0, 0x48, 0xe2, 0x17, 0x4e,
	0xde, 0x5f, 0xc6, 0x8d, 0x10, 0x56, 0x06, 0x8b, 0xf1, 0x9f, 0xce, 0x34, 0x37, 0x8e, 0x4f, 0x6b,
	0xe0, 0xe4, 0xb4, 0x06, 0x7e, 0x9c, 0xd6, 0xc0, 0xd1, 0x59, 0x2d, 0x77, 0x72, 0x56, 0xcb, 0x7d,
	0x3d, 0xab, 0xe5, 0x76, 0x8c, 0x91, 0x83, 0xce, 0xf9, 0x4c, 0x1d, 0x8e, 0x7c, 0xa8, 0xe4, 0xa9,
	0xed, 0x29, 0xf9, 0x9c, 0x0f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x30, 0x9e, 0x48, 0xd5,
	0x06, 0x00, 0x00,
}

func (m *QueuedSignedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedSignedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedSignedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HandledAtBlockHeight != nil {
		{
			size := m.HandledAtBlockHeight.Size()
			i -= size
			if _, err := m.HandledAtBlockHeight.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintConsensusQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ErrorData != nil {
		{
			size, err := m.ErrorData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RequireSignatures {
		i--
		if m.RequireSignatures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.PublicAccessData != nil {
		{
			size, err := m.PublicAccessData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Evidence) > 0 {
		for iNdEx := len(m.Evidence) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Evidence[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsensusQueue(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SignData) > 0 {
		for iNdEx := len(m.SignData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsensusQueue(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BytesToSign) > 0 {
		i -= len(m.BytesToSign)
		copy(dAtA[i:], m.BytesToSign)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.BytesToSign)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.AddedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.AddedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintConsensusQueue(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	if m.AddedAtBlockHeight != 0 {
		i = encodeVarintConsensusQueue(dAtA, i, uint64(m.AddedAtBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintConsensusQueue(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchOfConsensusMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchOfConsensusMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchOfConsensusMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BytesToSign) > 0 {
		i -= len(m.BytesToSign)
		copy(dAtA[i:], m.BytesToSign)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.BytesToSign)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsensusQueue(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalAccountAddress) > 0 {
		i -= len(m.ExternalAccountAddress)
		copy(dAtA[i:], m.ExternalAccountAddress)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.ExternalAccountAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Evidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Evidence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Evidence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensusQueue(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublicAccessData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicAccessData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicAccessData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintConsensusQueue(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConsensusQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsensusQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueuedSignedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovConsensusQueue(uint64(m.Id))
	}
	if m.AddedAtBlockHeight != 0 {
		n += 1 + sovConsensusQueue(uint64(m.AddedAtBlockHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.AddedAt)
	n += 1 + l + sovConsensusQueue(uint64(l))
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	l = len(m.BytesToSign)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	if len(m.SignData) > 0 {
		for _, e := range m.SignData {
			l = e.Size()
			n += 1 + l + sovConsensusQueue(uint64(l))
		}
	}
	if len(m.Evidence) > 0 {
		for _, e := range m.Evidence {
			l = e.Size()
			n += 1 + l + sovConsensusQueue(uint64(l))
		}
	}
	if m.PublicAccessData != nil {
		l = m.PublicAccessData.Size()
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	if m.RequireSignatures {
		n += 2
	}
	if m.ErrorData != nil {
		l = m.ErrorData.Size()
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	if m.HandledAtBlockHeight != nil {
		l = m.HandledAtBlockHeight.Size()
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	return n
}

func (m *BatchOfConsensusMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	return n
}

func (m *Batch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovConsensusQueue(uint64(l))
		}
	}
	l = len(m.BytesToSign)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	return n
}

func (m *SignData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	l = len(m.ExternalAccountAddress)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	return n
}

func (m *Evidence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	return n
}

func (m *PublicAccessData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	return n
}

func (m *ErrorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovConsensusQueue(uint64(l))
	}
	return n
}

func sovConsensusQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsensusQueue(x uint64) (n int) {
	return sovConsensusQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueuedSignedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedSignedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedSignedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedAtBlockHeight", wireType)
			}
			m.AddedAtBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddedAtBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.AddedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesToSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesToSign = append(m.BytesToSign[:0], dAtA[iNdEx:postIndex]...)
			if m.BytesToSign == nil {
				m.BytesToSign = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignData = append(m.SignData, &SignData{})
			if err := m.SignData[len(m.SignData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = append(m.Evidence, &Evidence{})
			if err := m.Evidence[len(m.Evidence)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAccessData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicAccessData == nil {
				m.PublicAccessData = &PublicAccessData{}
			}
			if err := m.PublicAccessData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireSignatures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireSignatures = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorData == nil {
				m.ErrorData = &ErrorData{}
			}
			if err := m.ErrorData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandledAtBlockHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.HandledAtBlockHeight = &v
			if err := m.HandledAtBlockHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchOfConsensusMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchOfConsensusMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchOfConsensusMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &types.Any{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types.Any{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesToSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BytesToSign = append(m.BytesToSign[:0], dAtA[iNdEx:postIndex]...)
			if m.BytesToSign == nil {
				m.BytesToSign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = append(m.ValAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValAddress == nil {
				m.ValAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Evidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Evidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Evidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = append(m.ValAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValAddress == nil {
				m.ValAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &types.Any{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicAccessData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicAccessData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicAccessData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = append(m.ValAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValAddress == nil {
				m.ValAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = append(m.ValAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ValAddress == nil {
				m.ValAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsensusQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsensusQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensusQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsensusQueue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsensusQueue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsensusQueue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsensusQueue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsensusQueue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsensusQueue = fmt.Errorf("proto: unexpected end of group")
)
