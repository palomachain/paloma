// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/x/staking/types"

	valsettypes "github.com/palomachain/paloma/x/valset/types"
)

// ValsetKeeper is an autogenerated mock type for the ValsetKeeper type
type ValsetKeeper struct {
	mock.Mock
}

// GetUnjailedValidators provides a mock function with given fields: ctx
func (_m *ValsetKeeper) GetUnjailedValidators(ctx context.Context) []types.ValidatorI {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUnjailedValidators")
	}

	var r0 []types.ValidatorI
	if rf, ok := ret.Get(0).(func(context.Context) []types.ValidatorI); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ValidatorI)
		}
	}

	return r0
}

// GetValidatorChainInfos provides a mock function with given fields: ctx, valAddr
func (_m *ValsetKeeper) GetValidatorChainInfos(ctx context.Context, valAddr cosmos_sdktypes.ValAddress) ([]*valsettypes.ExternalChainInfo, error) {
	ret := _m.Called(ctx, valAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorChainInfos")
	}

	var r0 []*valsettypes.ExternalChainInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) ([]*valsettypes.ExternalChainInfo, error)); ok {
		return rf(ctx, valAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) []*valsettypes.ExternalChainInfo); ok {
		r0 = rf(ctx, valAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*valsettypes.ExternalChainInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ValAddress) error); ok {
		r1 = rf(ctx, valAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Jail provides a mock function with given fields: ctx, valAddr, reason
func (_m *ValsetKeeper) Jail(ctx context.Context, valAddr cosmos_sdktypes.ValAddress, reason string) error {
	ret := _m.Called(ctx, valAddr, reason)

	if len(ret) == 0 {
		panic("no return value specified for Jail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress, string) error); ok {
		r0 = rf(ctx, valAddr, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewValsetKeeper creates a new instance of ValsetKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValsetKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValsetKeeper {
	mock := &ValsetKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
