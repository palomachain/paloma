// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/paloma/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/palomachain/paloma/v2/x/valset/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddStatusUpdate_Level int32

const (
	MsgAddStatusUpdate_LEVEL_DEBUG MsgAddStatusUpdate_Level = 0
	MsgAddStatusUpdate_LEVEL_INFO  MsgAddStatusUpdate_Level = 1
	MsgAddStatusUpdate_LEVEL_ERROR MsgAddStatusUpdate_Level = 2
)

var MsgAddStatusUpdate_Level_name = map[int32]string{
	0: "LEVEL_DEBUG",
	1: "LEVEL_INFO",
	2: "LEVEL_ERROR",
}

var MsgAddStatusUpdate_Level_value = map[string]int32{
	"LEVEL_DEBUG": 0,
	"LEVEL_INFO":  1,
	"LEVEL_ERROR": 2,
}

func (x MsgAddStatusUpdate_Level) String() string {
	return proto.EnumName(MsgAddStatusUpdate_Level_name, int32(x))
}

func (MsgAddStatusUpdate_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8dc46060aeb172a8, []int{0, 0}
}

type MsgAddStatusUpdate struct {
	Status   string                            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Level    MsgAddStatusUpdate_Level          `protobuf:"varint,3,opt,name=level,proto3,enum=palomachain.paloma.paloma.MsgAddStatusUpdate_Level" json:"level,omitempty"`
	Metadata types.MsgMetadata                 `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata"`
	Args     []MsgAddStatusUpdate_KeyValuePair `protobuf:"bytes,5,rep,name=args,proto3" json:"args"`
}

func (m *MsgAddStatusUpdate) Reset()         { *m = MsgAddStatusUpdate{} }
func (m *MsgAddStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*MsgAddStatusUpdate) ProtoMessage()    {}
func (*MsgAddStatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc46060aeb172a8, []int{0}
}
func (m *MsgAddStatusUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStatusUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStatusUpdate.Merge(m, src)
}
func (m *MsgAddStatusUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStatusUpdate proto.InternalMessageInfo

func (m *MsgAddStatusUpdate) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgAddStatusUpdate) GetLevel() MsgAddStatusUpdate_Level {
	if m != nil {
		return m.Level
	}
	return MsgAddStatusUpdate_LEVEL_DEBUG
}

func (m *MsgAddStatusUpdate) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgAddStatusUpdate) GetArgs() []MsgAddStatusUpdate_KeyValuePair {
	if m != nil {
		return m.Args
	}
	return nil
}

type MsgAddStatusUpdate_KeyValuePair struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgAddStatusUpdate_KeyValuePair) Reset()         { *m = MsgAddStatusUpdate_KeyValuePair{} }
func (m *MsgAddStatusUpdate_KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*MsgAddStatusUpdate_KeyValuePair) ProtoMessage()    {}
func (*MsgAddStatusUpdate_KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc46060aeb172a8, []int{0, 0}
}
func (m *MsgAddStatusUpdate_KeyValuePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddStatusUpdate_KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddStatusUpdate_KeyValuePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddStatusUpdate_KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddStatusUpdate_KeyValuePair.Merge(m, src)
}
func (m *MsgAddStatusUpdate_KeyValuePair) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddStatusUpdate_KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddStatusUpdate_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddStatusUpdate_KeyValuePair proto.InternalMessageInfo

func (m *MsgAddStatusUpdate_KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgAddStatusUpdate_KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EmptyResponse struct {
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc46060aeb172a8, []int{1}
}
func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return m.Size()
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

type MsgRegisterLightNodeClient struct {
	Metadata types.MsgMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgRegisterLightNodeClient) Reset()         { *m = MsgRegisterLightNodeClient{} }
func (m *MsgRegisterLightNodeClient) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterLightNodeClient) ProtoMessage()    {}
func (*MsgRegisterLightNodeClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc46060aeb172a8, []int{2}
}
func (m *MsgRegisterLightNodeClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterLightNodeClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterLightNodeClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterLightNodeClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterLightNodeClient.Merge(m, src)
}
func (m *MsgRegisterLightNodeClient) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterLightNodeClient) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterLightNodeClient.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterLightNodeClient proto.InternalMessageInfo

func (m *MsgRegisterLightNodeClient) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

type MsgAddLightNodeClientLicense struct {
	Metadata      types.MsgMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	ClientAddress string            `protobuf:"bytes,2,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	Amount        types1.Coin       `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	VestingMonths uint32            `protobuf:"varint,4,opt,name=vesting_months,json=vestingMonths,proto3" json:"vesting_months,omitempty"`
}

func (m *MsgAddLightNodeClientLicense) Reset()         { *m = MsgAddLightNodeClientLicense{} }
func (m *MsgAddLightNodeClientLicense) String() string { return proto.CompactTextString(m) }
func (*MsgAddLightNodeClientLicense) ProtoMessage()    {}
func (*MsgAddLightNodeClientLicense) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc46060aeb172a8, []int{3}
}
func (m *MsgAddLightNodeClientLicense) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLightNodeClientLicense) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLightNodeClientLicense.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLightNodeClientLicense) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLightNodeClientLicense.Merge(m, src)
}
func (m *MsgAddLightNodeClientLicense) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLightNodeClientLicense) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLightNodeClientLicense.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLightNodeClientLicense proto.InternalMessageInfo

func (m *MsgAddLightNodeClientLicense) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func (m *MsgAddLightNodeClientLicense) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *MsgAddLightNodeClientLicense) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

func (m *MsgAddLightNodeClientLicense) GetVestingMonths() uint32 {
	if m != nil {
		return m.VestingMonths
	}
	return 0
}

type MsgAuthLightNodeClient struct {
	Metadata types.MsgMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
}

func (m *MsgAuthLightNodeClient) Reset()         { *m = MsgAuthLightNodeClient{} }
func (m *MsgAuthLightNodeClient) String() string { return proto.CompactTextString(m) }
func (*MsgAuthLightNodeClient) ProtoMessage()    {}
func (*MsgAuthLightNodeClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dc46060aeb172a8, []int{4}
}
func (m *MsgAuthLightNodeClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthLightNodeClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthLightNodeClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthLightNodeClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthLightNodeClient.Merge(m, src)
}
func (m *MsgAuthLightNodeClient) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthLightNodeClient) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthLightNodeClient.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthLightNodeClient proto.InternalMessageInfo

func (m *MsgAuthLightNodeClient) GetMetadata() types.MsgMetadata {
	if m != nil {
		return m.Metadata
	}
	return types.MsgMetadata{}
}

func init() {
	proto.RegisterEnum("palomachain.paloma.paloma.MsgAddStatusUpdate_Level", MsgAddStatusUpdate_Level_name, MsgAddStatusUpdate_Level_value)
	proto.RegisterType((*MsgAddStatusUpdate)(nil), "palomachain.paloma.paloma.MsgAddStatusUpdate")
	proto.RegisterType((*MsgAddStatusUpdate_KeyValuePair)(nil), "palomachain.paloma.paloma.MsgAddStatusUpdate.KeyValuePair")
	proto.RegisterType((*EmptyResponse)(nil), "palomachain.paloma.paloma.EmptyResponse")
	proto.RegisterType((*MsgRegisterLightNodeClient)(nil), "palomachain.paloma.paloma.MsgRegisterLightNodeClient")
	proto.RegisterType((*MsgAddLightNodeClientLicense)(nil), "palomachain.paloma.paloma.MsgAddLightNodeClientLicense")
	proto.RegisterType((*MsgAuthLightNodeClient)(nil), "palomachain.paloma.paloma.MsgAuthLightNodeClient")
}

func init() {
	proto.RegisterFile("palomachain/paloma/paloma/tx.proto", fileDescriptor_8dc46060aeb172a8)
}

var fileDescriptor_8dc46060aeb172a8 = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0xd3, 0x4e,
	0x10, 0x8f, 0xf3, 0xd1, 0x7f, 0xff, 0x13, 0x92, 0x46, 0x4b, 0xd5, 0x26, 0x11, 0x32, 0x51, 0x24,
	0xaa, 0x08, 0xa9, 0xb6, 0x92, 0x0a, 0x2a, 0x7a, 0x41, 0x4d, 0x09, 0x50, 0x48, 0x5a, 0xe4, 0xd2,
	0x1e, 0xb8, 0x44, 0x1b, 0x7b, 0xe5, 0x18, 0x62, 0x6f, 0xf0, 0x6e, 0xac, 0x86, 0x03, 0x07, 0x9e,
	0x80, 0x23, 0x8f, 0xc0, 0x91, 0x03, 0x0f, 0xd1, 0x63, 0xc5, 0x89, 0x13, 0x82, 0xf6, 0xc0, 0x6b,
	0x20, 0x7b, 0x97, 0xd2, 0xa6, 0x49, 0x4b, 0x04, 0xe2, 0xb4, 0x3b, 0x9f, 0xbf, 0x99, 0x9f, 0x67,
	0xd6, 0x50, 0xee, 0xe3, 0x1e, 0x75, 0xb1, 0xd9, 0xc5, 0x8e, 0xa7, 0x8b, 0xfb, 0xcf, 0x83, 0xef,
	0x6b, 0x7d, 0x9f, 0x72, 0x8a, 0x0a, 0xa7, 0x7c, 0x34, 0x71, 0x97, 0x47, 0x51, 0x35, 0x29, 0x73,
	0x29, 0xd3, 0x3b, 0x98, 0x11, 0x3d, 0xa8, 0x76, 0x08, 0xc7, 0x55, 0xdd, 0xa4, 0xa1, 0x5f, 0x18,
	0x5a, 0x5c, 0x94, 0x76, 0x97, 0xd9, 0x7a, 0x50, 0x0d, 0x0f, 0x69, 0x28, 0x08, 0x43, 0x3b, 0x92,
	0x74, 0x21, 0x48, 0xd3, 0xbc, 0x4d, 0x6d, 0x2a, 0xf4, 0xe1, 0x4d, 0x6a, 0x97, 0xc6, 0x14, 0x1a,
	0xe0, 0x1e, 0x23, 0x5c, 0x37, 0xa9, 0xeb, 0x52, 0x89, 0x58, 0x7e, 0x9f, 0x00, 0xd4, 0x62, 0xf6,
	0xba, 0x65, 0xed, 0x70, 0xcc, 0x07, 0x6c, 0xb7, 0x6f, 0x61, 0x4e, 0xd0, 0x02, 0xcc, 0xb0, 0x48,
	0xce, 0xc7, 0x4b, 0x4a, 0xe5, 0x7f, 0x43, 0x4a, 0x68, 0x13, 0x52, 0x3d, 0x12, 0x90, 0x5e, 0x3e,
	0x51, 0x52, 0x2a, 0xd9, 0xda, 0x8a, 0x36, 0xb1, 0x57, 0xed, 0x7c, 0x56, 0xad, 0x19, 0x86, 0x1a,
	0x22, 0x03, 0x7a, 0x08, 0xb3, 0x2e, 0xe1, 0xd8, 0xc2, 0x1c, 0xe7, 0x93, 0x25, 0xa5, 0x92, 0xae,
	0x2d, 0x8d, 0xcb, 0x26, 0x8a, 0x0e, 0xb3, 0xb5, 0xa4, 0x77, 0x3d, 0x79, 0xf0, 0xe5, 0x7a, 0xcc,
	0x38, 0x89, 0x46, 0x4f, 0x21, 0x89, 0x7d, 0x9b, 0xe5, 0x53, 0xa5, 0x44, 0x25, 0x5d, 0x5b, 0x9b,
	0xae, 0xa6, 0xc7, 0x64, 0xb8, 0x87, 0x7b, 0x03, 0xf2, 0x04, 0x3b, 0xbe, 0xcc, 0x1c, 0x65, 0x2b,
	0xde, 0x86, 0x2b, 0xa7, 0x6d, 0x28, 0x07, 0x89, 0x17, 0x64, 0x98, 0x57, 0x22, 0x3e, 0xc2, 0x2b,
	0x9a, 0x87, 0x54, 0x10, 0x9a, 0x25, 0x47, 0x42, 0x28, 0xdf, 0x81, 0x54, 0xd4, 0x27, 0x9a, 0x83,
	0x74, 0xb3, 0xb1, 0xd7, 0x68, 0xb6, 0xef, 0x35, 0xea, 0xbb, 0x0f, 0x72, 0x31, 0x94, 0x05, 0x10,
	0x8a, 0xcd, 0xad, 0xfb, 0xdb, 0x39, 0xe5, 0x97, 0x43, 0xc3, 0x30, 0xb6, 0x8d, 0x5c, 0x7c, 0x2d,
	0xf3, 0xe6, 0xfb, 0x87, 0x9b, 0x27, 0x7d, 0x3d, 0x4a, 0xce, 0x2a, 0xb9, 0xb8, 0xf1, 0x9f, 0xe9,
	0x13, 0xcc, 0xa9, 0x5f, 0x9e, 0x83, 0x4c, 0xc3, 0xed, 0xf3, 0xa1, 0x41, 0x58, 0x9f, 0x7a, 0x8c,
	0x94, 0x07, 0x50, 0x6c, 0x31, 0xdb, 0x20, 0xb6, 0xc3, 0x38, 0xf1, 0x9b, 0x8e, 0xdd, 0xe5, 0x5b,
	0xd4, 0x22, 0x1b, 0x3d, 0x87, 0x78, 0xfc, 0x0c, 0xbf, 0xca, 0x9f, 0xf0, 0x3b, 0x52, 0x56, 0xf9,
	0x5d, 0x1c, 0xae, 0x09, 0x22, 0x47, 0x20, 0x9b, 0x8e, 0x49, 0x3c, 0x46, 0xfe, 0x1e, 0x32, 0xba,
	0x0b, 0x59, 0x33, 0x4a, 0xdd, 0xc6, 0x96, 0xe5, 0x13, 0x26, 0xc7, 0xb1, 0x9e, 0xff, 0xf4, 0x71,
	0x79, 0x5e, 0x6e, 0xc1, 0xba, 0xb0, 0xec, 0x70, 0xdf, 0xf1, 0x6c, 0x23, 0x23, 0xfc, 0xa5, 0x12,
	0xad, 0xc2, 0x0c, 0x76, 0xe9, 0xc0, 0xe3, 0xd1, 0xc0, 0xa6, 0x6b, 0x05, 0x4d, 0x46, 0x85, 0x1b,
	0xa8, 0xc9, 0x0d, 0xd4, 0x36, 0xa8, 0xe3, 0x49, 0x6c, 0xe9, 0x8e, 0x6e, 0x40, 0x36, 0x20, 0x8c,
	0x3b, 0x9e, 0xdd, 0x76, 0xa9, 0xc7, 0xbb, 0x2c, 0x9a, 0xd1, 0x8c, 0x91, 0x91, 0xda, 0x56, 0xa4,
	0x1c, 0xa5, 0xe6, 0x25, 0x2c, 0x84, 0xcc, 0x0c, 0x78, 0xf7, 0x5f, 0x7d, 0x8d, 0xda, 0xb7, 0x04,
	0x24, 0x5a, 0xcc, 0x46, 0xcf, 0x61, 0x6e, 0x74, 0x89, 0x97, 0xa7, 0xda, 0x84, 0x62, 0xe5, 0x02,
	0xf7, 0x33, 0x83, 0x87, 0x5e, 0xc1, 0xe2, 0xa4, 0xa9, 0xbb, 0x75, 0x31, 0xe6, 0x84, 0xb0, 0x29,
	0xb0, 0x5f, 0x43, 0x61, 0xf2, 0xe4, 0xad, 0x5e, 0xda, 0xf1, 0xf8, 0xc0, 0x29, 0xf0, 0x7d, 0xb8,
	0x3a, 0xee, 0xfb, 0x56, 0x2f, 0x41, 0x3e, 0x1f, 0xf2, 0xfb, 0x98, 0xf5, 0xcd, 0x83, 0x23, 0x55,
	0x39, 0x3c, 0x52, 0x95, 0xaf, 0x47, 0xaa, 0xf2, 0xf6, 0x58, 0x8d, 0x1d, 0x1e, 0xab, 0xb1, 0xcf,
	0xc7, 0x6a, 0xec, 0x99, 0x6e, 0x3b, 0xbc, 0x3b, 0xe8, 0x68, 0x26, 0x75, 0xf5, 0x71, 0x2f, 0x7e,
	0x4d, 0xdf, 0x3f, 0xf9, 0x3f, 0x0d, 0xfb, 0x84, 0x75, 0x66, 0xa2, 0x67, 0x7f, 0xe5, 0x47, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x99, 0x83, 0x38, 0x1e, 0xc9, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddStatusUpdate(ctx context.Context, in *MsgAddStatusUpdate, opts ...grpc.CallOption) (*EmptyResponse, error)
	RegisterLightNodeClient(ctx context.Context, in *MsgRegisterLightNodeClient, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddLightNodeClientLicense(ctx context.Context, in *MsgAddLightNodeClientLicense, opts ...grpc.CallOption) (*EmptyResponse, error)
	AuthLightNodeClient(ctx context.Context, in *MsgAuthLightNodeClient, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddStatusUpdate(ctx context.Context, in *MsgAddStatusUpdate, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.paloma.Msg/AddStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterLightNodeClient(ctx context.Context, in *MsgRegisterLightNodeClient, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.paloma.Msg/RegisterLightNodeClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddLightNodeClientLicense(ctx context.Context, in *MsgAddLightNodeClientLicense, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.paloma.Msg/AddLightNodeClientLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AuthLightNodeClient(ctx context.Context, in *MsgAuthLightNodeClient, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.paloma.Msg/AuthLightNodeClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddStatusUpdate(context.Context, *MsgAddStatusUpdate) (*EmptyResponse, error)
	RegisterLightNodeClient(context.Context, *MsgRegisterLightNodeClient) (*EmptyResponse, error)
	AddLightNodeClientLicense(context.Context, *MsgAddLightNodeClientLicense) (*EmptyResponse, error)
	AuthLightNodeClient(context.Context, *MsgAuthLightNodeClient) (*EmptyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddStatusUpdate(ctx context.Context, req *MsgAddStatusUpdate) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStatusUpdate not implemented")
}
func (*UnimplementedMsgServer) RegisterLightNodeClient(ctx context.Context, req *MsgRegisterLightNodeClient) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLightNodeClient not implemented")
}
func (*UnimplementedMsgServer) AddLightNodeClientLicense(ctx context.Context, req *MsgAddLightNodeClientLicense) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLightNodeClientLicense not implemented")
}
func (*UnimplementedMsgServer) AuthLightNodeClient(ctx context.Context, req *MsgAuthLightNodeClient) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLightNodeClient not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.paloma.Msg/AddStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddStatusUpdate(ctx, req.(*MsgAddStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterLightNodeClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterLightNodeClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterLightNodeClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.paloma.Msg/RegisterLightNodeClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterLightNodeClient(ctx, req.(*MsgRegisterLightNodeClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddLightNodeClientLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddLightNodeClientLicense)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddLightNodeClientLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.paloma.Msg/AddLightNodeClientLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddLightNodeClientLicense(ctx, req.(*MsgAddLightNodeClientLicense))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AuthLightNodeClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAuthLightNodeClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AuthLightNodeClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.paloma.Msg/AuthLightNodeClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AuthLightNodeClient(ctx, req.(*MsgAuthLightNodeClient))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "palomachain.paloma.paloma.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStatusUpdate",
			Handler:    _Msg_AddStatusUpdate_Handler,
		},
		{
			MethodName: "RegisterLightNodeClient",
			Handler:    _Msg_RegisterLightNodeClient_Handler,
		},
		{
			MethodName: "AddLightNodeClientLicense",
			Handler:    _Msg_AddLightNodeClientLicense_Handler,
		},
		{
			MethodName: "AuthLightNodeClient",
			Handler:    _Msg_AuthLightNodeClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "palomachain/paloma/paloma/tx.proto",
}

func (m *MsgAddStatusUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Level != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddStatusUpdate_KeyValuePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddStatusUpdate_KeyValuePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddStatusUpdate_KeyValuePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterLightNodeClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterLightNodeClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterLightNodeClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgAddLightNodeClientLicense) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLightNodeClientLicense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLightNodeClientLicense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VestingMonths != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VestingMonths))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ClientAddress) > 0 {
		i -= len(m.ClientAddress)
		copy(dAtA[i:], m.ClientAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgAuthLightNodeClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthLightNodeClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthLightNodeClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddStatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovTx(uint64(m.Level))
	}
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddStatusUpdate_KeyValuePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *EmptyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterLightNodeClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddLightNodeClientLicense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ClientAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.VestingMonths != 0 {
		n += 1 + sovTx(uint64(m.VestingMonths))
	}
	return n
}

func (m *MsgAuthLightNodeClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddStatusUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddStatusUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddStatusUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= MsgAddStatusUpdate_Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, MsgAddStatusUpdate_KeyValuePair{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddStatusUpdate_KeyValuePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValuePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValuePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterLightNodeClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterLightNodeClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterLightNodeClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLightNodeClientLicense) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLightNodeClientLicense: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLightNodeClientLicense: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingMonths", wireType)
			}
			m.VestingMonths = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingMonths |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthLightNodeClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthLightNodeClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthLightNodeClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
