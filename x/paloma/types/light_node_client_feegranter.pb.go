// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/paloma/light_node_client_feegranter.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LightNodeClientFeegranter struct {
	Account github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=account,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"account,omitempty"`
}

func (m *LightNodeClientFeegranter) Reset()         { *m = LightNodeClientFeegranter{} }
func (m *LightNodeClientFeegranter) String() string { return proto.CompactTextString(m) }
func (*LightNodeClientFeegranter) ProtoMessage()    {}
func (*LightNodeClientFeegranter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b3e305dcd8c47a6, []int{0}
}

func (m *LightNodeClientFeegranter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *LightNodeClientFeegranter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LightNodeClientFeegranter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *LightNodeClientFeegranter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightNodeClientFeegranter.Merge(m, src)
}

func (m *LightNodeClientFeegranter) XXX_Size() int {
	return m.Size()
}

func (m *LightNodeClientFeegranter) XXX_DiscardUnknown() {
	xxx_messageInfo_LightNodeClientFeegranter.DiscardUnknown(m)
}

var xxx_messageInfo_LightNodeClientFeegranter proto.InternalMessageInfo

func (m *LightNodeClientFeegranter) GetAccount() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Account
	}
	return nil
}

func init() {
	proto.RegisterType((*LightNodeClientFeegranter)(nil), "palomachain.paloma.paloma.LightNodeClientFeegranter")
}

func init() {
	proto.RegisterFile("palomachain/paloma/paloma/light_node_client_feegranter.proto", fileDescriptor_8b3e305dcd8c47a6)
}

var fileDescriptor_8b3e305dcd8c47a6 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x29, 0x48, 0xcc, 0xc9,
	0xcf, 0x4d, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x87, 0xb0, 0x61, 0x54, 0x4e, 0x66, 0x7a, 0x46,
	0x49, 0x7c, 0x5e, 0x7e, 0x4a, 0x6a, 0x7c, 0x72, 0x4e, 0x66, 0x6a, 0x5e, 0x49, 0x7c, 0x5a, 0x6a,
	0x6a, 0x7a, 0x51, 0x62, 0x5e, 0x49, 0x6a, 0x91, 0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x90, 0x24,
	0x92, 0x6e, 0x3d, 0x08, 0x1b, 0x4a, 0x49, 0x49, 0x26, 0xe7, 0x17, 0xe7, 0xe6, 0x17, 0xc7, 0x83,
	0x15, 0xea, 0x43, 0x38, 0x10, 0x5d, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x10, 0x71, 0x10, 0x0b,
	0x22, 0xaa, 0x94, 0xc1, 0x25, 0xe9, 0x03, 0xb2, 0xd1, 0x2f, 0x3f, 0x25, 0xd5, 0x19, 0x6c, 0x9f,
	0x1b, 0xdc, 0x3a, 0x21, 0x6f, 0x2e, 0xf6, 0xc4, 0xe4, 0xe4, 0xfc, 0xd2, 0xbc, 0x12, 0x09, 0x66,
	0x05, 0x46, 0x0d, 0x1e, 0x27, 0xc3, 0x5f, 0xf7, 0xe4, 0x75, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93,
	0xf4, 0x92, 0xf3, 0x73, 0xa1, 0x16, 0x40, 0x29, 0xdd, 0xe2, 0x94, 0x6c, 0xfd, 0x92, 0xca, 0x82,
	0xd4, 0x62, 0x3d, 0xc7, 0xe4, 0x64, 0xc7, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0xe2, 0x20, 0x98, 0x09,
	0x4e, 0x9e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84,
	0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x8f, 0x64, 0x22,
	0x96, 0x80, 0x29, 0x33, 0xd2, 0xaf, 0x80, 0xb1, 0xc1, 0xc6, 0x27, 0xb1, 0x81, 0xdd, 0x6e, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x24, 0xb0, 0x96, 0x47, 0x01, 0x00, 0x00,
}

func (m *LightNodeClientFeegranter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LightNodeClientFeegranter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LightNodeClientFeegranter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintLightNodeClientFeegranter(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func encodeVarintLightNodeClientFeegranter(dAtA []byte, offset int, v uint64) int {
	offset -= sovLightNodeClientFeegranter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *LightNodeClientFeegranter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovLightNodeClientFeegranter(uint64(l))
	}
	return n
}

func sovLightNodeClientFeegranter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozLightNodeClientFeegranter(x uint64) (n int) {
	return sovLightNodeClientFeegranter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *LightNodeClientFeegranter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLightNodeClientFeegranter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LightNodeClientFeegranter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LightNodeClientFeegranter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLightNodeClientFeegranter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLightNodeClientFeegranter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLightNodeClientFeegranter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLightNodeClientFeegranter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLightNodeClientFeegranter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipLightNodeClientFeegranter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLightNodeClientFeegranter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLightNodeClientFeegranter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLightNodeClientFeegranter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLightNodeClientFeegranter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLightNodeClientFeegranter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLightNodeClientFeegranter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLightNodeClientFeegranter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLightNodeClientFeegranter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLightNodeClientFeegranter = fmt.Errorf("proto: unexpected end of group")
)
