// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/paloma/light_node_client_funds.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LightNodeClientFunds struct {
	ClientAddress string     `protobuf:"bytes,1,opt,name=client_address,json=clientAddress,proto3" json:"client_address,omitempty"`
	Amount        types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	VestingYears  uint32     `protobuf:"varint,3,opt,name=vesting_years,json=vestingYears,proto3" json:"vesting_years,omitempty"`
	Feegrant      bool       `protobuf:"varint,4,opt,name=feegrant,proto3" json:"feegrant,omitempty"`
}

func (m *LightNodeClientFunds) Reset()         { *m = LightNodeClientFunds{} }
func (m *LightNodeClientFunds) String() string { return proto.CompactTextString(m) }
func (*LightNodeClientFunds) ProtoMessage()    {}
func (*LightNodeClientFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd5b301eff3689de, []int{0}
}
func (m *LightNodeClientFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LightNodeClientFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LightNodeClientFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LightNodeClientFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightNodeClientFunds.Merge(m, src)
}
func (m *LightNodeClientFunds) XXX_Size() int {
	return m.Size()
}
func (m *LightNodeClientFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_LightNodeClientFunds.DiscardUnknown(m)
}

var xxx_messageInfo_LightNodeClientFunds proto.InternalMessageInfo

func (m *LightNodeClientFunds) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

func (m *LightNodeClientFunds) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *LightNodeClientFunds) GetVestingYears() uint32 {
	if m != nil {
		return m.VestingYears
	}
	return 0
}

func (m *LightNodeClientFunds) GetFeegrant() bool {
	if m != nil {
		return m.Feegrant
	}
	return false
}

func init() {
	proto.RegisterType((*LightNodeClientFunds)(nil), "palomachain.paloma.paloma.LightNodeClientFunds")
}

func init() {
	proto.RegisterFile("palomachain/paloma/paloma/light_node_client_funds.proto", fileDescriptor_bd5b301eff3689de)
}

var fileDescriptor_bd5b301eff3689de = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0x63, 0xa8, 0xaa, 0x12, 0x28, 0x43, 0xd4, 0x21, 0xed, 0x60, 0x22, 0x58, 0x32, 0x40,
	0xa2, 0xc2, 0xd0, 0x11, 0xd1, 0x4a, 0x9d, 0x10, 0x43, 0x98, 0x60, 0x89, 0x9c, 0xc4, 0x75, 0x2d,
	0x35, 0x7e, 0x55, 0xec, 0x56, 0xf4, 0x2f, 0xf8, 0x18, 0x3e, 0xa2, 0x63, 0x61, 0x62, 0x42, 0xa8,
	0xfd, 0x11, 0xe4, 0xd8, 0x45, 0x0c, 0x4c, 0xef, 0xbe, 0xfb, 0xee, 0x8d, 0x8e, 0x62, 0x77, 0x30,
	0x27, 0x33, 0x28, 0x49, 0x3e, 0x25, 0x5c, 0xc4, 0x46, 0xef, 0xc7, 0x8c, 0xb3, 0xa9, 0x4a, 0x05,
	0x14, 0x34, 0xcd, 0x67, 0x9c, 0x0a, 0x95, 0x4e, 0x16, 0xa2, 0x90, 0xd1, 0xbc, 0x02, 0x05, 0x5e,
	0xf7, 0x4f, 0x31, 0x32, 0xda, 0x8e, 0x1e, 0xce, 0x41, 0x96, 0x20, 0xe3, 0x8c, 0x48, 0x1a, 0x2f,
	0xfb, 0x19, 0x55, 0xa4, 0x1f, 0xe7, 0xa0, 0x73, 0xba, 0xda, 0xeb, 0x9a, 0x7b, 0x5a, 0x6f, 0xb1,
	0x59, 0xec, 0xa9, 0xc3, 0x80, 0x81, 0xf1, 0xb5, 0x32, 0xee, 0xf9, 0x3b, 0x72, 0x3b, 0xf7, 0x9a,
	0xe6, 0x01, 0x0a, 0x3a, 0xaa, 0x59, 0xc6, 0x1a, 0xc5, 0xbb, 0x75, 0x4f, 0x2d, 0x1a, 0x29, 0x8a,
	0x8a, 0x4a, 0xe9, 0xa3, 0x00, 0x85, 0x47, 0x43, 0xff, 0xe3, 0xed, 0xaa, 0x63, 0x3f, 0x7c, 0x67,
	0x2e, 0x8f, 0xaa, 0xe2, 0x82, 0x25, 0x6d, 0x93, 0xb7, 0xa6, 0x37, 0x70, 0x9b, 0xa4, 0x84, 0x85,
	0x50, 0xfe, 0x41, 0x80, 0xc2, 0xe3, 0xeb, 0x6e, 0x64, 0x5b, 0x9a, 0x3d, 0xb2, 0xec, 0xd1, 0x08,
	0xb8, 0x18, 0x36, 0xd6, 0x5f, 0x67, 0x4e, 0x62, 0xe3, 0xde, 0x85, 0xdb, 0x5e, 0x52, 0xa9, 0xb8,
	0x60, 0xe9, 0x8a, 0x92, 0x4a, 0xfa, 0x87, 0x01, 0x0a, 0xdb, 0xc9, 0x89, 0x35, 0x9f, 0xb4, 0xe7,
	0xf5, 0xdc, 0xd6, 0x84, 0x52, 0x56, 0x11, 0xa1, 0xfc, 0x46, 0x80, 0xc2, 0x56, 0xf2, 0xbb, 0x0f,
	0xc7, 0xeb, 0x2d, 0x46, 0x9b, 0x2d, 0x46, 0xdf, 0x5b, 0x8c, 0x5e, 0x77, 0xd8, 0xd9, 0xec, 0xb0,
	0xf3, 0xb9, 0xc3, 0xce, 0xf3, 0x25, 0xe3, 0x6a, 0xba, 0xc8, 0xa2, 0x1c, 0xca, 0xf8, 0x9f, 0xd7,
	0x79, 0xd9, 0x0b, 0xb5, 0x9a, 0x53, 0x99, 0x35, 0xeb, 0x5f, 0x74, 0xf3, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x98, 0xc1, 0x22, 0x48, 0xc9, 0x01, 0x00, 0x00,
}

func (m *LightNodeClientFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LightNodeClientFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LightNodeClientFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Feegrant {
		i--
		if m.Feegrant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.VestingYears != 0 {
		i = encodeVarintLightNodeClientFunds(dAtA, i, uint64(m.VestingYears))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLightNodeClientFunds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ClientAddress) > 0 {
		i -= len(m.ClientAddress)
		copy(dAtA[i:], m.ClientAddress)
		i = encodeVarintLightNodeClientFunds(dAtA, i, uint64(len(m.ClientAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLightNodeClientFunds(dAtA []byte, offset int, v uint64) int {
	offset -= sovLightNodeClientFunds(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LightNodeClientFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientAddress)
	if l > 0 {
		n += 1 + l + sovLightNodeClientFunds(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLightNodeClientFunds(uint64(l))
	if m.VestingYears != 0 {
		n += 1 + sovLightNodeClientFunds(uint64(m.VestingYears))
	}
	if m.Feegrant {
		n += 2
	}
	return n
}

func sovLightNodeClientFunds(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLightNodeClientFunds(x uint64) (n int) {
	return sovLightNodeClientFunds(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LightNodeClientFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLightNodeClientFunds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LightNodeClientFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LightNodeClientFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLightNodeClientFunds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLightNodeClientFunds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLightNodeClientFunds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLightNodeClientFunds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLightNodeClientFunds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLightNodeClientFunds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingYears", wireType)
			}
			m.VestingYears = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLightNodeClientFunds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingYears |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feegrant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLightNodeClientFunds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Feegrant = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLightNodeClientFunds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLightNodeClientFunds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLightNodeClientFunds(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLightNodeClientFunds
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLightNodeClientFunds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLightNodeClientFunds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLightNodeClientFunds
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLightNodeClientFunds
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLightNodeClientFunds
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLightNodeClientFunds        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLightNodeClientFunds          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLightNodeClientFunds = fmt.Errorf("proto: unexpected end of group")
)
