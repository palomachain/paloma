// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/evm/turnstone.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	cosmossdk_io_math "cosmossdk.io/math"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Valset struct {
	// hex addresses on the EVM network
	Validators []string `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
	Powers     []uint64 `protobuf:"varint,2,rep,packed,name=powers,proto3" json:"powers,omitempty"`
	ValsetID   uint64   `protobuf:"varint,3,opt,name=valsetID,proto3" json:"valsetID,omitempty"`
}

func (m *Valset) Reset()         { *m = Valset{} }
func (m *Valset) String() string { return proto.CompactTextString(m) }
func (*Valset) ProtoMessage()    {}
func (*Valset) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{0}
}

func (m *Valset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Valset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Valset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Valset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Valset.Merge(m, src)
}

func (m *Valset) XXX_Size() int {
	return m.Size()
}

func (m *Valset) XXX_DiscardUnknown() {
	xxx_messageInfo_Valset.DiscardUnknown(m)
}

var xxx_messageInfo_Valset proto.InternalMessageInfo

func (m *Valset) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *Valset) GetPowers() []uint64 {
	if m != nil {
		return m.Powers
	}
	return nil
}

func (m *Valset) GetValsetID() uint64 {
	if m != nil {
		return m.ValsetID
	}
	return 0
}

type Fees struct {
	RelayerFee   uint64 `protobuf:"varint,1,opt,name=relayerFee,proto3" json:"relayerFee,omitempty"`
	CommunityFee uint64 `protobuf:"varint,2,opt,name=communityFee,proto3" json:"communityFee,omitempty"`
	SecurityFee  uint64 `protobuf:"varint,3,opt,name=securityFee,proto3" json:"securityFee,omitempty"`
}

func (m *Fees) Reset()         { *m = Fees{} }
func (m *Fees) String() string { return proto.CompactTextString(m) }
func (*Fees) ProtoMessage()    {}
func (*Fees) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{1}
}

func (m *Fees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Fees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Fees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fees.Merge(m, src)
}

func (m *Fees) XXX_Size() int {
	return m.Size()
}

func (m *Fees) XXX_DiscardUnknown() {
	xxx_messageInfo_Fees.DiscardUnknown(m)
}

var xxx_messageInfo_Fees proto.InternalMessageInfo

func (m *Fees) GetRelayerFee() uint64 {
	if m != nil {
		return m.RelayerFee
	}
	return 0
}

func (m *Fees) GetCommunityFee() uint64 {
	if m != nil {
		return m.CommunityFee
	}
	return 0
}

func (m *Fees) GetSecurityFee() uint64 {
	if m != nil {
		return m.SecurityFee
	}
	return 0
}

type SubmitLogicCall struct {
	HexContractAddress    string                                `protobuf:"bytes,1,opt,name=hexContractAddress,proto3" json:"hexContractAddress,omitempty"`
	Abi                   []byte                                `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`
	Payload               []byte                                `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Deadline              int64                                 `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
	SenderAddress         []byte                                `protobuf:"bytes,5,opt,name=senderAddress,proto3" json:"senderAddress,omitempty"`
	ContractAddress       []byte                                `protobuf:"bytes,6,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	ExecutionRequirements SubmitLogicCall_ExecutionRequirements `protobuf:"bytes,7,opt,name=executionRequirements,proto3" json:"executionRequirements"`
	Retries               uint32                                `protobuf:"varint,8,opt,name=retries,proto3" json:"retries,omitempty"`
	Fees                  *Fees                                 `protobuf:"bytes,10,opt,name=fees,proto3" json:"fees,omitempty"`
}

func (m *SubmitLogicCall) Reset()         { *m = SubmitLogicCall{} }
func (m *SubmitLogicCall) String() string { return proto.CompactTextString(m) }
func (*SubmitLogicCall) ProtoMessage()    {}
func (*SubmitLogicCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{2}
}

func (m *SubmitLogicCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *SubmitLogicCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitLogicCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *SubmitLogicCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitLogicCall.Merge(m, src)
}

func (m *SubmitLogicCall) XXX_Size() int {
	return m.Size()
}

func (m *SubmitLogicCall) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitLogicCall.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitLogicCall proto.InternalMessageInfo

func (m *SubmitLogicCall) GetHexContractAddress() string {
	if m != nil {
		return m.HexContractAddress
	}
	return ""
}

func (m *SubmitLogicCall) GetAbi() []byte {
	if m != nil {
		return m.Abi
	}
	return nil
}

func (m *SubmitLogicCall) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SubmitLogicCall) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *SubmitLogicCall) GetSenderAddress() []byte {
	if m != nil {
		return m.SenderAddress
	}
	return nil
}

func (m *SubmitLogicCall) GetContractAddress() []byte {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

func (m *SubmitLogicCall) GetExecutionRequirements() SubmitLogicCall_ExecutionRequirements {
	if m != nil {
		return m.ExecutionRequirements
	}
	return SubmitLogicCall_ExecutionRequirements{}
}

func (m *SubmitLogicCall) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *SubmitLogicCall) GetFees() *Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

type SubmitLogicCall_ExecutionRequirements struct {
	EnforceMEVRelay bool `protobuf:"varint,1,opt,name=enforceMEVRelay,proto3" json:"enforceMEVRelay,omitempty"`
}

func (m *SubmitLogicCall_ExecutionRequirements) Reset()         { *m = SubmitLogicCall_ExecutionRequirements{} }
func (m *SubmitLogicCall_ExecutionRequirements) String() string { return proto.CompactTextString(m) }
func (*SubmitLogicCall_ExecutionRequirements) ProtoMessage()    {}
func (*SubmitLogicCall_ExecutionRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{2, 0}
}

func (m *SubmitLogicCall_ExecutionRequirements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *SubmitLogicCall_ExecutionRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitLogicCall_ExecutionRequirements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *SubmitLogicCall_ExecutionRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitLogicCall_ExecutionRequirements.Merge(m, src)
}

func (m *SubmitLogicCall_ExecutionRequirements) XXX_Size() int {
	return m.Size()
}

func (m *SubmitLogicCall_ExecutionRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitLogicCall_ExecutionRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitLogicCall_ExecutionRequirements proto.InternalMessageInfo

func (m *SubmitLogicCall_ExecutionRequirements) GetEnforceMEVRelay() bool {
	if m != nil {
		return m.EnforceMEVRelay
	}
	return false
}

type UpdateValset struct {
	Valset *Valset `protobuf:"bytes,1,opt,name=valset,proto3" json:"valset,omitempty"`
}

func (m *UpdateValset) Reset()         { *m = UpdateValset{} }
func (m *UpdateValset) String() string { return proto.CompactTextString(m) }
func (*UpdateValset) ProtoMessage()    {}
func (*UpdateValset) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{3}
}

func (m *UpdateValset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *UpdateValset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateValset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *UpdateValset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateValset.Merge(m, src)
}

func (m *UpdateValset) XXX_Size() int {
	return m.Size()
}

func (m *UpdateValset) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateValset.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateValset proto.InternalMessageInfo

func (m *UpdateValset) GetValset() *Valset {
	if m != nil {
		return m.Valset
	}
	return nil
}

type CompassHandover struct {
	ForwardCallArgs []CompassHandover_ForwardCallArgs `protobuf:"bytes,1,rep,name=forwardCallArgs,proto3" json:"forwardCallArgs"`
	Deadline        int64                             `protobuf:"varint,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// Contains ID of the new smart contract
	Id uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CompassHandover) Reset()         { *m = CompassHandover{} }
func (m *CompassHandover) String() string { return proto.CompactTextString(m) }
func (*CompassHandover) ProtoMessage()    {}
func (*CompassHandover) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{4}
}

func (m *CompassHandover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *CompassHandover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompassHandover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *CompassHandover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompassHandover.Merge(m, src)
}

func (m *CompassHandover) XXX_Size() int {
	return m.Size()
}

func (m *CompassHandover) XXX_DiscardUnknown() {
	xxx_messageInfo_CompassHandover.DiscardUnknown(m)
}

var xxx_messageInfo_CompassHandover proto.InternalMessageInfo

func (m *CompassHandover) GetForwardCallArgs() []CompassHandover_ForwardCallArgs {
	if m != nil {
		return m.ForwardCallArgs
	}
	return nil
}

func (m *CompassHandover) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *CompassHandover) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CompassHandover_ForwardCallArgs struct {
	HexContractAddress string `protobuf:"bytes,1,opt,name=hexContractAddress,proto3" json:"hexContractAddress,omitempty"`
	Payload            []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *CompassHandover_ForwardCallArgs) Reset()         { *m = CompassHandover_ForwardCallArgs{} }
func (m *CompassHandover_ForwardCallArgs) String() string { return proto.CompactTextString(m) }
func (*CompassHandover_ForwardCallArgs) ProtoMessage()    {}
func (*CompassHandover_ForwardCallArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{4, 0}
}

func (m *CompassHandover_ForwardCallArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *CompassHandover_ForwardCallArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompassHandover_ForwardCallArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *CompassHandover_ForwardCallArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompassHandover_ForwardCallArgs.Merge(m, src)
}

func (m *CompassHandover_ForwardCallArgs) XXX_Size() int {
	return m.Size()
}

func (m *CompassHandover_ForwardCallArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_CompassHandover_ForwardCallArgs.DiscardUnknown(m)
}

var xxx_messageInfo_CompassHandover_ForwardCallArgs proto.InternalMessageInfo

func (m *CompassHandover_ForwardCallArgs) GetHexContractAddress() string {
	if m != nil {
		return m.HexContractAddress
	}
	return ""
}

func (m *CompassHandover_ForwardCallArgs) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UploadSmartContract struct {
	Bytecode         []byte `protobuf:"bytes,1,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Abi              string `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`
	ConstructorInput []byte `protobuf:"bytes,3,opt,name=constructorInput,proto3" json:"constructorInput,omitempty"`
	Id               uint64 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Retries          uint32 `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (m *UploadSmartContract) Reset()         { *m = UploadSmartContract{} }
func (m *UploadSmartContract) String() string { return proto.CompactTextString(m) }
func (*UploadSmartContract) ProtoMessage()    {}
func (*UploadSmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{5}
}

func (m *UploadSmartContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *UploadSmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadSmartContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *UploadSmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadSmartContract.Merge(m, src)
}

func (m *UploadSmartContract) XXX_Size() int {
	return m.Size()
}

func (m *UploadSmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadSmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_UploadSmartContract proto.InternalMessageInfo

func (m *UploadSmartContract) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

func (m *UploadSmartContract) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}

func (m *UploadSmartContract) GetConstructorInput() []byte {
	if m != nil {
		return m.ConstructorInput
	}
	return nil
}

func (m *UploadSmartContract) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UploadSmartContract) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

type UploadUserSmartContract struct {
	Bytecode        []byte `protobuf:"bytes,1,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	DeployerAddress string `protobuf:"bytes,2,opt,name=deployerAddress,proto3" json:"deployerAddress,omitempty"`
	Deadline        int64  `protobuf:"varint,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	SenderAddress   []byte `protobuf:"bytes,4,opt,name=senderAddress,proto3" json:"senderAddress,omitempty"`
	BlockHeight     int64  `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Id              uint64 `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Retries         uint32 `protobuf:"varint,7,opt,name=retries,proto3" json:"retries,omitempty"`
	Fees            *Fees  `protobuf:"bytes,8,opt,name=fees,proto3" json:"fees,omitempty"`
}

func (m *UploadUserSmartContract) Reset()         { *m = UploadUserSmartContract{} }
func (m *UploadUserSmartContract) String() string { return proto.CompactTextString(m) }
func (*UploadUserSmartContract) ProtoMessage()    {}
func (*UploadUserSmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{6}
}

func (m *UploadUserSmartContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *UploadUserSmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadUserSmartContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *UploadUserSmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadUserSmartContract.Merge(m, src)
}

func (m *UploadUserSmartContract) XXX_Size() int {
	return m.Size()
}

func (m *UploadUserSmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadUserSmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_UploadUserSmartContract proto.InternalMessageInfo

func (m *UploadUserSmartContract) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

func (m *UploadUserSmartContract) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

func (m *UploadUserSmartContract) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *UploadUserSmartContract) GetSenderAddress() []byte {
	if m != nil {
		return m.SenderAddress
	}
	return nil
}

func (m *UploadUserSmartContract) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *UploadUserSmartContract) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UploadUserSmartContract) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *UploadUserSmartContract) GetFees() *Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

type Message struct {
	TurnstoneID      string `protobuf:"bytes,1,opt,name=turnstoneID,proto3" json:"turnstoneID,omitempty"`
	ChainReferenceID string `protobuf:"bytes,2,opt,name=chainReferenceID,proto3" json:"chainReferenceID,omitempty"`
	// Types that are valid to be assigned to Action:
	//
	//	*Message_SubmitLogicCall
	//	*Message_UpdateValset
	//	*Message_UploadSmartContract
	//	*Message_UploadUserSmartContract
	//	*Message_CompassHandover
	Action      isMessage_Action `protobuf_oneof:"action"`
	CompassAddr string           `protobuf:"bytes,6,opt,name=compassAddr,proto3" json:"compassAddr,omitempty"`
	Assignee    string           `protobuf:"bytes,7,opt,name=assignee,proto3" json:"assignee,omitempty"`
	// block height at which the message was assinged to the
	// current relayer. Updated when message is reassigned.
	AssignedAtBlockHeight cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=assigned_at_block_height,json=assignedAtBlockHeight,proto3,customtype=cosmossdk.io/math.Int" json:"assigned_at_block_height"`
	AssigneeRemoteAddress string                `protobuf:"bytes,10,opt,name=assigneeRemoteAddress,proto3" json:"assigneeRemoteAddress,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{7}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}

func (m *Message) XXX_Size() int {
	return m.Size()
}

func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Action interface {
	isMessage_Action()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_SubmitLogicCall struct {
	SubmitLogicCall *SubmitLogicCall `protobuf:"bytes,3,opt,name=submitLogicCall,proto3,oneof" json:"submitLogicCall,omitempty"`
}
type Message_UpdateValset struct {
	UpdateValset *UpdateValset `protobuf:"bytes,4,opt,name=updateValset,proto3,oneof" json:"updateValset,omitempty"`
}
type Message_UploadSmartContract struct {
	UploadSmartContract *UploadSmartContract `protobuf:"bytes,5,opt,name=uploadSmartContract,proto3,oneof" json:"uploadSmartContract,omitempty"`
}
type Message_UploadUserSmartContract struct {
	UploadUserSmartContract *UploadUserSmartContract `protobuf:"bytes,11,opt,name=uploadUserSmartContract,proto3,oneof" json:"uploadUserSmartContract,omitempty"`
}
type Message_CompassHandover struct {
	CompassHandover *CompassHandover `protobuf:"bytes,12,opt,name=compassHandover,proto3,oneof" json:"compassHandover,omitempty"`
}

func (*Message_SubmitLogicCall) isMessage_Action()         {}
func (*Message_UpdateValset) isMessage_Action()            {}
func (*Message_UploadSmartContract) isMessage_Action()     {}
func (*Message_UploadUserSmartContract) isMessage_Action() {}
func (*Message_CompassHandover) isMessage_Action()         {}

func (m *Message) GetAction() isMessage_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Message) GetTurnstoneID() string {
	if m != nil {
		return m.TurnstoneID
	}
	return ""
}

func (m *Message) GetChainReferenceID() string {
	if m != nil {
		return m.ChainReferenceID
	}
	return ""
}

func (m *Message) GetSubmitLogicCall() *SubmitLogicCall {
	if x, ok := m.GetAction().(*Message_SubmitLogicCall); ok {
		return x.SubmitLogicCall
	}
	return nil
}

func (m *Message) GetUpdateValset() *UpdateValset {
	if x, ok := m.GetAction().(*Message_UpdateValset); ok {
		return x.UpdateValset
	}
	return nil
}

func (m *Message) GetUploadSmartContract() *UploadSmartContract {
	if x, ok := m.GetAction().(*Message_UploadSmartContract); ok {
		return x.UploadSmartContract
	}
	return nil
}

func (m *Message) GetUploadUserSmartContract() *UploadUserSmartContract {
	if x, ok := m.GetAction().(*Message_UploadUserSmartContract); ok {
		return x.UploadUserSmartContract
	}
	return nil
}

func (m *Message) GetCompassHandover() *CompassHandover {
	if x, ok := m.GetAction().(*Message_CompassHandover); ok {
		return x.CompassHandover
	}
	return nil
}

func (m *Message) GetCompassAddr() string {
	if m != nil {
		return m.CompassAddr
	}
	return ""
}

func (m *Message) GetAssignee() string {
	if m != nil {
		return m.Assignee
	}
	return ""
}

func (m *Message) GetAssigneeRemoteAddress() string {
	if m != nil {
		return m.AssigneeRemoteAddress
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_SubmitLogicCall)(nil),
		(*Message_UpdateValset)(nil),
		(*Message_UploadSmartContract)(nil),
		(*Message_UploadUserSmartContract)(nil),
		(*Message_CompassHandover)(nil),
	}
}

type TxExecutedProof struct {
	SerializedTX      []byte `protobuf:"bytes,1,opt,name=serializedTX,proto3" json:"serializedTX,omitempty"`
	SerializedReceipt []byte `protobuf:"bytes,2,opt,name=serializedReceipt,proto3" json:"serializedReceipt,omitempty"`
}

func (m *TxExecutedProof) Reset()         { *m = TxExecutedProof{} }
func (m *TxExecutedProof) String() string { return proto.CompactTextString(m) }
func (*TxExecutedProof) ProtoMessage()    {}
func (*TxExecutedProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{8}
}

func (m *TxExecutedProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *TxExecutedProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxExecutedProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *TxExecutedProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxExecutedProof.Merge(m, src)
}

func (m *TxExecutedProof) XXX_Size() int {
	return m.Size()
}

func (m *TxExecutedProof) XXX_DiscardUnknown() {
	xxx_messageInfo_TxExecutedProof.DiscardUnknown(m)
}

var xxx_messageInfo_TxExecutedProof proto.InternalMessageInfo

func (m *TxExecutedProof) GetSerializedTX() []byte {
	if m != nil {
		return m.SerializedTX
	}
	return nil
}

func (m *TxExecutedProof) GetSerializedReceipt() []byte {
	if m != nil {
		return m.SerializedReceipt
	}
	return nil
}

type SmartContractExecutionErrorProof struct {
	ErrorMessage string `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (m *SmartContractExecutionErrorProof) Reset()         { *m = SmartContractExecutionErrorProof{} }
func (m *SmartContractExecutionErrorProof) String() string { return proto.CompactTextString(m) }
func (*SmartContractExecutionErrorProof) ProtoMessage()    {}
func (*SmartContractExecutionErrorProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_86cc126a804337fd, []int{9}
}

func (m *SmartContractExecutionErrorProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *SmartContractExecutionErrorProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmartContractExecutionErrorProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *SmartContractExecutionErrorProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartContractExecutionErrorProof.Merge(m, src)
}

func (m *SmartContractExecutionErrorProof) XXX_Size() int {
	return m.Size()
}

func (m *SmartContractExecutionErrorProof) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartContractExecutionErrorProof.DiscardUnknown(m)
}

var xxx_messageInfo_SmartContractExecutionErrorProof proto.InternalMessageInfo

func (m *SmartContractExecutionErrorProof) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*Valset)(nil), "palomachain.paloma.evm.Valset")
	proto.RegisterType((*Fees)(nil), "palomachain.paloma.evm.Fees")
	proto.RegisterType((*SubmitLogicCall)(nil), "palomachain.paloma.evm.SubmitLogicCall")
	proto.RegisterType((*SubmitLogicCall_ExecutionRequirements)(nil), "palomachain.paloma.evm.SubmitLogicCall.ExecutionRequirements")
	proto.RegisterType((*UpdateValset)(nil), "palomachain.paloma.evm.UpdateValset")
	proto.RegisterType((*CompassHandover)(nil), "palomachain.paloma.evm.CompassHandover")
	proto.RegisterType((*CompassHandover_ForwardCallArgs)(nil), "palomachain.paloma.evm.CompassHandover.ForwardCallArgs")
	proto.RegisterType((*UploadSmartContract)(nil), "palomachain.paloma.evm.UploadSmartContract")
	proto.RegisterType((*UploadUserSmartContract)(nil), "palomachain.paloma.evm.UploadUserSmartContract")
	proto.RegisterType((*Message)(nil), "palomachain.paloma.evm.Message")
	proto.RegisterType((*TxExecutedProof)(nil), "palomachain.paloma.evm.TxExecutedProof")
	proto.RegisterType((*SmartContractExecutionErrorProof)(nil), "palomachain.paloma.evm.SmartContractExecutionErrorProof")
}

func init() {
	proto.RegisterFile("palomachain/paloma/evm/turnstone.proto", fileDescriptor_86cc126a804337fd)
}

var fileDescriptor_86cc126a804337fd = []byte{
	// 1086 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xda, 0xae, 0x63, 0x8f, 0x5d, 0xdc, 0x6e, 0x49, 0xba, 0x44, 0xc8, 0xb5, 0xac, 0x0a,
	0x4c, 0x11, 0xeb, 0xca, 0xa0, 0x72, 0xe2, 0x90, 0xa4, 0x89, 0x9c, 0x8a, 0x0a, 0x34, 0x69, 0x2a,
	0x04, 0x48, 0xd1, 0x78, 0xf7, 0xd9, 0x1e, 0x65, 0x77, 0x67, 0x99, 0x99, 0x4d, 0x62, 0xae, 0xfc,
	0x01, 0xae, 0x5c, 0x91, 0x90, 0x38, 0x72, 0xe0, 0x47, 0xf4, 0x58, 0x71, 0x42, 0x1c, 0x2a, 0x94,
	0x1c, 0x10, 0xff, 0x02, 0xcd, 0xec, 0xda, 0xdd, 0x5d, 0xaf, 0x4b, 0x7b, 0x59, 0xcd, 0xfb, 0xe6,
	0xcd, 0x9b, 0x37, 0x6f, 0xbe, 0xef, 0xed, 0xa0, 0xf7, 0x42, 0xe2, 0x31, 0x9f, 0x38, 0x33, 0x42,
	0x83, 0x41, 0x3c, 0x1e, 0xc0, 0x99, 0x3f, 0x90, 0x11, 0x0f, 0x84, 0x64, 0x01, 0xd8, 0x21, 0x67,
	0x92, 0x99, 0x5b, 0x29, 0x3f, 0x3b, 0x1e, 0xdb, 0x70, 0xe6, 0x6f, 0xbf, 0x3d, 0x65, 0x53, 0xa6,
	0x5d, 0x06, 0x6a, 0x14, 0x7b, 0x6f, 0xbf, 0xe3, 0x30, 0xe1, 0x33, 0x71, 0x12, 0x4f, 0xc4, 0x46,
	0x32, 0x75, 0x93, 0xf8, 0x34, 0x60, 0x03, 0xfd, 0x8d, 0xa1, 0xde, 0xb7, 0xa8, 0xf6, 0x94, 0x78,
	0x02, 0xa4, 0xd9, 0x41, 0xe8, 0x8c, 0x78, 0xd4, 0x25, 0x92, 0x71, 0x61, 0x19, 0xdd, 0x4a, 0xbf,
	0x81, 0x53, 0x88, 0xb9, 0x85, 0x6a, 0x21, 0x3b, 0x07, 0x2e, 0xac, 0x72, 0xb7, 0xd2, 0xaf, 0xe2,
	0xc4, 0x32, 0xb7, 0x51, 0xfd, 0x4c, 0x47, 0x38, 0x7c, 0x68, 0x55, 0xba, 0x46, 0xbf, 0x8a, 0x97,
	0x76, 0xcf, 0x43, 0xd5, 0x03, 0x00, 0xa1, 0x62, 0x73, 0xf0, 0xc8, 0x1c, 0xf8, 0x01, 0x80, 0x65,
	0x68, 0xaf, 0x14, 0x62, 0xf6, 0x50, 0xcb, 0x61, 0xbe, 0x1f, 0x05, 0x54, 0xce, 0x95, 0x47, 0x59,
	0x7b, 0x64, 0x30, 0xb3, 0x8b, 0x9a, 0x02, 0x9c, 0x88, 0x27, 0x2e, 0xf1, 0x56, 0x69, 0xa8, 0xf7,
	0x6f, 0x05, 0xb5, 0x8f, 0xa2, 0xb1, 0x4f, 0xe5, 0xe7, 0x6c, 0x4a, 0x9d, 0x3d, 0xe2, 0x79, 0xa6,
	0x8d, 0xcc, 0x19, 0x5c, 0xec, 0xb1, 0x40, 0x72, 0xe2, 0xc8, 0x1d, 0xd7, 0xe5, 0x20, 0x84, 0xce,
	0xa0, 0x81, 0x0b, 0x66, 0xcc, 0x1b, 0xa8, 0x42, 0xc6, 0x54, 0x27, 0xd0, 0xc2, 0x6a, 0x68, 0x5a,
	0x68, 0x23, 0x24, 0x73, 0x8f, 0x11, 0x57, 0xef, 0xd9, 0xc2, 0x0b, 0x53, 0x9d, 0xdc, 0x05, 0xe2,
	0x7a, 0x34, 0x00, 0xab, 0xda, 0x35, 0xfa, 0x15, 0xbc, 0xb4, 0xcd, 0xbb, 0xe8, 0xba, 0x80, 0xc0,
	0x05, 0xbe, 0xd8, 0xf2, 0x9a, 0x5e, 0x9b, 0x05, 0xcd, 0x3e, 0x6a, 0x3b, 0xb9, 0xd4, 0x6a, 0xda,
	0x2f, 0x0f, 0x9b, 0x73, 0xb4, 0x09, 0x17, 0xe0, 0x44, 0x92, 0xb2, 0x00, 0xc3, 0x77, 0x11, 0xe5,
	0xe0, 0x43, 0x20, 0x85, 0xb5, 0xd1, 0x35, 0xfa, 0xcd, 0xe1, 0x67, 0x76, 0x31, 0x47, 0xec, 0x5c,
	0x3d, 0xec, 0xfd, 0xa2, 0x20, 0xbb, 0xd5, 0x67, 0x2f, 0xee, 0x94, 0x70, 0xf1, 0x0e, 0xaa, 0x00,
	0x1c, 0x24, 0xa7, 0x20, 0xac, 0x7a, 0xd7, 0xe8, 0x5f, 0xc7, 0x0b, 0xd3, 0x7c, 0x80, 0xaa, 0x13,
	0x00, 0x61, 0x21, 0x9d, 0xc3, 0xbb, 0xeb, 0x72, 0x50, 0x14, 0xd0, 0x5b, 0x18, 0x58, 0xfb, 0x6f,
	0xef, 0xa0, 0xcd, 0xc2, 0x3c, 0x54, 0x3d, 0x20, 0x98, 0x30, 0xee, 0xc0, 0xe3, 0xfd, 0xa7, 0x58,
	0xf1, 0x43, 0x5f, 0x55, 0x1d, 0xe7, 0xe1, 0xde, 0x01, 0x6a, 0x1d, 0x87, 0x2e, 0x91, 0x90, 0xb0,
	0xf7, 0x01, 0xaa, 0xc5, 0xac, 0xd3, 0x0b, 0x9a, 0xc3, 0xce, 0xba, 0x64, 0x62, 0x7f, 0x9c, 0x78,
	0xf7, 0x7e, 0x28, 0xa3, 0xf6, 0x1e, 0xf3, 0x43, 0x22, 0xc4, 0x88, 0x04, 0x2e, 0x3b, 0x03, 0x6e,
	0x4e, 0x51, 0x7b, 0xc2, 0xf8, 0x39, 0xe1, 0xae, 0x2a, 0xd9, 0x0e, 0x9f, 0xc6, 0x72, 0x68, 0x0e,
	0x3f, 0x5d, 0x17, 0x34, 0x17, 0xc1, 0x3e, 0xc8, 0x2e, 0x4f, 0xea, 0x9b, 0x8f, 0x9a, 0x21, 0x50,
	0x39, 0x47, 0xa0, 0xb7, 0x50, 0x99, 0xba, 0x09, 0xcb, 0xcb, 0xd4, 0xdd, 0xfe, 0x06, 0xb5, 0x73,
	0x51, 0xdf, 0x98, 0xdb, 0x29, 0x26, 0x97, 0x33, 0x4c, 0xee, 0xfd, 0x64, 0xa0, 0x5b, 0xc7, 0xa1,
	0x1a, 0x1e, 0xf9, 0x84, 0xcb, 0xc5, 0x42, 0x95, 0xe0, 0x78, 0x2e, 0xc1, 0x61, 0x6e, 0xac, 0xda,
	0x16, 0x5e, 0xda, 0x69, 0xa5, 0x34, 0x62, 0xa5, 0xdc, 0x43, 0x37, 0x1c, 0x16, 0x08, 0xc9, 0x23,
	0x47, 0x32, 0x7e, 0x18, 0x84, 0x91, 0x4c, 0x24, 0xb3, 0x82, 0x27, 0xc7, 0xab, 0x2e, 0x8e, 0x97,
	0x26, 0xd9, 0xb5, 0x0c, 0xc9, 0x7a, 0xbf, 0x94, 0xd1, 0xed, 0x38, 0xb7, 0x63, 0x01, 0xfc, 0xf5,
	0xf3, 0xeb, 0xa3, 0xb6, 0x0b, 0xa1, 0xc7, 0xe6, 0x2f, 0x35, 0x18, 0xe7, 0x9a, 0x87, 0x33, 0xd7,
	0x50, 0xf9, 0x3f, 0x1d, 0x57, 0x8b, 0x74, 0xdc, 0x45, 0xcd, 0xb1, 0xc7, 0x9c, 0xd3, 0x11, 0xd0,
	0xe9, 0x4c, 0xea, 0x13, 0x54, 0x70, 0x1a, 0x4a, 0xce, 0x5b, 0x2b, 0x3a, 0xef, 0x46, 0xb1, 0xa8,
	0xea, 0x6f, 0x26, 0xaa, 0xde, 0xcf, 0x35, 0xb4, 0xf1, 0x18, 0x84, 0x20, 0x53, 0xdd, 0x2b, 0x97,
	0x3f, 0x91, 0xc3, 0x87, 0x09, 0x25, 0xd2, 0x90, 0xbe, 0x2b, 0x15, 0x12, 0xc3, 0x04, 0x38, 0x04,
	0x8e, 0x72, 0x8b, 0xcb, 0xb3, 0x82, 0x9b, 0x47, 0xa8, 0x2d, 0xb2, 0x6d, 0x44, 0x97, 0xa9, 0x39,
	0x7c, 0xff, 0x35, 0xbb, 0xce, 0xa8, 0x84, 0xf3, 0x11, 0xcc, 0x47, 0xa8, 0x15, 0xa5, 0x04, 0xac,
	0xeb, 0xda, 0x1c, 0xde, 0x5d, 0x17, 0x31, 0x2d, 0xf6, 0x51, 0x09, 0x67, 0xd6, 0x9a, 0x27, 0xe8,
	0x56, 0xb4, 0xca, 0x5e, 0x7d, 0x0d, 0xcd, 0xe1, 0x87, 0xeb, 0x43, 0xae, 0x2c, 0x19, 0x95, 0x70,
	0x51, 0x24, 0xf3, 0x14, 0xdd, 0x8e, 0x8a, 0x29, 0x68, 0x35, 0xf5, 0x26, 0x83, 0x57, 0x6f, 0xb2,
	0xb2, 0x6c, 0x54, 0xc2, 0xeb, 0x22, 0xaa, 0x72, 0x3b, 0xd9, 0x7e, 0x62, 0xb5, 0x5e, 0x5d, 0xee,
	0x5c, 0xfb, 0x51, 0xe5, 0xce, 0x45, 0x50, 0x8c, 0x48, 0x20, 0xc5, 0x59, 0x4d, 0xc4, 0x06, 0x4e,
	0x43, 0x4a, 0x05, 0x44, 0x08, 0x3a, 0x0d, 0x00, 0x34, 0x25, 0x1b, 0x78, 0x69, 0x9b, 0x14, 0x59,
	0xc9, 0xd8, 0x3d, 0x21, 0xf2, 0x44, 0x13, 0xfb, 0x64, 0x16, 0x93, 0xbd, 0xa1, 0x7c, 0x77, 0xef,
	0xab, 0x0e, 0xf7, 0xd7, 0x8b, 0x3b, 0x9b, 0xf1, 0x83, 0x43, 0xb8, 0xa7, 0x36, 0x65, 0x03, 0x9f,
	0xc8, 0x99, 0x7d, 0x18, 0xc8, 0x3f, 0x7e, 0xff, 0x08, 0x25, 0x2f, 0x91, 0xc3, 0x40, 0xfe, 0xfa,
	0xcf, 0x6f, 0xf7, 0x0c, 0xbc, 0xb9, 0x88, 0xb8, 0x23, 0x77, 0x53, 0x42, 0xf9, 0x04, 0x2d, 0x26,
	0x00, 0x83, 0xcf, 0x24, 0x2c, 0x84, 0x87, 0x74, 0x4e, 0xc5, 0x93, 0xbb, 0x75, 0x54, 0x23, 0x8e,
	0xfa, 0x9d, 0x3c, 0xaa, 0xd6, 0xeb, 0x37, 0x1a, 0x78, 0x4b, 0x72, 0x12, 0x88, 0x09, 0xf0, 0x7d,
	0xbc, 0x37, 0xbc, 0xff, 0xc5, 0x79, 0x00, 0x5c, 0xcc, 0x68, 0xd8, 0xa3, 0xa8, 0xfd, 0xe4, 0x22,
	0xfe, 0xf7, 0x80, 0xfb, 0x25, 0x67, 0x6c, 0xa2, 0xde, 0x1e, 0x02, 0x38, 0x25, 0x1e, 0xfd, 0x1e,
	0xdc, 0x27, 0x5f, 0x25, 0x7d, 0x24, 0x83, 0x99, 0x43, 0x74, 0xf3, 0xa5, 0x8d, 0xc1, 0x01, 0x1a,
	0xca, 0xb8, 0x87, 0x26, 0x12, 0x5c, 0x9d, 0xee, 0x1d, 0xa0, 0x6e, 0xe6, 0x5e, 0x97, 0x7f, 0xbc,
	0x7d, 0xce, 0x19, 0x5f, 0xee, 0x0d, 0xca, 0x4a, 0x74, 0x9b, 0x08, 0x35, 0x83, 0xed, 0xee, 0x3d,
	0xbb, 0xec, 0x18, 0xcf, 0x2f, 0x3b, 0xc6, 0xdf, 0x97, 0x1d, 0xe3, 0xc7, 0xab, 0x4e, 0xe9, 0xf9,
	0x55, 0xa7, 0xf4, 0xe7, 0x55, 0xa7, 0xf4, 0xf5, 0x07, 0x53, 0x2a, 0x67, 0xd1, 0xd8, 0x76, 0x98,
	0x3f, 0x28, 0x78, 0x4a, 0x5e, 0xc4, 0x8f, 0xc9, 0x79, 0x08, 0x62, 0x5c, 0xd3, 0xaf, 0xbd, 0x8f,
	0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x79, 0xe5, 0x92, 0x73, 0x0a, 0x00, 0x00,
}

func (m *Valset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Valset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Valset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValsetID != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.ValsetID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Powers) > 0 {
		dAtA2 := make([]byte, len(m.Powers)*10)
		var j1 int
		for _, num := range m.Powers {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTurnstone(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Fees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecurityFee != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.SecurityFee))
		i--
		dAtA[i] = 0x18
	}
	if m.CommunityFee != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.CommunityFee))
		i--
		dAtA[i] = 0x10
	}
	if m.RelayerFee != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.RelayerFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitLogicCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitLogicCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitLogicCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTurnstone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Retries != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.ExecutionRequirements.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTurnstone(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Deadline != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Abi) > 0 {
		i -= len(m.Abi)
		copy(dAtA[i:], m.Abi)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Abi)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HexContractAddress) > 0 {
		i -= len(m.HexContractAddress)
		copy(dAtA[i:], m.HexContractAddress)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.HexContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitLogicCall_ExecutionRequirements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitLogicCall_ExecutionRequirements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitLogicCall_ExecutionRequirements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnforceMEVRelay {
		i--
		if m.EnforceMEVRelay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateValset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateValset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateValset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valset != nil {
		{
			size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTurnstone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompassHandover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompassHandover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompassHandover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Deadline != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ForwardCallArgs) > 0 {
		for iNdEx := len(m.ForwardCallArgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForwardCallArgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTurnstone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompassHandover_ForwardCallArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompassHandover_ForwardCallArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompassHandover_ForwardCallArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HexContractAddress) > 0 {
		i -= len(m.HexContractAddress)
		copy(dAtA[i:], m.HexContractAddress)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.HexContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadSmartContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadSmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadSmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Retries != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x28
	}
	if m.Id != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ConstructorInput) > 0 {
		i -= len(m.ConstructorInput)
		copy(dAtA[i:], m.ConstructorInput)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.ConstructorInput)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Abi) > 0 {
		i -= len(m.Abi)
		copy(dAtA[i:], m.Abi)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Abi)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bytecode) > 0 {
		i -= len(m.Bytecode)
		copy(dAtA[i:], m.Bytecode)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Bytecode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadUserSmartContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadUserSmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadUserSmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTurnstone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Retries != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x38
	}
	if m.Id != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Deadline != 0 {
		i = encodeVarintTurnstone(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bytecode) > 0 {
		i -= len(m.Bytecode)
		copy(dAtA[i:], m.Bytecode)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Bytecode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.AssigneeRemoteAddress) > 0 {
		i -= len(m.AssigneeRemoteAddress)
		copy(dAtA[i:], m.AssigneeRemoteAddress)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.AssigneeRemoteAddress)))
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.AssignedAtBlockHeight.Size()
		i -= size
		if _, err := m.AssignedAtBlockHeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTurnstone(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Assignee) > 0 {
		i -= len(m.Assignee)
		copy(dAtA[i:], m.Assignee)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.Assignee)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CompassAddr) > 0 {
		i -= len(m.CompassAddr)
		copy(dAtA[i:], m.CompassAddr)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.CompassAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainReferenceID) > 0 {
		i -= len(m.ChainReferenceID)
		copy(dAtA[i:], m.ChainReferenceID)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.ChainReferenceID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TurnstoneID) > 0 {
		i -= len(m.TurnstoneID)
		copy(dAtA[i:], m.TurnstoneID)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.TurnstoneID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message_SubmitLogicCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SubmitLogicCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SubmitLogicCall != nil {
		{
			size, err := m.SubmitLogicCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTurnstone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *Message_UpdateValset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UpdateValset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateValset != nil {
		{
			size, err := m.UpdateValset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTurnstone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *Message_UploadSmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UploadSmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UploadSmartContract != nil {
		{
			size, err := m.UploadSmartContract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTurnstone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *Message_UploadUserSmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_UploadUserSmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UploadUserSmartContract != nil {
		{
			size, err := m.UploadUserSmartContract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTurnstone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}

func (m *Message_CompassHandover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_CompassHandover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CompassHandover != nil {
		{
			size, err := m.CompassHandover.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTurnstone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}

func (m *TxExecutedProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxExecutedProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxExecutedProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SerializedReceipt) > 0 {
		i -= len(m.SerializedReceipt)
		copy(dAtA[i:], m.SerializedReceipt)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.SerializedReceipt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SerializedTX) > 0 {
		i -= len(m.SerializedTX)
		copy(dAtA[i:], m.SerializedTX)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.SerializedTX)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmartContractExecutionErrorProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartContractExecutionErrorProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmartContractExecutionErrorProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintTurnstone(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTurnstone(dAtA []byte, offset int, v uint64) int {
	offset -= sovTurnstone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *Valset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovTurnstone(uint64(l))
		}
	}
	if len(m.Powers) > 0 {
		l = 0
		for _, e := range m.Powers {
			l += sovTurnstone(uint64(e))
		}
		n += 1 + sovTurnstone(uint64(l)) + l
	}
	if m.ValsetID != 0 {
		n += 1 + sovTurnstone(uint64(m.ValsetID))
	}
	return n
}

func (m *Fees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelayerFee != 0 {
		n += 1 + sovTurnstone(uint64(m.RelayerFee))
	}
	if m.CommunityFee != 0 {
		n += 1 + sovTurnstone(uint64(m.CommunityFee))
	}
	if m.SecurityFee != 0 {
		n += 1 + sovTurnstone(uint64(m.SecurityFee))
	}
	return n
}

func (m *SubmitLogicCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HexContractAddress)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	if m.Deadline != 0 {
		n += 1 + sovTurnstone(uint64(m.Deadline))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = m.ExecutionRequirements.Size()
	n += 1 + l + sovTurnstone(uint64(l))
	if m.Retries != 0 {
		n += 1 + sovTurnstone(uint64(m.Retries))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *SubmitLogicCall_ExecutionRequirements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforceMEVRelay {
		n += 2
	}
	return n
}

func (m *UpdateValset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valset != nil {
		l = m.Valset.Size()
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *CompassHandover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ForwardCallArgs) > 0 {
		for _, e := range m.ForwardCallArgs {
			l = e.Size()
			n += 1 + l + sovTurnstone(uint64(l))
		}
	}
	if m.Deadline != 0 {
		n += 1 + sovTurnstone(uint64(m.Deadline))
	}
	if m.Id != 0 {
		n += 1 + sovTurnstone(uint64(m.Id))
	}
	return n
}

func (m *CompassHandover_ForwardCallArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HexContractAddress)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *UploadSmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bytecode)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.ConstructorInput)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTurnstone(uint64(m.Id))
	}
	if m.Retries != 0 {
		n += 1 + sovTurnstone(uint64(m.Retries))
	}
	return n
}

func (m *UploadUserSmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bytecode)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	if m.Deadline != 0 {
		n += 1 + sovTurnstone(uint64(m.Deadline))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTurnstone(uint64(m.BlockHeight))
	}
	if m.Id != 0 {
		n += 1 + sovTurnstone(uint64(m.Id))
	}
	if m.Retries != 0 {
		n += 1 + sovTurnstone(uint64(m.Retries))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TurnstoneID)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.ChainReferenceID)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	if m.Action != nil {
		n += m.Action.Size()
	}
	l = len(m.CompassAddr)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.Assignee)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = m.AssignedAtBlockHeight.Size()
	n += 1 + l + sovTurnstone(uint64(l))
	l = len(m.AssigneeRemoteAddress)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *Message_SubmitLogicCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubmitLogicCall != nil {
		l = m.SubmitLogicCall.Size()
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *Message_UpdateValset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateValset != nil {
		l = m.UpdateValset.Size()
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *Message_UploadSmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UploadSmartContract != nil {
		l = m.UploadSmartContract.Size()
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *Message_UploadUserSmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UploadUserSmartContract != nil {
		l = m.UploadUserSmartContract.Size()
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *Message_CompassHandover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompassHandover != nil {
		l = m.CompassHandover.Size()
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *TxExecutedProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SerializedTX)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	l = len(m.SerializedReceipt)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func (m *SmartContractExecutionErrorProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovTurnstone(uint64(l))
	}
	return n
}

func sovTurnstone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozTurnstone(x uint64) (n int) {
	return sovTurnstone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *Valset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Valset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Valset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTurnstone
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Powers = append(m.Powers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTurnstone
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTurnstone
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTurnstone
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Powers) == 0 {
					m.Powers = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTurnstone
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Powers = append(m.Powers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Powers", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetID", wireType)
			}
			m.ValsetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *Fees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFee", wireType)
			}
			m.RelayerFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayerFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityFee", wireType)
			}
			m.CommunityFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunityFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityFee", wireType)
			}
			m.SecurityFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecurityFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *SubmitLogicCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitLogicCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitLogicCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HexContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HexContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = append(m.Abi[:0], dAtA[iNdEx:postIndex]...)
			if m.Abi == nil {
				m.Abi = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = append(m.SenderAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderAddress == nil {
				m.SenderAddress = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = append(m.ContractAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAddress == nil {
				m.ContractAddress = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionRequirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecutionRequirements.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &Fees{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *SubmitLogicCall_ExecutionRequirements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionRequirements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionRequirements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforceMEVRelay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnforceMEVRelay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *UpdateValset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateValset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateValset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Valset == nil {
				m.Valset = &Valset{}
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *CompassHandover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompassHandover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompassHandover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardCallArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardCallArgs = append(m.ForwardCallArgs, CompassHandover_ForwardCallArgs{})
			if err := m.ForwardCallArgs[len(m.ForwardCallArgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *CompassHandover_ForwardCallArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardCallArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardCallArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HexContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HexContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *UploadSmartContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadSmartContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadSmartContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytecode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytecode = append(m.Bytecode[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytecode == nil {
				m.Bytecode = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstructorInput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConstructorInput = append(m.ConstructorInput[:0], dAtA[iNdEx:postIndex]...)
			if m.ConstructorInput == nil {
				m.ConstructorInput = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *UploadUserSmartContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadUserSmartContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadUserSmartContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytecode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytecode = append(m.Bytecode[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytecode == nil {
				m.Bytecode = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = append(m.SenderAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderAddress == nil {
				m.SenderAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &Fees{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnstoneID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TurnstoneID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitLogicCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SubmitLogicCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Message_SubmitLogicCall{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateValset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateValset{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Message_UpdateValset{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadSmartContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UploadSmartContract{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Message_UploadSmartContract{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompassAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompassAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedAtBlockHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssignedAtBlockHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssigneeRemoteAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssigneeRemoteAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadUserSmartContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UploadUserSmartContract{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Message_UploadUserSmartContract{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompassHandover", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CompassHandover{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &Message_CompassHandover{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *TxExecutedProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxExecutedProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxExecutedProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedTX", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedTX = append(m.SerializedTX[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedTX == nil {
				m.SerializedTX = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedReceipt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedReceipt = append(m.SerializedReceipt[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedReceipt == nil {
				m.SerializedReceipt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *SmartContractExecutionErrorProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartContractExecutionErrorProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartContractExecutionErrorProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTurnstone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTurnstone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTurnstone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTurnstone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipTurnstone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTurnstone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTurnstone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTurnstone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTurnstone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTurnstone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTurnstone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTurnstone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTurnstone = fmt.Errorf("proto: unexpected end of group")
)
