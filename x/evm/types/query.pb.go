// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/evm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetValsetByIDRequest struct {
	ValsetID         uint64 `protobuf:"varint,1,opt,name=valsetID,proto3" json:"valsetID,omitempty"`
	ChainReferenceID string `protobuf:"bytes,2,opt,name=chainReferenceID,proto3" json:"chainReferenceID,omitempty"`
}

func (m *QueryGetValsetByIDRequest) Reset()         { *m = QueryGetValsetByIDRequest{} }
func (m *QueryGetValsetByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetByIDRequest) ProtoMessage()    {}
func (*QueryGetValsetByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{2}
}
func (m *QueryGetValsetByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetByIDRequest.Merge(m, src)
}
func (m *QueryGetValsetByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetByIDRequest proto.InternalMessageInfo

func (m *QueryGetValsetByIDRequest) GetValsetID() uint64 {
	if m != nil {
		return m.ValsetID
	}
	return 0
}

func (m *QueryGetValsetByIDRequest) GetChainReferenceID() string {
	if m != nil {
		return m.ChainReferenceID
	}
	return ""
}

type QueryGetValsetByIDResponse struct {
	Valset *Valset `protobuf:"bytes,1,opt,name=valset,proto3" json:"valset,omitempty"`
}

func (m *QueryGetValsetByIDResponse) Reset()         { *m = QueryGetValsetByIDResponse{} }
func (m *QueryGetValsetByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetByIDResponse) ProtoMessage()    {}
func (*QueryGetValsetByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{3}
}
func (m *QueryGetValsetByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetByIDResponse.Merge(m, src)
}
func (m *QueryGetValsetByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetByIDResponse proto.InternalMessageInfo

func (m *QueryGetValsetByIDResponse) GetValset() *Valset {
	if m != nil {
		return m.Valset
	}
	return nil
}

type QueryChainsInfosRequest struct {
}

func (m *QueryChainsInfosRequest) Reset()         { *m = QueryChainsInfosRequest{} }
func (m *QueryChainsInfosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainsInfosRequest) ProtoMessage()    {}
func (*QueryChainsInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{4}
}
func (m *QueryChainsInfosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainsInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainsInfosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainsInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainsInfosRequest.Merge(m, src)
}
func (m *QueryChainsInfosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainsInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainsInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainsInfosRequest proto.InternalMessageInfo

type QueryChainsInfosResponse struct {
	ChainsInfos []*ChainInfo `protobuf:"bytes,1,rep,name=chainsInfos,proto3" json:"chainsInfos,omitempty"`
}

func (m *QueryChainsInfosResponse) Reset()         { *m = QueryChainsInfosResponse{} }
func (m *QueryChainsInfosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainsInfosResponse) ProtoMessage()    {}
func (*QueryChainsInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{5}
}
func (m *QueryChainsInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainsInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainsInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainsInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainsInfosResponse.Merge(m, src)
}
func (m *QueryChainsInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainsInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainsInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainsInfosResponse proto.InternalMessageInfo

func (m *QueryChainsInfosResponse) GetChainsInfos() []*ChainInfo {
	if m != nil {
		return m.ChainsInfos
	}
	return nil
}

type QueryGetSmartContractRequest struct {
	SmartContractID uint64 `protobuf:"varint,1,opt,name=smartContractID,proto3" json:"smartContractID,omitempty"`
}

func (m *QueryGetSmartContractRequest) Reset()         { *m = QueryGetSmartContractRequest{} }
func (m *QueryGetSmartContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSmartContractRequest) ProtoMessage()    {}
func (*QueryGetSmartContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{6}
}
func (m *QueryGetSmartContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSmartContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSmartContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSmartContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSmartContractRequest.Merge(m, src)
}
func (m *QueryGetSmartContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSmartContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSmartContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSmartContractRequest proto.InternalMessageInfo

func (m *QueryGetSmartContractRequest) GetSmartContractID() uint64 {
	if m != nil {
		return m.SmartContractID
	}
	return 0
}

type QueryGetSmartContractResponse struct {
	ID       uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Abi      string `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`
	Bytecode []byte `protobuf:"bytes,3,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
}

func (m *QueryGetSmartContractResponse) Reset()         { *m = QueryGetSmartContractResponse{} }
func (m *QueryGetSmartContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSmartContractResponse) ProtoMessage()    {}
func (*QueryGetSmartContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{7}
}
func (m *QueryGetSmartContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSmartContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSmartContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSmartContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSmartContractResponse.Merge(m, src)
}
func (m *QueryGetSmartContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSmartContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSmartContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSmartContractResponse proto.InternalMessageInfo

func (m *QueryGetSmartContractResponse) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *QueryGetSmartContractResponse) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}

func (m *QueryGetSmartContractResponse) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

type QueryGetSmartContractDeploymentsRequest struct {
}

func (m *QueryGetSmartContractDeploymentsRequest) Reset() {
	*m = QueryGetSmartContractDeploymentsRequest{}
}
func (m *QueryGetSmartContractDeploymentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSmartContractDeploymentsRequest) ProtoMessage()    {}
func (*QueryGetSmartContractDeploymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{8}
}
func (m *QueryGetSmartContractDeploymentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSmartContractDeploymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSmartContractDeploymentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSmartContractDeploymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSmartContractDeploymentsRequest.Merge(m, src)
}
func (m *QueryGetSmartContractDeploymentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSmartContractDeploymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSmartContractDeploymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSmartContractDeploymentsRequest proto.InternalMessageInfo

type QueryGetSmartContractDeploymentsResponse struct {
	Deployments []*SmartContractDeployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
}

func (m *QueryGetSmartContractDeploymentsResponse) Reset() {
	*m = QueryGetSmartContractDeploymentsResponse{}
}
func (m *QueryGetSmartContractDeploymentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSmartContractDeploymentsResponse) ProtoMessage()    {}
func (*QueryGetSmartContractDeploymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{9}
}
func (m *QueryGetSmartContractDeploymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSmartContractDeploymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSmartContractDeploymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSmartContractDeploymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSmartContractDeploymentsResponse.Merge(m, src)
}
func (m *QueryGetSmartContractDeploymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSmartContractDeploymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSmartContractDeploymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSmartContractDeploymentsResponse proto.InternalMessageInfo

func (m *QueryGetSmartContractDeploymentsResponse) GetDeployments() []*SmartContractDeployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type QueryUserSmartContractsRequest struct {
	ValAddress string `protobuf:"bytes,1,opt,name=val_address,json=valAddress,proto3" json:"val_address,omitempty"`
}

func (m *QueryUserSmartContractsRequest) Reset()         { *m = QueryUserSmartContractsRequest{} }
func (m *QueryUserSmartContractsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserSmartContractsRequest) ProtoMessage()    {}
func (*QueryUserSmartContractsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{10}
}
func (m *QueryUserSmartContractsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserSmartContractsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserSmartContractsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserSmartContractsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserSmartContractsRequest.Merge(m, src)
}
func (m *QueryUserSmartContractsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserSmartContractsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserSmartContractsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserSmartContractsRequest proto.InternalMessageInfo

func (m *QueryUserSmartContractsRequest) GetValAddress() string {
	if m != nil {
		return m.ValAddress
	}
	return ""
}

type QueryUserSmartContractsResponse struct {
	Contracts []*UserSmartContract `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
}

func (m *QueryUserSmartContractsResponse) Reset()         { *m = QueryUserSmartContractsResponse{} }
func (m *QueryUserSmartContractsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserSmartContractsResponse) ProtoMessage()    {}
func (*QueryUserSmartContractsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd77ddf5be861c95, []int{11}
}
func (m *QueryUserSmartContractsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserSmartContractsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserSmartContractsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserSmartContractsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserSmartContractsResponse.Merge(m, src)
}
func (m *QueryUserSmartContractsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserSmartContractsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserSmartContractsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserSmartContractsResponse proto.InternalMessageInfo

func (m *QueryUserSmartContractsResponse) GetContracts() []*UserSmartContract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "palomachain.paloma.evm.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "palomachain.paloma.evm.QueryParamsResponse")
	proto.RegisterType((*QueryGetValsetByIDRequest)(nil), "palomachain.paloma.evm.QueryGetValsetByIDRequest")
	proto.RegisterType((*QueryGetValsetByIDResponse)(nil), "palomachain.paloma.evm.QueryGetValsetByIDResponse")
	proto.RegisterType((*QueryChainsInfosRequest)(nil), "palomachain.paloma.evm.QueryChainsInfosRequest")
	proto.RegisterType((*QueryChainsInfosResponse)(nil), "palomachain.paloma.evm.QueryChainsInfosResponse")
	proto.RegisterType((*QueryGetSmartContractRequest)(nil), "palomachain.paloma.evm.QueryGetSmartContractRequest")
	proto.RegisterType((*QueryGetSmartContractResponse)(nil), "palomachain.paloma.evm.QueryGetSmartContractResponse")
	proto.RegisterType((*QueryGetSmartContractDeploymentsRequest)(nil), "palomachain.paloma.evm.QueryGetSmartContractDeploymentsRequest")
	proto.RegisterType((*QueryGetSmartContractDeploymentsResponse)(nil), "palomachain.paloma.evm.QueryGetSmartContractDeploymentsResponse")
	proto.RegisterType((*QueryUserSmartContractsRequest)(nil), "palomachain.paloma.evm.QueryUserSmartContractsRequest")
	proto.RegisterType((*QueryUserSmartContractsResponse)(nil), "palomachain.paloma.evm.QueryUserSmartContractsResponse")
}

func init() {
	proto.RegisterFile("palomachain/paloma/evm/query.proto", fileDescriptor_dd77ddf5be861c95)
}

var fileDescriptor_dd77ddf5be861c95 = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4d, 0x6f, 0xeb, 0x44,
	0x14, 0x8d, 0xd3, 0x47, 0x44, 0x26, 0x7c, 0x3c, 0x0d, 0x05, 0x52, 0xeb, 0xe1, 0x17, 0x0c, 0xea,
	0x4b, 0x0b, 0x64, 0xda, 0x94, 0x16, 0x21, 0x2a, 0x28, 0x49, 0xa4, 0x36, 0xac, 0xa8, 0x0b, 0x2c,
	0x40, 0xc8, 0x9a, 0x38, 0x53, 0xd7, 0x28, 0xf6, 0xb8, 0x9e, 0x49, 0x44, 0x54, 0x65, 0xd3, 0x1d,
	0x3b, 0x24, 0xf6, 0xfc, 0x09, 0xf8, 0x11, 0x5d, 0x56, 0xc0, 0x82, 0x15, 0x42, 0x2d, 0x3b, 0xfe,
	0x04, 0xf2, 0xcc, 0x38, 0x4d, 0x1a, 0x3b, 0x69, 0xd8, 0x8d, 0x6f, 0xee, 0x39, 0xf7, 0xdc, 0xeb,
	0xdc, 0xe3, 0x01, 0x66, 0x88, 0x7b, 0xd4, 0xc7, 0xce, 0x19, 0xf6, 0x02, 0x24, 0xcf, 0x88, 0x0c,
	0x7c, 0x74, 0xde, 0x27, 0xd1, 0xb0, 0x16, 0x46, 0x94, 0x53, 0xf8, 0xda, 0x44, 0x4e, 0x4d, 0x9e,
	0x6b, 0x64, 0xe0, 0xeb, 0x6b, 0x0e, 0x65, 0x3e, 0x65, 0xb6, 0xc8, 0x42, 0xf2, 0x41, 0x42, 0xf4,
	0x55, 0x97, 0xba, 0x54, 0xc6, 0xe3, 0x93, 0x8a, 0x3e, 0x71, 0x29, 0x75, 0x7b, 0x04, 0xe1, 0xd0,
	0x43, 0x38, 0x08, 0x28, 0xc7, 0xdc, 0xa3, 0x41, 0x82, 0xd9, 0x94, 0x0c, 0xa8, 0x83, 0x19, 0x91,
	0xf5, 0xd1, 0x60, 0xbb, 0x43, 0x38, 0xde, 0x46, 0x21, 0x76, 0xbd, 0x40, 0x24, 0xab, 0xdc, 0xb7,
	0x32, 0x64, 0x87, 0x38, 0xc2, 0x7e, 0x42, 0xb8, 0x9e, 0x91, 0xc4, 0xfb, 0x51, 0xc0, 0x38, 0x0d,
	0x88, 0xca, 0x7b, 0x96, 0x91, 0x27, 0x02, 0xb6, 0x17, 0x9c, 0x26, 0xfa, 0xb7, 0x32, 0x12, 0xfb,
	0x8c, 0x44, 0x36, 0xf3, 0x71, 0xc4, 0x6d, 0x87, 0x06, 0x3c, 0xc2, 0x0e, 0x97, 0x08, 0x73, 0x15,
	0xc0, 0xe3, 0xb8, 0x93, 0xcf, 0x85, 0x2e, 0x8b, 0x9c, 0xf7, 0x09, 0xe3, 0xe6, 0x09, 0x78, 0x65,
	0x2a, 0xca, 0x42, 0x1a, 0x30, 0x02, 0xf7, 0x41, 0x41, 0xea, 0x2f, 0x6b, 0x15, 0xad, 0x5a, 0xaa,
	0x1b, 0xb5, 0xf4, 0xc1, 0xd7, 0x24, 0xae, 0xf1, 0xe8, 0xea, 0xaf, 0xa7, 0x39, 0x4b, 0x61, 0x4c,
	0x07, 0xac, 0x09, 0xd2, 0x43, 0xc2, 0xbf, 0xc2, 0x3d, 0x46, 0x78, 0x63, 0xd8, 0x6e, 0xa9, 0x8a,
	0x50, 0x07, 0xcf, 0x0f, 0x44, 0xb0, 0xdd, 0x12, 0xe4, 0x8f, 0xac, 0xf1, 0x33, 0xdc, 0x04, 0x8f,
	0x45, 0x05, 0x8b, 0x9c, 0x92, 0x88, 0x04, 0x0e, 0x69, 0xb7, 0xca, 0xf9, 0x8a, 0x56, 0x2d, 0x5a,
	0x33, 0x71, 0xf3, 0x0b, 0xa0, 0xa7, 0x15, 0x51, 0x0d, 0xec, 0x81, 0x82, 0x64, 0x5d, 0xd4, 0x80,
	0xc4, 0x5a, 0x2a, 0xdb, 0x5c, 0x03, 0xaf, 0x0b, 0xd6, 0x66, 0x9c, 0xc7, 0xda, 0xc1, 0x29, 0x1d,
	0x8f, 0xca, 0x06, 0xe5, 0xd9, 0x9f, 0x54, 0xb9, 0x26, 0x28, 0x39, 0x77, 0xe1, 0xb2, 0x56, 0x59,
	0xa9, 0x96, 0xea, 0x6f, 0x66, 0xd5, 0x14, 0x0c, 0x71, 0xa6, 0x35, 0x89, 0x32, 0x8f, 0xc0, 0x93,
	0xa4, 0xa3, 0x93, 0xf8, 0x0d, 0x36, 0xd5, 0x0b, 0x4c, 0x26, 0x57, 0x05, 0x2f, 0xb3, 0xc9, 0xf8,
	0x78, 0x80, 0xf7, 0xc3, 0xe6, 0xb7, 0xe0, 0x8d, 0x0c, 0x26, 0xa5, 0xf7, 0x25, 0x90, 0x1f, 0xa3,
	0xf3, 0xed, 0x16, 0x7c, 0x0c, 0x56, 0x70, 0xc7, 0x53, 0xb3, 0x8e, 0x8f, 0xf1, 0x6b, 0xea, 0x0c,
	0x39, 0x71, 0x68, 0x97, 0x94, 0x57, 0x2a, 0x5a, 0xf5, 0x05, 0x6b, 0xfc, 0x6c, 0x6e, 0x80, 0x67,
	0xa9, 0xf4, 0x2d, 0x12, 0xf6, 0xe8, 0xd0, 0x27, 0x01, 0x1f, 0x0f, 0x6d, 0x04, 0xaa, 0x8b, 0x53,
	0x95, 0xa8, 0x63, 0x50, 0xea, 0xde, 0x85, 0xd5, 0x10, 0x51, 0xd6, 0x10, 0x33, 0xe8, 0xac, 0x49,
	0x0e, 0xf3, 0x1b, 0x60, 0x88, 0xf2, 0x5f, 0x32, 0x12, 0x4d, 0x01, 0x12, 0x81, 0xf0, 0x43, 0x50,
	0x1a, 0xe0, 0x9e, 0x8d, 0xbb, 0xdd, 0x88, 0x30, 0xf9, 0x77, 0x2f, 0x36, 0xca, 0xbf, 0xfd, 0xfa,
	0xde, 0xaa, 0x72, 0x91, 0x4f, 0xe5, 0x2f, 0x27, 0x3c, 0xf2, 0x02, 0xd7, 0x02, 0x03, 0xdc, 0x53,
	0x11, 0xf3, 0x3b, 0xf0, 0x34, 0x93, 0x5c, 0xb5, 0x74, 0x08, 0x8a, 0xc9, 0x1a, 0x26, 0x0d, 0x6d,
	0x64, 0x35, 0x34, 0x43, 0x63, 0xdd, 0x61, 0xeb, 0x97, 0x45, 0xf0, 0x9c, 0x28, 0x06, 0x7f, 0xd0,
	0x40, 0x41, 0x6e, 0x1d, 0xdc, 0xcc, 0xa2, 0x9a, 0x5d, 0x74, 0xfd, 0x9d, 0x07, 0xe5, 0x4a, 0xd9,
	0xe6, 0xfa, 0xe5, 0xef, 0xff, 0xfc, 0x94, 0xaf, 0x40, 0x03, 0xcd, 0x35, 0x37, 0xf8, 0x8b, 0x06,
	0x5e, 0x9c, 0xda, 0x3f, 0xb8, 0x3d, 0xb7, 0x4c, 0x9a, 0x21, 0xe8, 0xf5, 0x65, 0x20, 0x4a, 0xe0,
	0x47, 0x42, 0xe0, 0x2e, 0xdc, 0xc9, 0x12, 0xe8, 0x12, 0x6e, 0xcb, 0x95, 0xb6, 0x3b, 0x43, 0xdb,
	0xeb, 0xa2, 0x8b, 0xc4, 0x64, 0x46, 0xf0, 0x67, 0x0d, 0x94, 0x26, 0x96, 0x18, 0xa2, 0xb9, 0x02,
	0x66, 0x9d, 0x40, 0xdf, 0x7a, 0x38, 0x40, 0xe9, 0x7d, 0x57, 0xe8, 0x5d, 0x87, 0x6f, 0xa3, 0x79,
	0x06, 0xcf, 0x84, 0xc3, 0x33, 0x78, 0xad, 0x81, 0x57, 0x53, 0xb7, 0x06, 0xbe, 0xbf, 0x68, 0x56,
	0x69, 0xc6, 0xa1, 0xef, 0x2e, 0x89, 0x52, 0xa2, 0x3f, 0x13, 0xa2, 0x5b, 0xb0, 0x81, 0xe6, 0x7d,
	0x99, 0xed, 0x78, 0xd4, 0xd3, 0x5f, 0x1c, 0x74, 0x71, 0xcf, 0x90, 0x46, 0xf0, 0x5f, 0x0d, 0x54,
	0x16, 0x19, 0x01, 0xfc, 0x64, 0x29, 0x9d, 0xb3, 0x6e, 0xa3, 0x1f, 0xfc, 0x7f, 0x02, 0xd5, 0x73,
	0x4b, 0xf4, 0xfc, 0x31, 0xdc, 0x5f, 0xb6, 0x67, 0x7b, 0xc2, 0x76, 0xe0, 0x1f, 0x9a, 0xfa, 0x8c,
	0xcc, 0x5a, 0x03, 0xdc, 0x9b, 0xab, 0x31, 0xd3, 0xa8, 0xf4, 0x0f, 0x96, 0xc6, 0xa9, 0x96, 0x8e,
	0x44, 0x4b, 0x0d, 0x78, 0x30, 0xbf, 0xa5, 0x94, 0x9b, 0x03, 0x13, 0x5b, 0x93, 0x78, 0xe3, 0xa8,
	0xd1, 0xbc, 0xba, 0x31, 0xb4, 0xeb, 0x1b, 0x43, 0xfb, 0xfb, 0xc6, 0xd0, 0x7e, 0xbc, 0x35, 0x72,
	0xd7, 0xb7, 0x46, 0xee, 0xcf, 0x5b, 0x23, 0xf7, 0xf5, 0x86, 0xeb, 0xf1, 0xb3, 0x7e, 0xa7, 0xe6,
	0x50, 0x3f, 0xad, 0xca, 0xf7, 0xf2, 0xb2, 0x33, 0x0c, 0x09, 0xeb, 0x14, 0xc4, 0x75, 0x64, 0xe7,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x5f, 0x99, 0x3c, 0xef, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetValsetByID items.
	GetValsetByID(ctx context.Context, in *QueryGetValsetByIDRequest, opts ...grpc.CallOption) (*QueryGetValsetByIDResponse, error)
	// Queries a list of ChainsInfos items.
	ChainsInfos(ctx context.Context, in *QueryChainsInfosRequest, opts ...grpc.CallOption) (*QueryChainsInfosResponse, error)
	// Queries a list of QueryGetSmartContract items.
	QueryGetSmartContract(ctx context.Context, in *QueryGetSmartContractRequest, opts ...grpc.CallOption) (*QueryGetSmartContractResponse, error)
	// Queries a list of QueryGetSmartContractDeployments items.
	QueryGetSmartContractDeployments(ctx context.Context, in *QueryGetSmartContractDeploymentsRequest, opts ...grpc.CallOption) (*QueryGetSmartContractDeploymentsResponse, error)
	// Queries a list of user smart contracts
	QueryUserSmartContracts(ctx context.Context, in *QueryUserSmartContractsRequest, opts ...grpc.CallOption) (*QueryUserSmartContractsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.evm.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValsetByID(ctx context.Context, in *QueryGetValsetByIDRequest, opts ...grpc.CallOption) (*QueryGetValsetByIDResponse, error) {
	out := new(QueryGetValsetByIDResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.evm.Query/GetValsetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainsInfos(ctx context.Context, in *QueryChainsInfosRequest, opts ...grpc.CallOption) (*QueryChainsInfosResponse, error) {
	out := new(QueryChainsInfosResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.evm.Query/ChainsInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetSmartContract(ctx context.Context, in *QueryGetSmartContractRequest, opts ...grpc.CallOption) (*QueryGetSmartContractResponse, error) {
	out := new(QueryGetSmartContractResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.evm.Query/QueryGetSmartContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGetSmartContractDeployments(ctx context.Context, in *QueryGetSmartContractDeploymentsRequest, opts ...grpc.CallOption) (*QueryGetSmartContractDeploymentsResponse, error) {
	out := new(QueryGetSmartContractDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.evm.Query/QueryGetSmartContractDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUserSmartContracts(ctx context.Context, in *QueryUserSmartContractsRequest, opts ...grpc.CallOption) (*QueryUserSmartContractsResponse, error) {
	out := new(QueryUserSmartContractsResponse)
	err := c.cc.Invoke(ctx, "/palomachain.paloma.evm.Query/QueryUserSmartContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetValsetByID items.
	GetValsetByID(context.Context, *QueryGetValsetByIDRequest) (*QueryGetValsetByIDResponse, error)
	// Queries a list of ChainsInfos items.
	ChainsInfos(context.Context, *QueryChainsInfosRequest) (*QueryChainsInfosResponse, error)
	// Queries a list of QueryGetSmartContract items.
	QueryGetSmartContract(context.Context, *QueryGetSmartContractRequest) (*QueryGetSmartContractResponse, error)
	// Queries a list of QueryGetSmartContractDeployments items.
	QueryGetSmartContractDeployments(context.Context, *QueryGetSmartContractDeploymentsRequest) (*QueryGetSmartContractDeploymentsResponse, error)
	// Queries a list of user smart contracts
	QueryUserSmartContracts(context.Context, *QueryUserSmartContractsRequest) (*QueryUserSmartContractsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetValsetByID(ctx context.Context, req *QueryGetValsetByIDRequest) (*QueryGetValsetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValsetByID not implemented")
}
func (*UnimplementedQueryServer) ChainsInfos(ctx context.Context, req *QueryChainsInfosRequest) (*QueryChainsInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainsInfos not implemented")
}
func (*UnimplementedQueryServer) QueryGetSmartContract(ctx context.Context, req *QueryGetSmartContractRequest) (*QueryGetSmartContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetSmartContract not implemented")
}
func (*UnimplementedQueryServer) QueryGetSmartContractDeployments(ctx context.Context, req *QueryGetSmartContractDeploymentsRequest) (*QueryGetSmartContractDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGetSmartContractDeployments not implemented")
}
func (*UnimplementedQueryServer) QueryUserSmartContracts(ctx context.Context, req *QueryUserSmartContractsRequest) (*QueryUserSmartContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserSmartContracts not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.evm.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValsetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValsetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValsetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.evm.Query/GetValsetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValsetByID(ctx, req.(*QueryGetValsetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainsInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainsInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainsInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.evm.Query/ChainsInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainsInfos(ctx, req.(*QueryChainsInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetSmartContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSmartContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetSmartContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.evm.Query/QueryGetSmartContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetSmartContract(ctx, req.(*QueryGetSmartContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGetSmartContractDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSmartContractDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGetSmartContractDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.evm.Query/QueryGetSmartContractDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGetSmartContractDeployments(ctx, req.(*QueryGetSmartContractDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUserSmartContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserSmartContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUserSmartContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/palomachain.paloma.evm.Query/QueryUserSmartContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUserSmartContracts(ctx, req.(*QueryUserSmartContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "palomachain.paloma.evm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetValsetByID",
			Handler:    _Query_GetValsetByID_Handler,
		},
		{
			MethodName: "ChainsInfos",
			Handler:    _Query_ChainsInfos_Handler,
		},
		{
			MethodName: "QueryGetSmartContract",
			Handler:    _Query_QueryGetSmartContract_Handler,
		},
		{
			MethodName: "QueryGetSmartContractDeployments",
			Handler:    _Query_QueryGetSmartContractDeployments_Handler,
		},
		{
			MethodName: "QueryUserSmartContracts",
			Handler:    _Query_QueryUserSmartContracts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "palomachain/paloma/evm/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainReferenceID) > 0 {
		i -= len(m.ChainReferenceID)
		copy(dAtA[i:], m.ChainReferenceID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainReferenceID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ValsetID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValsetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valset != nil {
		{
			size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainsInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainsInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainsInfosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChainsInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainsInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainsInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainsInfos) > 0 {
		for iNdEx := len(m.ChainsInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainsInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSmartContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSmartContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSmartContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SmartContractID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SmartContractID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSmartContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSmartContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSmartContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytecode) > 0 {
		i -= len(m.Bytecode)
		copy(dAtA[i:], m.Bytecode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bytecode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Abi) > 0 {
		i -= len(m.Abi)
		copy(dAtA[i:], m.Abi)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Abi)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSmartContractDeploymentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSmartContractDeploymentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSmartContractDeploymentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSmartContractDeploymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSmartContractDeploymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSmartContractDeploymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for iNdEx := len(m.Deployments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deployments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserSmartContractsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserSmartContractsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserSmartContractsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValAddress) > 0 {
		i -= len(m.ValAddress)
		copy(dAtA[i:], m.ValAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserSmartContractsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserSmartContractsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserSmartContractsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetValsetByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValsetID != 0 {
		n += 1 + sovQuery(uint64(m.ValsetID))
	}
	l = len(m.ChainReferenceID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValsetByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valset != nil {
		l = m.Valset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainsInfosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChainsInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainsInfos) > 0 {
		for _, e := range m.ChainsInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetSmartContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmartContractID != 0 {
		n += 1 + sovQuery(uint64(m.SmartContractID))
	}
	return n
}

func (m *QueryGetSmartContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovQuery(uint64(m.ID))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Bytecode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSmartContractDeploymentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSmartContractDeploymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUserSmartContractsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserSmartContractsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetID", wireType)
			}
			m.ValsetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Valset == nil {
				m.Valset = &Valset{}
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainsInfosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainsInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainsInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainsInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainsInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainsInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainsInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainsInfos = append(m.ChainsInfos, &ChainInfo{})
			if err := m.ChainsInfos[len(m.ChainsInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSmartContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSmartContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSmartContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractID", wireType)
			}
			m.SmartContractID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmartContractID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSmartContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSmartContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSmartContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytecode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytecode = append(m.Bytecode[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytecode == nil {
				m.Bytecode = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSmartContractDeploymentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSmartContractDeploymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSmartContractDeploymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSmartContractDeploymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSmartContractDeploymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSmartContractDeploymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &SmartContractDeployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserSmartContractsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserSmartContractsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserSmartContractsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserSmartContractsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserSmartContractsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserSmartContractsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, &UserSmartContract{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
