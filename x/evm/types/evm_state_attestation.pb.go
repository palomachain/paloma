// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evm/evm_state_attestation.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorBalancesAttestation struct {
	HexAddresses  []string                                        `protobuf:"bytes,1,rep,name=hexAddresses,proto3" json:"hexAddresses,omitempty"`
	ValAddresses  []github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,2,rep,name=valAddresses,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"valAddresses,omitempty"`
	FromBlockTime time.Time                                       `protobuf:"bytes,3,opt,name=fromBlockTime,proto3,stdtime" json:"fromBlockTime"`
}

func (m *ValidatorBalancesAttestation) Reset()         { *m = ValidatorBalancesAttestation{} }
func (m *ValidatorBalancesAttestation) String() string { return proto.CompactTextString(m) }
func (*ValidatorBalancesAttestation) ProtoMessage()    {}
func (*ValidatorBalancesAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f601a04d310853fa, []int{0}
}
func (m *ValidatorBalancesAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBalancesAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBalancesAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBalancesAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBalancesAttestation.Merge(m, src)
}
func (m *ValidatorBalancesAttestation) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBalancesAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBalancesAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBalancesAttestation proto.InternalMessageInfo

func (m *ValidatorBalancesAttestation) GetHexAddresses() []string {
	if m != nil {
		return m.HexAddresses
	}
	return nil
}

func (m *ValidatorBalancesAttestation) GetValAddresses() []github_com_cosmos_cosmos_sdk_types.ValAddress {
	if m != nil {
		return m.ValAddresses
	}
	return nil
}

func (m *ValidatorBalancesAttestation) GetFromBlockTime() time.Time {
	if m != nil {
		return m.FromBlockTime
	}
	return time.Time{}
}

type ValidatorBalancesAttestationRes struct {
	BlockHeight uint64   `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Balances    []string `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (m *ValidatorBalancesAttestationRes) Reset()         { *m = ValidatorBalancesAttestationRes{} }
func (m *ValidatorBalancesAttestationRes) String() string { return proto.CompactTextString(m) }
func (*ValidatorBalancesAttestationRes) ProtoMessage()    {}
func (*ValidatorBalancesAttestationRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f601a04d310853fa, []int{1}
}
func (m *ValidatorBalancesAttestationRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBalancesAttestationRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBalancesAttestationRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBalancesAttestationRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBalancesAttestationRes.Merge(m, src)
}
func (m *ValidatorBalancesAttestationRes) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBalancesAttestationRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBalancesAttestationRes.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBalancesAttestationRes proto.InternalMessageInfo

func (m *ValidatorBalancesAttestationRes) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ValidatorBalancesAttestationRes) GetBalances() []string {
	if m != nil {
		return m.Balances
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorBalancesAttestation)(nil), "palomachain.paloma.evm.ValidatorBalancesAttestation")
	proto.RegisterType((*ValidatorBalancesAttestationRes)(nil), "palomachain.paloma.evm.ValidatorBalancesAttestationRes")
}

func init() { proto.RegisterFile("evm/evm_state_attestation.proto", fileDescriptor_f601a04d310853fa) }

var fileDescriptor_f601a04d310853fa = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xbf, 0x6e, 0xea, 0x30,
	0x14, 0xc6, 0xe3, 0xcb, 0xd5, 0x15, 0x18, 0xee, 0x12, 0x55, 0x15, 0x8a, 0xaa, 0x24, 0x62, 0x4a,
	0x07, 0x1c, 0xb5, 0x7d, 0x02, 0xd2, 0xa5, 0xea, 0x18, 0x51, 0x86, 0x2e, 0xc8, 0x49, 0x4c, 0x62,
	0x11, 0x73, 0xa2, 0xd8, 0x44, 0xf4, 0x2d, 0x78, 0x2c, 0x46, 0xc6, 0x4e, 0xb4, 0x02, 0xf5, 0x25,
	0x3a, 0x55, 0x49, 0xf8, 0xbb, 0x74, 0xf2, 0x77, 0x8e, 0xbe, 0xef, 0x58, 0xbf, 0x73, 0xb0, 0xc5,
	0x0a, 0xe1, 0xb2, 0x42, 0x8c, 0xa5, 0xa2, 0x8a, 0x8d, 0xa9, 0x52, 0xac, 0x54, 0x1c, 0x66, 0x24,
	0xcb, 0x41, 0x81, 0x7e, 0x9d, 0xd1, 0x14, 0x04, 0x0d, 0x13, 0xca, 0x67, 0xa4, 0xd6, 0x84, 0x15,
	0xc2, 0xb8, 0x8a, 0x21, 0x86, 0xca, 0xe2, 0x96, 0xaa, 0x76, 0x1b, 0x56, 0x0c, 0x10, 0xa7, 0xcc,
	0xad, 0xaa, 0x60, 0x3e, 0x71, 0x15, 0x17, 0xe5, 0x40, 0x91, 0xd5, 0x86, 0xde, 0x17, 0xc2, 0x37,
	0x23, 0x9a, 0xf2, 0x88, 0x2a, 0xc8, 0x3d, 0x9a, 0xd2, 0x59, 0xc8, 0xe4, 0xe0, 0xf4, 0xab, 0xde,
	0xc3, 0x9d, 0x84, 0x2d, 0x06, 0x51, 0x94, 0x33, 0x29, 0x99, 0xec, 0x22, 0xbb, 0xe1, 0xb4, 0xfc,
	0x8b, 0x9e, 0xfe, 0x82, 0x3b, 0x05, 0x4d, 0x4f, 0x9e, 0x3f, 0x76, 0xc3, 0xe9, 0x78, 0x77, 0xdf,
	0x1b, 0xab, 0x1f, 0x73, 0x95, 0xcc, 0x03, 0x12, 0x82, 0x70, 0x43, 0x90, 0x02, 0xe4, 0xfe, 0xe9,
	0xcb, 0x68, 0xea, 0xaa, 0xb7, 0x8c, 0x49, 0x32, 0x3a, 0x46, 0xfd, 0x8b, 0x31, 0xfa, 0x33, 0xfe,
	0x3f, 0xc9, 0x41, 0x78, 0x29, 0x84, 0xd3, 0x21, 0x17, 0xac, 0xdb, 0xb0, 0x91, 0xd3, 0xbe, 0x37,
	0x48, 0x0d, 0x45, 0x0e, 0x50, 0x64, 0x78, 0x80, 0xf2, 0x9a, 0xab, 0x8d, 0xa5, 0x2d, 0x3f, 0x2c,
	0xe4, 0x5f, 0x46, 0x7b, 0x63, 0x6c, 0xfd, 0x86, 0xe9, 0x33, 0xa9, 0xdb, 0xb8, 0x1d, 0x94, 0xfe,
	0x27, 0xc6, 0xe3, 0x44, 0x75, 0x91, 0x8d, 0x9c, 0xbf, 0xfe, 0x79, 0x4b, 0x37, 0x70, 0x33, 0xd8,
	0x67, 0x2b, 0xc6, 0x96, 0x7f, 0xac, 0xbd, 0xc7, 0xd5, 0xd6, 0x44, 0xeb, 0xad, 0x89, 0x3e, 0xb7,
	0x26, 0x5a, 0xee, 0x4c, 0x6d, 0xbd, 0x33, 0xb5, 0xf7, 0x9d, 0xa9, 0xbd, 0xde, 0x9e, 0xed, 0xe0,
	0xec, 0x78, 0x7b, 0xed, 0x2e, 0xca, 0x73, 0xd7, 0xab, 0x08, 0xfe, 0x55, 0x48, 0x0f, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x64, 0x51, 0x85, 0x9c, 0x06, 0x02, 0x00, 0x00,
}

func (m *ValidatorBalancesAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBalancesAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorBalancesAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.FromBlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.FromBlockTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEvmStateAttestation(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.ValAddresses) > 0 {
		for iNdEx := len(m.ValAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValAddresses[iNdEx])
			copy(dAtA[i:], m.ValAddresses[iNdEx])
			i = encodeVarintEvmStateAttestation(dAtA, i, uint64(len(m.ValAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.HexAddresses) > 0 {
		for iNdEx := len(m.HexAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HexAddresses[iNdEx])
			copy(dAtA[i:], m.HexAddresses[iNdEx])
			i = encodeVarintEvmStateAttestation(dAtA, i, uint64(len(m.HexAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorBalancesAttestationRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBalancesAttestationRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorBalancesAttestationRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Balances[iNdEx])
			copy(dAtA[i:], m.Balances[iNdEx])
			i = encodeVarintEvmStateAttestation(dAtA, i, uint64(len(m.Balances[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvmStateAttestation(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvmStateAttestation(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvmStateAttestation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorBalancesAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HexAddresses) > 0 {
		for _, s := range m.HexAddresses {
			l = len(s)
			n += 1 + l + sovEvmStateAttestation(uint64(l))
		}
	}
	if len(m.ValAddresses) > 0 {
		for _, b := range m.ValAddresses {
			l = len(b)
			n += 1 + l + sovEvmStateAttestation(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.FromBlockTime)
	n += 1 + l + sovEvmStateAttestation(uint64(l))
	return n
}

func (m *ValidatorBalancesAttestationRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovEvmStateAttestation(uint64(m.BlockHeight))
	}
	if len(m.Balances) > 0 {
		for _, s := range m.Balances {
			l = len(s)
			n += 1 + l + sovEvmStateAttestation(uint64(l))
		}
	}
	return n
}

func sovEvmStateAttestation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvmStateAttestation(x uint64) (n int) {
	return sovEvmStateAttestation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorBalancesAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmStateAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorBalancesAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorBalancesAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HexAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmStateAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HexAddresses = append(m.HexAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmStateAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddresses = append(m.ValAddresses, make([]byte, postIndex-iNdEx))
			copy(m.ValAddresses[len(m.ValAddresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromBlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmStateAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.FromBlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvmStateAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorBalancesAttestationRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmStateAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorBalancesAttestationRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorBalancesAttestationRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmStateAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmStateAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvmStateAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmStateAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvmStateAttestation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvmStateAttestation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmStateAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmStateAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvmStateAttestation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvmStateAttestation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvmStateAttestation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvmStateAttestation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvmStateAttestation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvmStateAttestation = fmt.Errorf("proto: unexpected end of group")
)
