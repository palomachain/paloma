// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/evm/change_min_on_chain_balance_proposal.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChangeMinOnChainBalanceProposal struct {
	Title             string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description       string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ChainReferenceID  string `protobuf:"bytes,3,opt,name=chainReferenceID,proto3" json:"chainReferenceID,omitempty"`
	MinOnChainBalance string `protobuf:"bytes,4,opt,name=minOnChainBalance,proto3" json:"minOnChainBalance,omitempty"`
}

func (m *ChangeMinOnChainBalanceProposal) Reset()         { *m = ChangeMinOnChainBalanceProposal{} }
func (m *ChangeMinOnChainBalanceProposal) String() string { return proto.CompactTextString(m) }
func (*ChangeMinOnChainBalanceProposal) ProtoMessage()    {}
func (*ChangeMinOnChainBalanceProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2d320cddd404f42, []int{0}
}
func (m *ChangeMinOnChainBalanceProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeMinOnChainBalanceProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeMinOnChainBalanceProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeMinOnChainBalanceProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeMinOnChainBalanceProposal.Merge(m, src)
}
func (m *ChangeMinOnChainBalanceProposal) XXX_Size() int {
	return m.Size()
}
func (m *ChangeMinOnChainBalanceProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeMinOnChainBalanceProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeMinOnChainBalanceProposal proto.InternalMessageInfo

func (m *ChangeMinOnChainBalanceProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChangeMinOnChainBalanceProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChangeMinOnChainBalanceProposal) GetChainReferenceID() string {
	if m != nil {
		return m.ChainReferenceID
	}
	return ""
}

func (m *ChangeMinOnChainBalanceProposal) GetMinOnChainBalance() string {
	if m != nil {
		return m.MinOnChainBalance
	}
	return ""
}

func init() {
	proto.RegisterType((*ChangeMinOnChainBalanceProposal)(nil), "palomachain.paloma.evm.ChangeMinOnChainBalanceProposal")
}

func init() {
	proto.RegisterFile("palomachain/paloma/evm/change_min_on_chain_balance_proposal.proto", fileDescriptor_b2d320cddd404f42)
}

var fileDescriptor_b2d320cddd404f42 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x2c, 0x48, 0xcc, 0xc9,
	0xcf, 0x4d, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x87, 0xb0, 0xf5, 0x53, 0xcb, 0x72, 0xf5, 0x93,
	0x33, 0x12, 0xf3, 0xd2, 0x53, 0xe3, 0x73, 0x33, 0xf3, 0xe2, 0xf3, 0xf3, 0xe2, 0xc1, 0xd2, 0xf1,
	0x49, 0x89, 0x39, 0x89, 0x79, 0xc9, 0xa9, 0xf1, 0x05, 0x45, 0xf9, 0x05, 0xf9, 0xc5, 0x89, 0x39,
	0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x62, 0x48, 0x46, 0xe8, 0x41, 0xd8, 0x7a, 0xa9, 0x65,
	0xb9, 0x4a, 0x9b, 0x19, 0xb9, 0xe4, 0x9d, 0xc1, 0xc6, 0xf8, 0x66, 0xe6, 0xf9, 0xe7, 0x39, 0x83,
	0xe4, 0x9d, 0x20, 0x46, 0x04, 0x40, 0x4d, 0x10, 0x12, 0xe1, 0x62, 0x2d, 0xc9, 0x2c, 0xc9, 0x49,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0x14, 0xb8, 0xb8, 0x53, 0x52, 0x8b,
	0x93, 0x8b, 0x32, 0x0b, 0x4a, 0x32, 0xf3, 0xf3, 0x24, 0x98, 0xc0, 0x72, 0xc8, 0x42, 0x42, 0x5a,
	0x5c, 0x02, 0x60, 0xfb, 0x82, 0x52, 0xd3, 0x52, 0x8b, 0x52, 0xf3, 0x92, 0x53, 0x3d, 0x5d, 0x24,
	0x98, 0xc1, 0xca, 0x30, 0xc4, 0x85, 0x74, 0xb8, 0x04, 0x73, 0xd1, 0x1d, 0x20, 0xc1, 0x02, 0x56,
	0x8c, 0x29, 0xe1, 0xe4, 0x7c, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9,
	0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x9a,
	0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x58, 0x42, 0xad, 0x02, 0x1c,
	0x6e, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0, 0x90, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0x7a, 0x37, 0x2a, 0x5e, 0x01, 0x00, 0x00,
}

func (m *ChangeMinOnChainBalanceProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeMinOnChainBalanceProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeMinOnChainBalanceProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinOnChainBalance) > 0 {
		i -= len(m.MinOnChainBalance)
		copy(dAtA[i:], m.MinOnChainBalance)
		i = encodeVarintChangeMinOnChainBalanceProposal(dAtA, i, uint64(len(m.MinOnChainBalance)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainReferenceID) > 0 {
		i -= len(m.ChainReferenceID)
		copy(dAtA[i:], m.ChainReferenceID)
		i = encodeVarintChangeMinOnChainBalanceProposal(dAtA, i, uint64(len(m.ChainReferenceID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintChangeMinOnChainBalanceProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintChangeMinOnChainBalanceProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChangeMinOnChainBalanceProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovChangeMinOnChainBalanceProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChangeMinOnChainBalanceProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChangeMinOnChainBalanceProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovChangeMinOnChainBalanceProposal(uint64(l))
	}
	l = len(m.ChainReferenceID)
	if l > 0 {
		n += 1 + l + sovChangeMinOnChainBalanceProposal(uint64(l))
	}
	l = len(m.MinOnChainBalance)
	if l > 0 {
		n += 1 + l + sovChangeMinOnChainBalanceProposal(uint64(l))
	}
	return n
}

func sovChangeMinOnChainBalanceProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChangeMinOnChainBalanceProposal(x uint64) (n int) {
	return sovChangeMinOnChainBalanceProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChangeMinOnChainBalanceProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChangeMinOnChainBalanceProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeMinOnChainBalanceProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeMinOnChainBalanceProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeMinOnChainBalanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeMinOnChainBalanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeMinOnChainBalanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOnChainBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChangeMinOnChainBalanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinOnChainBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChangeMinOnChainBalanceProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChangeMinOnChainBalanceProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChangeMinOnChainBalanceProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangeMinOnChainBalanceProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChangeMinOnChainBalanceProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChangeMinOnChainBalanceProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChangeMinOnChainBalanceProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChangeMinOnChainBalanceProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChangeMinOnChainBalanceProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChangeMinOnChainBalanceProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChangeMinOnChainBalanceProposal = fmt.Errorf("proto: unexpected end of group")
)
