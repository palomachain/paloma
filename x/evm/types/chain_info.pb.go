// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/evm/chain_info.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainInfo_Status int32

const (
	ChainInfo_IN_PROPOSAL          ChainInfo_Status = 0
	ChainInfo_ACTIVE               ChainInfo_Status = 1
	ChainInfo_WAITING_FOR_EVIDENCE ChainInfo_Status = 2
)

var ChainInfo_Status_name = map[int32]string{
	0: "IN_PROPOSAL",
	1: "ACTIVE",
	2: "WAITING_FOR_EVIDENCE",
}

var ChainInfo_Status_value = map[string]int32{
	"IN_PROPOSAL":          0,
	"ACTIVE":               1,
	"WAITING_FOR_EVIDENCE": 2,
}

func (x ChainInfo_Status) String() string {
	return proto.EnumName(ChainInfo_Status_name, int32(x))
}

func (ChainInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_61bfdb7d30bf7e88, []int{0, 0}
}

// Since we need to update ERC20 token ownership to the new compass contract
// the deployment process is split into three steps:
// 1. Deploy the contract
// 2. Transfer ERC20 token ownership to the new contract
// 3. Set the new contract as current in Paloma
// The status field gives information on the current state of the deployment.
type SmartContractDeployment_Status int32

const (
	SmartContractDeployment_PENDING                              SmartContractDeployment_Status = 0
	SmartContractDeployment_IN_FLIGHT                            SmartContractDeployment_Status = 1
	SmartContractDeployment_WAITING_FOR_ERC20_OWNERSHIP_TRANSFER SmartContractDeployment_Status = 2
)

var SmartContractDeployment_Status_name = map[int32]string{
	0: "PENDING",
	1: "IN_FLIGHT",
	2: "WAITING_FOR_ERC20_OWNERSHIP_TRANSFER",
}

var SmartContractDeployment_Status_value = map[string]int32{
	"PENDING":                              0,
	"IN_FLIGHT":                            1,
	"WAITING_FOR_ERC20_OWNERSHIP_TRANSFER": 2,
}

func (x SmartContractDeployment_Status) String() string {
	return proto.EnumName(SmartContractDeployment_Status_name, int32(x))
}

func (SmartContractDeployment_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_61bfdb7d30bf7e88, []int{2, 0}
}

type SmartContractDeployment_ERC20Transfer_Status int32

const (
	// The transfer is still ongoing.
	SmartContractDeployment_ERC20Transfer_PENDING SmartContractDeployment_ERC20Transfer_Status = 0
	// The transfer has finished successfully.
	SmartContractDeployment_ERC20Transfer_OK SmartContractDeployment_ERC20Transfer_Status = 1
	// The transfer has failed and needs to be retried.
	SmartContractDeployment_ERC20Transfer_FAIL SmartContractDeployment_ERC20Transfer_Status = 2
)

var SmartContractDeployment_ERC20Transfer_Status_name = map[int32]string{
	0: "PENDING",
	1: "OK",
	2: "FAIL",
}

var SmartContractDeployment_ERC20Transfer_Status_value = map[string]int32{
	"PENDING": 0,
	"OK":      1,
	"FAIL":    2,
}

func (x SmartContractDeployment_ERC20Transfer_Status) String() string {
	return proto.EnumName(SmartContractDeployment_ERC20Transfer_Status_name, int32(x))
}

func (SmartContractDeployment_ERC20Transfer_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_61bfdb7d30bf7e88, []int{2, 0, 0}
}

type ChainInfo struct {
	Id                    uint64 `protobuf:"varint,9999,opt,name=id,proto3" json:"id,omitempty"`
	ChainReferenceID      string `protobuf:"bytes,1,opt,name=chainReferenceID,proto3" json:"chainReferenceID,omitempty"`
	ChainID               uint64 `protobuf:"varint,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	SmartContractUniqueID []byte `protobuf:"bytes,3,opt,name=smartContractUniqueID,proto3" json:"smartContractUniqueID,omitempty"`
	SmartContractAddr     string `protobuf:"bytes,4,opt,name=smartContractAddr,proto3" json:"smartContractAddr,omitempty"`
	// used to verify by pigeons if they are at the correct chain
	ReferenceBlockHeight  uint64           `protobuf:"varint,5,opt,name=referenceBlockHeight,proto3" json:"referenceBlockHeight,omitempty"`
	ReferenceBlockHash    string           `protobuf:"bytes,6,opt,name=referenceBlockHash,proto3" json:"referenceBlockHash,omitempty"`
	Abi                   string           `protobuf:"bytes,7,opt,name=abi,proto3" json:"abi,omitempty"`
	Bytecode              []byte           `protobuf:"bytes,8,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	ConstructorInput      []byte           `protobuf:"bytes,9,opt,name=constructorInput,proto3" json:"constructorInput,omitempty"`
	Status                ChainInfo_Status `protobuf:"varint,10,opt,name=status,proto3,enum=palomachain.paloma.evm.ChainInfo_Status" json:"status,omitempty"`
	ActiveSmartContractID uint64           `protobuf:"varint,11,opt,name=activeSmartContractID,proto3" json:"activeSmartContractID,omitempty"`
	MinOnChainBalance     string           `protobuf:"bytes,12,opt,name=minOnChainBalance,proto3" json:"minOnChainBalance,omitempty"`
	RelayWeights          *RelayWeights    `protobuf:"bytes,13,opt,name=relayWeights,proto3" json:"relayWeights,omitempty"`
}

func (m *ChainInfo) Reset()         { *m = ChainInfo{} }
func (m *ChainInfo) String() string { return proto.CompactTextString(m) }
func (*ChainInfo) ProtoMessage()    {}
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_61bfdb7d30bf7e88, []int{0}
}
func (m *ChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainInfo.Merge(m, src)
}
func (m *ChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainInfo proto.InternalMessageInfo

func (m *ChainInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChainInfo) GetChainReferenceID() string {
	if m != nil {
		return m.ChainReferenceID
	}
	return ""
}

func (m *ChainInfo) GetChainID() uint64 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *ChainInfo) GetSmartContractUniqueID() []byte {
	if m != nil {
		return m.SmartContractUniqueID
	}
	return nil
}

func (m *ChainInfo) GetSmartContractAddr() string {
	if m != nil {
		return m.SmartContractAddr
	}
	return ""
}

func (m *ChainInfo) GetReferenceBlockHeight() uint64 {
	if m != nil {
		return m.ReferenceBlockHeight
	}
	return 0
}

func (m *ChainInfo) GetReferenceBlockHash() string {
	if m != nil {
		return m.ReferenceBlockHash
	}
	return ""
}

func (m *ChainInfo) GetAbi() string {
	if m != nil {
		return m.Abi
	}
	return ""
}

func (m *ChainInfo) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

func (m *ChainInfo) GetConstructorInput() []byte {
	if m != nil {
		return m.ConstructorInput
	}
	return nil
}

func (m *ChainInfo) GetStatus() ChainInfo_Status {
	if m != nil {
		return m.Status
	}
	return ChainInfo_IN_PROPOSAL
}

func (m *ChainInfo) GetActiveSmartContractID() uint64 {
	if m != nil {
		return m.ActiveSmartContractID
	}
	return 0
}

func (m *ChainInfo) GetMinOnChainBalance() string {
	if m != nil {
		return m.MinOnChainBalance
	}
	return ""
}

func (m *ChainInfo) GetRelayWeights() *RelayWeights {
	if m != nil {
		return m.RelayWeights
	}
	return nil
}

type SmartContract struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AbiJSON  string `protobuf:"bytes,2,opt,name=abiJSON,proto3" json:"abiJSON,omitempty"`
	Bytecode []byte `protobuf:"bytes,3,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
}

func (m *SmartContract) Reset()         { *m = SmartContract{} }
func (m *SmartContract) String() string { return proto.CompactTextString(m) }
func (*SmartContract) ProtoMessage()    {}
func (*SmartContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_61bfdb7d30bf7e88, []int{1}
}
func (m *SmartContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmartContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmartContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmartContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartContract.Merge(m, src)
}
func (m *SmartContract) XXX_Size() int {
	return m.Size()
}
func (m *SmartContract) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartContract.DiscardUnknown(m)
}

var xxx_messageInfo_SmartContract proto.InternalMessageInfo

func (m *SmartContract) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SmartContract) GetAbiJSON() string {
	if m != nil {
		return m.AbiJSON
	}
	return ""
}

func (m *SmartContract) GetBytecode() []byte {
	if m != nil {
		return m.Bytecode
	}
	return nil
}

type SmartContractDeployment struct {
	// which smart contract is getting deployed
	SmartContractID uint64 `protobuf:"varint,1,opt,name=smartContractID,proto3" json:"smartContractID,omitempty"`
	// to which chain info the smart contract is getting deployed to
	ChainReferenceID string `protobuf:"bytes,2,opt,name=chainReferenceID,proto3" json:"chainReferenceID,omitempty"`
	// application level ID which uniquely identifies a deployed smart contract.
	// It's used if we have multiple smart contracts deployed on a same EVM so
	// that the contract can figure out if the message was actually sent for them.
	// (message includes the unique id and smart contract has simple logic to
	// disallow those that to not match)
	UniqueID []byte                         `protobuf:"bytes,3,opt,name=uniqueID,proto3" json:"uniqueID,omitempty"`
	Status   SmartContractDeployment_Status `protobuf:"varint,4,opt,name=status,proto3,enum=palomachain.paloma.evm.SmartContractDeployment_Status" json:"status,omitempty"`
	// A set of transfer records for each ERC20 token that
	// needs the updated smart contract address before Paloma
	// can switch to the new contract.
	Erc20Transfers []SmartContractDeployment_ERC20Transfer `protobuf:"bytes,5,rep,name=erc20transfers,proto3" json:"erc20transfers"`
	// Once deployed, this contains the address of the contract
	// on the remote chain.
	NewSmartContractAddress string `protobuf:"bytes,6,opt,name=newSmartContractAddress,proto3" json:"newSmartContractAddress,omitempty"`
}

func (m *SmartContractDeployment) Reset()         { *m = SmartContractDeployment{} }
func (m *SmartContractDeployment) String() string { return proto.CompactTextString(m) }
func (*SmartContractDeployment) ProtoMessage()    {}
func (*SmartContractDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_61bfdb7d30bf7e88, []int{2}
}
func (m *SmartContractDeployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmartContractDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmartContractDeployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmartContractDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartContractDeployment.Merge(m, src)
}
func (m *SmartContractDeployment) XXX_Size() int {
	return m.Size()
}
func (m *SmartContractDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartContractDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_SmartContractDeployment proto.InternalMessageInfo

func (m *SmartContractDeployment) GetSmartContractID() uint64 {
	if m != nil {
		return m.SmartContractID
	}
	return 0
}

func (m *SmartContractDeployment) GetChainReferenceID() string {
	if m != nil {
		return m.ChainReferenceID
	}
	return ""
}

func (m *SmartContractDeployment) GetUniqueID() []byte {
	if m != nil {
		return m.UniqueID
	}
	return nil
}

func (m *SmartContractDeployment) GetStatus() SmartContractDeployment_Status {
	if m != nil {
		return m.Status
	}
	return SmartContractDeployment_PENDING
}

func (m *SmartContractDeployment) GetErc20Transfers() []SmartContractDeployment_ERC20Transfer {
	if m != nil {
		return m.Erc20Transfers
	}
	return nil
}

func (m *SmartContractDeployment) GetNewSmartContractAddress() string {
	if m != nil {
		return m.NewSmartContractAddress
	}
	return ""
}

type SmartContractDeployment_ERC20Transfer struct {
	// Paloma denom of the ERC20 token
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// Address of the ERC20 token on the target chain
	Erc20 string `protobuf:"bytes,2,opt,name=erc20,proto3" json:"erc20,omitempty"`
	// Message ID of the logic call message created in charge of updating the
	// ownership.
	MsgID uint64 `protobuf:"varint,3,opt,name=msgID,proto3" json:"msgID,omitempty"`
	// Current status of the transfer.
	Status SmartContractDeployment_ERC20Transfer_Status `protobuf:"varint,4,opt,name=status,proto3,enum=palomachain.paloma.evm.SmartContractDeployment_ERC20Transfer_Status" json:"status,omitempty"`
}

func (m *SmartContractDeployment_ERC20Transfer) Reset()         { *m = SmartContractDeployment_ERC20Transfer{} }
func (m *SmartContractDeployment_ERC20Transfer) String() string { return proto.CompactTextString(m) }
func (*SmartContractDeployment_ERC20Transfer) ProtoMessage()    {}
func (*SmartContractDeployment_ERC20Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_61bfdb7d30bf7e88, []int{2, 0}
}
func (m *SmartContractDeployment_ERC20Transfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmartContractDeployment_ERC20Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmartContractDeployment_ERC20Transfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmartContractDeployment_ERC20Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartContractDeployment_ERC20Transfer.Merge(m, src)
}
func (m *SmartContractDeployment_ERC20Transfer) XXX_Size() int {
	return m.Size()
}
func (m *SmartContractDeployment_ERC20Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartContractDeployment_ERC20Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_SmartContractDeployment_ERC20Transfer proto.InternalMessageInfo

func (m *SmartContractDeployment_ERC20Transfer) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *SmartContractDeployment_ERC20Transfer) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

func (m *SmartContractDeployment_ERC20Transfer) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *SmartContractDeployment_ERC20Transfer) GetStatus() SmartContractDeployment_ERC20Transfer_Status {
	if m != nil {
		return m.Status
	}
	return SmartContractDeployment_ERC20Transfer_PENDING
}

func init() {
	proto.RegisterEnum("palomachain.paloma.evm.ChainInfo_Status", ChainInfo_Status_name, ChainInfo_Status_value)
	proto.RegisterEnum("palomachain.paloma.evm.SmartContractDeployment_Status", SmartContractDeployment_Status_name, SmartContractDeployment_Status_value)
	proto.RegisterEnum("palomachain.paloma.evm.SmartContractDeployment_ERC20Transfer_Status", SmartContractDeployment_ERC20Transfer_Status_name, SmartContractDeployment_ERC20Transfer_Status_value)
	proto.RegisterType((*ChainInfo)(nil), "palomachain.paloma.evm.ChainInfo")
	proto.RegisterType((*SmartContract)(nil), "palomachain.paloma.evm.SmartContract")
	proto.RegisterType((*SmartContractDeployment)(nil), "palomachain.paloma.evm.SmartContractDeployment")
	proto.RegisterType((*SmartContractDeployment_ERC20Transfer)(nil), "palomachain.paloma.evm.SmartContractDeployment.ERC20Transfer")
}

func init() {
	proto.RegisterFile("palomachain/paloma/evm/chain_info.proto", fileDescriptor_61bfdb7d30bf7e88)
}

var fileDescriptor_61bfdb7d30bf7e88 = []byte{
	// 765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcb, 0x8e, 0xe2, 0x46,
	0x14, 0xc5, 0xe6, 0x7d, 0x69, 0xba, 0x9d, 0x12, 0xc9, 0x94, 0x58, 0x10, 0x84, 0x46, 0x1a, 0x67,
	0x14, 0x99, 0x11, 0x89, 0xa2, 0x6c, 0xa2, 0x84, 0x87, 0x69, 0x9c, 0xb4, 0x0c, 0x2a, 0x98, 0x69,
	0x29, 0x8a, 0x64, 0x19, 0x53, 0x80, 0x35, 0xd8, 0x26, 0x76, 0xd1, 0x13, 0xbe, 0x22, 0xf9, 0x91,
	0x2c, 0xf3, 0x0f, 0xb3, 0x9c, 0xe5, 0xac, 0xa2, 0xa8, 0xfb, 0x47, 0x22, 0x97, 0x69, 0xd4, 0x36,
	0x66, 0x11, 0x65, 0x77, 0x5f, 0x3e, 0xf7, 0xd6, 0xa9, 0x73, 0x5d, 0xf0, 0x62, 0x6b, 0x6e, 0x3c,
	0xc7, 0xb4, 0xd6, 0xa6, 0xed, 0xb6, 0x23, 0xbb, 0x4d, 0xef, 0x9c, 0x36, 0x0f, 0x18, 0xb6, 0xbb,
	0xf4, 0x94, 0xad, 0xef, 0x31, 0x0f, 0x7d, 0xf6, 0xa4, 0x50, 0x89, 0x6c, 0x85, 0xde, 0x39, 0xf5,
	0x97, 0x67, 0x00, 0x7c, 0xba, 0x31, 0xf7, 0xc6, 0x3b, 0x6a, 0xaf, 0xd6, 0x2c, 0x88, 0x30, 0xea,
	0xb5, 0x95, 0xb7, 0xf2, 0xb8, 0xd9, 0x0e, 0xad, 0x28, 0xda, 0xfa, 0x2b, 0x0f, 0xe5, 0x7e, 0xf8,
	0xb9, 0xe6, 0x2e, 0x3d, 0x74, 0x05, 0xa2, 0xbd, 0xc0, 0xbf, 0xeb, 0x4d, 0x41, 0xce, 0x11, 0xd1,
	0x5e, 0xa0, 0x97, 0x20, 0x71, 0x70, 0x42, 0x97, 0xd4, 0xa7, 0xae, 0x45, 0xb5, 0x01, 0x16, 0x9a,
	0x82, 0x5c, 0x26, 0x27, 0x71, 0x84, 0xa1, 0xc8, 0x63, 0xda, 0x00, 0x8b, 0x1c, 0xe0, 0xd1, 0x45,
	0x5f, 0xc3, 0xa7, 0x81, 0x63, 0xfa, 0xac, 0xef, 0xb9, 0xcc, 0x37, 0x2d, 0xf6, 0xda, 0xb5, 0x7f,
	0xdd, 0x85, 0x50, 0xd9, 0xa6, 0x20, 0x5f, 0x90, 0xf4, 0x24, 0xfa, 0x12, 0x3e, 0x89, 0x25, 0xba,
	0x8b, 0x85, 0x8f, 0x73, 0xbc, 0xf9, 0x69, 0x02, 0x75, 0xa0, 0xe6, 0x3f, 0x0e, 0xd3, 0xdb, 0x78,
	0xd6, 0xdb, 0x11, 0x3f, 0x3d, 0xce, 0xf3, 0x51, 0x52, 0x73, 0x48, 0x01, 0x94, 0x88, 0x9b, 0xc1,
	0x1a, 0x17, 0x78, 0x8b, 0x94, 0x0c, 0x92, 0x20, 0x6b, 0xce, 0x6d, 0x5c, 0xe4, 0x05, 0xa1, 0x89,
	0xea, 0x50, 0x9a, 0xef, 0x19, 0xb5, 0xbc, 0x05, 0xc5, 0x25, 0x7e, 0x98, 0xa3, 0xcf, 0xb9, 0xf3,
	0xdc, 0x80, 0xf9, 0x3b, 0x8b, 0x79, 0xbe, 0xe6, 0x6e, 0x77, 0x0c, 0x97, 0x79, 0xcd, 0x49, 0x1c,
	0xfd, 0x00, 0x85, 0x80, 0x99, 0x6c, 0x17, 0x60, 0x68, 0x0a, 0xf2, 0x65, 0x47, 0x56, 0xd2, 0x6f,
	0x5c, 0x39, 0xde, 0x95, 0x32, 0xe5, 0xf5, 0xe4, 0xf0, 0x5d, 0xc8, 0xb1, 0x69, 0x31, 0xfb, 0x8e,
	0x4e, 0x9f, 0x52, 0xa3, 0x0d, 0x70, 0x85, 0x13, 0x90, 0x9e, 0x0c, 0x39, 0x76, 0x6c, 0x77, 0xec,
	0x72, 0xd8, 0x9e, 0xb9, 0x31, 0x5d, 0x8b, 0xe2, 0x8b, 0x88, 0xe3, 0x93, 0x04, 0x1a, 0xc1, 0x05,
	0x57, 0xd6, 0x6d, 0x24, 0x2c, 0x5c, 0x6d, 0x0a, 0x72, 0xa5, 0xf3, 0xfc, 0xdc, 0xac, 0xe4, 0x49,
	0x2d, 0x89, 0x7d, 0xd9, 0xfa, 0x1e, 0x0a, 0xd1, 0xfc, 0xe8, 0x0a, 0x2a, 0x9a, 0x6e, 0x4c, 0xc8,
	0x78, 0x32, 0x9e, 0x76, 0x6f, 0xa4, 0x0c, 0x02, 0x28, 0x74, 0xfb, 0x33, 0xed, 0x8d, 0x2a, 0x09,
	0x08, 0x43, 0xed, 0xb6, 0xab, 0xcd, 0x34, 0xfd, 0xda, 0x18, 0x8e, 0x89, 0xa1, 0xbe, 0xd1, 0x06,
	0xaa, 0xde, 0x57, 0x25, 0xb1, 0xf5, 0x1a, 0xaa, 0xb1, 0xb3, 0xa0, 0x4b, 0x2e, 0x5d, 0xe1, 0xa8,
	0x5c, 0x0c, 0x45, 0x73, 0x6e, 0xff, 0x38, 0x1d, 0xeb, 0x5c, 0x8d, 0x65, 0xf2, 0xe8, 0xc6, 0xee,
	0x2c, 0x1b, 0xbf, 0xb3, 0xd6, 0x9f, 0x79, 0x78, 0x16, 0xc3, 0x1d, 0xd0, 0xed, 0xc6, 0xdb, 0x3b,
	0xd4, 0x65, 0x48, 0x86, 0xab, 0x20, 0xc1, 0x6d, 0xd4, 0x2e, 0x19, 0x4e, 0xdd, 0x1a, 0xf1, 0xcc,
	0xd6, 0xd4, 0xa1, 0xb4, 0x8b, 0xaf, 0xc3, 0xd1, 0x47, 0xfa, 0x51, 0x15, 0x39, 0xae, 0x8a, 0x6f,
	0xce, 0x31, 0x7d, 0x66, 0xe4, 0xa4, 0x46, 0xde, 0xc2, 0x25, 0xf5, 0xad, 0xce, 0x2b, 0xe6, 0x9b,
	0x6e, 0xb0, 0xa4, 0x7e, 0x80, 0xf3, 0xcd, 0xac, 0x5c, 0xe9, 0x7c, 0xf7, 0x5f, 0x71, 0x55, 0xd2,
	0xef, 0xbc, 0x9a, 0x1d, 0x50, 0x7a, 0xb9, 0xf7, 0x7f, 0x7f, 0x9e, 0x21, 0x09, 0x68, 0xf4, 0x2d,
	0x3c, 0x73, 0xe9, 0xbb, 0x69, 0x72, 0x51, 0x69, 0x10, 0x1c, 0x36, 0xec, 0x5c, 0xba, 0xfe, 0x51,
	0x80, 0x6a, 0xac, 0x03, 0xaa, 0x41, 0x7e, 0x41, 0x5d, 0xcf, 0x39, 0xfc, 0x7b, 0x22, 0x27, 0x8c,
	0xf2, 0x9e, 0x07, 0x6e, 0x23, 0x27, 0x8c, 0x3a, 0xc1, 0xea, 0xc0, 0x66, 0x8e, 0x44, 0x0e, 0xfa,
	0x25, 0x41, 0xe5, 0xe0, 0x7f, 0x1d, 0x39, 0x41, 0x6c, 0xeb, 0xc5, 0x51, 0xce, 0x15, 0x28, 0x4e,
	0x54, 0x7d, 0xa0, 0xe9, 0xd7, 0x52, 0x06, 0x15, 0x40, 0x1c, 0xff, 0x24, 0x09, 0xa8, 0x04, 0xb9,
	0x61, 0x57, 0xbb, 0x91, 0xc4, 0x96, 0x9e, 0x5e, 0x58, 0x85, 0xb2, 0xa6, 0x1b, 0xc3, 0x1b, 0xed,
	0x7a, 0x34, 0x93, 0x04, 0x24, 0xc3, 0xf3, 0x98, 0xec, 0xc3, 0xd6, 0xc6, 0xf8, 0x56, 0x57, 0xc9,
	0x74, 0xa4, 0x4d, 0x8c, 0x19, 0xe9, 0xea, 0xd3, 0xa1, 0x4a, 0x24, 0xb1, 0xd7, 0x7f, 0x7f, 0xdf,
	0x10, 0x3e, 0xdc, 0x37, 0x84, 0x7f, 0xee, 0x1b, 0xc2, 0x1f, 0x0f, 0x8d, 0xcc, 0x87, 0x87, 0x46,
	0xe6, 0xe3, 0x43, 0x23, 0xf3, 0xf3, 0x17, 0x2b, 0x9b, 0xad, 0x77, 0x73, 0xc5, 0xf2, 0x9c, 0x76,
	0xca, 0x2b, 0xf1, 0x1b, 0x7f, 0x27, 0xd8, 0x7e, 0x4b, 0x83, 0x79, 0x81, 0x3f, 0x05, 0x5f, 0xfd,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x30, 0x02, 0x23, 0x6c, 0x8f, 0x06, 0x00, 0x00,
}

func (m *ChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf0
		i--
		dAtA[i] = 0xf8
	}
	if m.RelayWeights != nil {
		{
			size, err := m.RelayWeights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MinOnChainBalance) > 0 {
		i -= len(m.MinOnChainBalance)
		copy(dAtA[i:], m.MinOnChainBalance)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.MinOnChainBalance)))
		i--
		dAtA[i] = 0x62
	}
	if m.ActiveSmartContractID != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.ActiveSmartContractID))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ConstructorInput) > 0 {
		i -= len(m.ConstructorInput)
		copy(dAtA[i:], m.ConstructorInput)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.ConstructorInput)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Bytecode) > 0 {
		i -= len(m.Bytecode)
		copy(dAtA[i:], m.Bytecode)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.Bytecode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Abi) > 0 {
		i -= len(m.Abi)
		copy(dAtA[i:], m.Abi)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.Abi)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReferenceBlockHash) > 0 {
		i -= len(m.ReferenceBlockHash)
		copy(dAtA[i:], m.ReferenceBlockHash)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.ReferenceBlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.ReferenceBlockHeight != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.ReferenceBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SmartContractAddr) > 0 {
		i -= len(m.SmartContractAddr)
		copy(dAtA[i:], m.SmartContractAddr)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.SmartContractAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SmartContractUniqueID) > 0 {
		i -= len(m.SmartContractUniqueID)
		copy(dAtA[i:], m.SmartContractUniqueID)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.SmartContractUniqueID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainID != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainReferenceID) > 0 {
		i -= len(m.ChainReferenceID)
		copy(dAtA[i:], m.ChainReferenceID)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.ChainReferenceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmartContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmartContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytecode) > 0 {
		i -= len(m.Bytecode)
		copy(dAtA[i:], m.Bytecode)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.Bytecode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AbiJSON) > 0 {
		i -= len(m.AbiJSON)
		copy(dAtA[i:], m.AbiJSON)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.AbiJSON)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SmartContractDeployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartContractDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmartContractDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewSmartContractAddress) > 0 {
		i -= len(m.NewSmartContractAddress)
		copy(dAtA[i:], m.NewSmartContractAddress)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.NewSmartContractAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Erc20Transfers) > 0 {
		for iNdEx := len(m.Erc20Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc20Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UniqueID) > 0 {
		i -= len(m.UniqueID)
		copy(dAtA[i:], m.UniqueID)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.UniqueID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainReferenceID) > 0 {
		i -= len(m.ChainReferenceID)
		copy(dAtA[i:], m.ChainReferenceID)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.ChainReferenceID)))
		i--
		dAtA[i] = 0x12
	}
	if m.SmartContractID != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.SmartContractID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SmartContractDeployment_ERC20Transfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartContractDeployment_ERC20Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmartContractDeployment_ERC20Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.MsgID != 0 {
		i = encodeVarintChainInfo(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintChainInfo(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChainInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainReferenceID)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.ChainID != 0 {
		n += 1 + sovChainInfo(uint64(m.ChainID))
	}
	l = len(m.SmartContractUniqueID)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.SmartContractAddr)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.ReferenceBlockHeight != 0 {
		n += 1 + sovChainInfo(uint64(m.ReferenceBlockHeight))
	}
	l = len(m.ReferenceBlockHash)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.Bytecode)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.ConstructorInput)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovChainInfo(uint64(m.Status))
	}
	if m.ActiveSmartContractID != 0 {
		n += 1 + sovChainInfo(uint64(m.ActiveSmartContractID))
	}
	l = len(m.MinOnChainBalance)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.RelayWeights != nil {
		l = m.RelayWeights.Size()
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.Id != 0 {
		n += 3 + sovChainInfo(uint64(m.Id))
	}
	return n
}

func (m *SmartContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChainInfo(uint64(m.Id))
	}
	l = len(m.AbiJSON)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.Bytecode)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	return n
}

func (m *SmartContractDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmartContractID != 0 {
		n += 1 + sovChainInfo(uint64(m.SmartContractID))
	}
	l = len(m.ChainReferenceID)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.UniqueID)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovChainInfo(uint64(m.Status))
	}
	if len(m.Erc20Transfers) > 0 {
		for _, e := range m.Erc20Transfers {
			l = e.Size()
			n += 1 + l + sovChainInfo(uint64(l))
		}
	}
	l = len(m.NewSmartContractAddress)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	return n
}

func (m *SmartContractDeployment_ERC20Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovChainInfo(uint64(l))
	}
	if m.MsgID != 0 {
		n += 1 + sovChainInfo(uint64(m.MsgID))
	}
	if m.Status != 0 {
		n += 1 + sovChainInfo(uint64(m.Status))
	}
	return n
}

func sovChainInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainInfo(x uint64) (n int) {
	return sovChainInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractUniqueID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartContractUniqueID = append(m.SmartContractUniqueID[:0], dAtA[iNdEx:postIndex]...)
			if m.SmartContractUniqueID == nil {
				m.SmartContractUniqueID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceBlockHeight", wireType)
			}
			m.ReferenceBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferenceBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytecode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytecode = append(m.Bytecode[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytecode == nil {
				m.Bytecode = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstructorInput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConstructorInput = append(m.ConstructorInput[:0], dAtA[iNdEx:postIndex]...)
			if m.ConstructorInput == nil {
				m.ConstructorInput = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ChainInfo_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSmartContractID", wireType)
			}
			m.ActiveSmartContractID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSmartContractID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOnChainBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinOnChainBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelayWeights == nil {
				m.RelayWeights = &RelayWeights{}
			}
			if err := m.RelayWeights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9999:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbiJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbiJSON = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytecode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytecode = append(m.Bytecode[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytecode == nil {
				m.Bytecode = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartContractDeployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartContractDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartContractDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractID", wireType)
			}
			m.SmartContractID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmartContractID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueID = append(m.UniqueID[:0], dAtA[iNdEx:postIndex]...)
			if m.UniqueID == nil {
				m.UniqueID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SmartContractDeployment_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Transfers = append(m.Erc20Transfers, SmartContractDeployment_ERC20Transfer{})
			if err := m.Erc20Transfers[len(m.Erc20Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSmartContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewSmartContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartContractDeployment_ERC20Transfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20Transfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20Transfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SmartContractDeployment_ERC20Transfer_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainInfo = fmt.Errorf("proto: unexpected end of group")
)
