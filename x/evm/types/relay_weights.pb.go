// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/evm/relay_weights.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RelayWeights struct {
	Fee           string `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
	Uptime        string `protobuf:"bytes,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	SuccessRate   string `protobuf:"bytes,3,opt,name=successRate,proto3" json:"successRate,omitempty"`
	ExecutionTime string `protobuf:"bytes,4,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	FeatureSet    string `protobuf:"bytes,5,opt,name=featureSet,proto3" json:"featureSet,omitempty"`
}

func (m *RelayWeights) Reset()         { *m = RelayWeights{} }
func (m *RelayWeights) String() string { return proto.CompactTextString(m) }
func (*RelayWeights) ProtoMessage()    {}
func (*RelayWeights) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5b82d9f8c0a0e3, []int{0}
}
func (m *RelayWeights) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayWeights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayWeights.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayWeights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayWeights.Merge(m, src)
}
func (m *RelayWeights) XXX_Size() int {
	return m.Size()
}
func (m *RelayWeights) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayWeights.DiscardUnknown(m)
}

var xxx_messageInfo_RelayWeights proto.InternalMessageInfo

func (m *RelayWeights) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *RelayWeights) GetUptime() string {
	if m != nil {
		return m.Uptime
	}
	return ""
}

func (m *RelayWeights) GetSuccessRate() string {
	if m != nil {
		return m.SuccessRate
	}
	return ""
}

func (m *RelayWeights) GetExecutionTime() string {
	if m != nil {
		return m.ExecutionTime
	}
	return ""
}

func (m *RelayWeights) GetFeatureSet() string {
	if m != nil {
		return m.FeatureSet
	}
	return ""
}

func init() {
	proto.RegisterType((*RelayWeights)(nil), "palomachain.paloma.evm.RelayWeights")
}

func init() {
	proto.RegisterFile("palomachain/paloma/evm/relay_weights.proto", fileDescriptor_0c5b82d9f8c0a0e3)
}

var fileDescriptor_0c5b82d9f8c0a0e3 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x48, 0xcc, 0xc9,
	0xcf, 0x4d, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x87, 0xb0, 0xf5, 0x53, 0xcb, 0x72, 0xf5, 0x8b,
	0x52, 0x73, 0x12, 0x2b, 0xe3, 0xcb, 0x53, 0x33, 0xd3, 0x33, 0x4a, 0x8a, 0xf5, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0x85, 0xc4, 0x90, 0xd4, 0xea, 0x41, 0xd8, 0x7a, 0xa9, 0x65, 0xb9, 0x52, 0x92, 0xc9,
	0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0xf1, 0x60, 0x55, 0xfa, 0x10, 0x0e, 0x44, 0x8b, 0xd2, 0x07, 0x46,
	0x2e, 0x9e, 0x20, 0x90, 0x51, 0xe1, 0x10, 0x93, 0x84, 0x14, 0xb8, 0x98, 0xd3, 0x52, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x9d, 0xf8, 0x2e, 0x6d, 0xd1, 0xe5, 0x82, 0xaa, 0x77, 0x49, 0x4d,
	0x0e, 0x02, 0x49, 0x09, 0xa9, 0x71, 0xb1, 0x95, 0x16, 0x94, 0x64, 0xe6, 0xa6, 0x4a, 0x30, 0x61,
	0x55, 0x04, 0x95, 0x15, 0x32, 0xe0, 0xe2, 0x2e, 0x2e, 0x4d, 0x4e, 0x4e, 0x2d, 0x2e, 0x0e, 0x4a,
	0x2c, 0x49, 0x95, 0x60, 0xc6, 0xaa, 0x18, 0x59, 0x89, 0x90, 0x09, 0x17, 0x6f, 0x6a, 0x45, 0x6a,
	0x72, 0x69, 0x49, 0x66, 0x7e, 0x5e, 0x08, 0xc8, 0x02, 0x16, 0xac, 0x7a, 0x50, 0x15, 0x09, 0xe9,
	0x71, 0x71, 0xa5, 0xa5, 0x26, 0x96, 0x94, 0x16, 0xa5, 0x06, 0xa7, 0x96, 0x48, 0xb0, 0x62, 0xd5,
	0x82, 0xa4, 0xc2, 0xc9, 0xf9, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92,
	0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x34,
	0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xb1, 0x04, 0x7b, 0x05, 0x38,
	0xe0, 0x4b, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0xc1, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xfd, 0xa7, 0xb8, 0x15, 0x9f, 0x01, 0x00, 0x00,
}

func (m *RelayWeights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayWeights) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayWeights) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeatureSet) > 0 {
		i -= len(m.FeatureSet)
		copy(dAtA[i:], m.FeatureSet)
		i = encodeVarintRelayWeights(dAtA, i, uint64(len(m.FeatureSet)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExecutionTime) > 0 {
		i -= len(m.ExecutionTime)
		copy(dAtA[i:], m.ExecutionTime)
		i = encodeVarintRelayWeights(dAtA, i, uint64(len(m.ExecutionTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SuccessRate) > 0 {
		i -= len(m.SuccessRate)
		copy(dAtA[i:], m.SuccessRate)
		i = encodeVarintRelayWeights(dAtA, i, uint64(len(m.SuccessRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uptime) > 0 {
		i -= len(m.Uptime)
		copy(dAtA[i:], m.Uptime)
		i = encodeVarintRelayWeights(dAtA, i, uint64(len(m.Uptime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintRelayWeights(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelayWeights(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelayWeights(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelayWeights) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovRelayWeights(uint64(l))
	}
	l = len(m.Uptime)
	if l > 0 {
		n += 1 + l + sovRelayWeights(uint64(l))
	}
	l = len(m.SuccessRate)
	if l > 0 {
		n += 1 + l + sovRelayWeights(uint64(l))
	}
	l = len(m.ExecutionTime)
	if l > 0 {
		n += 1 + l + sovRelayWeights(uint64(l))
	}
	l = len(m.FeatureSet)
	if l > 0 {
		n += 1 + l + sovRelayWeights(uint64(l))
	}
	return n
}

func sovRelayWeights(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelayWeights(x uint64) (n int) {
	return sovRelayWeights(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelayWeights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayWeights
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayWeights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayWeights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uptime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayWeights(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayWeights
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelayWeights(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelayWeights
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayWeights
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayWeights
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelayWeights
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelayWeights
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelayWeights
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelayWeights        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelayWeights          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelayWeights = fmt.Errorf("proto: unexpected end of group")
)
