// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: palomachain/paloma/evm/relay_weights_proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RelayWeightsProposal struct {
	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ChainReferenceID string `protobuf:"bytes,3,opt,name=chainReferenceID,proto3" json:"chainReferenceID,omitempty"`
	Fee              string `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Uptime           string `protobuf:"bytes,5,opt,name=uptime,proto3" json:"uptime,omitempty"`
	SuccessRate      string `protobuf:"bytes,6,opt,name=successRate,proto3" json:"successRate,omitempty"`
	ExecutionTime    string `protobuf:"bytes,7,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	FeatureSet       string `protobuf:"bytes,8,opt,name=featureSet,proto3" json:"featureSet,omitempty"`
}

func (m *RelayWeightsProposal) Reset()         { *m = RelayWeightsProposal{} }
func (m *RelayWeightsProposal) String() string { return proto.CompactTextString(m) }
func (*RelayWeightsProposal) ProtoMessage()    {}
func (*RelayWeightsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c69c53864c5bd3a, []int{0}
}
func (m *RelayWeightsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayWeightsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayWeightsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayWeightsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayWeightsProposal.Merge(m, src)
}
func (m *RelayWeightsProposal) XXX_Size() int {
	return m.Size()
}
func (m *RelayWeightsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayWeightsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RelayWeightsProposal proto.InternalMessageInfo

func (m *RelayWeightsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RelayWeightsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RelayWeightsProposal) GetChainReferenceID() string {
	if m != nil {
		return m.ChainReferenceID
	}
	return ""
}

func (m *RelayWeightsProposal) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *RelayWeightsProposal) GetUptime() string {
	if m != nil {
		return m.Uptime
	}
	return ""
}

func (m *RelayWeightsProposal) GetSuccessRate() string {
	if m != nil {
		return m.SuccessRate
	}
	return ""
}

func (m *RelayWeightsProposal) GetExecutionTime() string {
	if m != nil {
		return m.ExecutionTime
	}
	return ""
}

func (m *RelayWeightsProposal) GetFeatureSet() string {
	if m != nil {
		return m.FeatureSet
	}
	return ""
}

func init() {
	proto.RegisterType((*RelayWeightsProposal)(nil), "palomachain.paloma.evm.RelayWeightsProposal")
}

func init() {
	proto.RegisterFile("palomachain/paloma/evm/relay_weights_proposal.proto", fileDescriptor_8c69c53864c5bd3a)
}

var fileDescriptor_8c69c53864c5bd3a = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x9b, 0xf6, 0xdf, 0xfe, 0x75, 0x8a, 0x22, 0x4b, 0x91, 0xd5, 0x43, 0x28, 0x1e, 0x44,
	0x05, 0x13, 0xa1, 0x3e, 0x41, 0xed, 0xc5, 0x9b, 0x44, 0x41, 0xf0, 0x52, 0xb6, 0xeb, 0xb4, 0x5d,
	0x48, 0xba, 0x4b, 0x76, 0x52, 0xdb, 0xb7, 0xf0, 0x61, 0x7c, 0x08, 0x8f, 0xc5, 0x93, 0x07, 0x0f,
	0xd2, 0xbe, 0x88, 0x24, 0xdb, 0x43, 0xc4, 0xdc, 0x66, 0xe6, 0xfb, 0x7d, 0x33, 0x03, 0x1f, 0xf4,
	0x8c, 0x88, 0x75, 0x22, 0xe4, 0x54, 0xa8, 0x59, 0xe8, 0xea, 0x10, 0xe7, 0x49, 0x98, 0x62, 0x2c,
	0x96, 0xc3, 0x17, 0x54, 0x93, 0x29, 0xd9, 0xa1, 0x49, 0xb5, 0xd1, 0x56, 0xc4, 0x81, 0x49, 0x35,
	0x69, 0x76, 0x58, 0x32, 0x05, 0xae, 0x0e, 0x70, 0x9e, 0x1c, 0x1f, 0x49, 0x6d, 0x13, 0x5d, 0xe0,
	0xa4, 0x43, 0xd7, 0x38, 0xcb, 0xc9, 0x57, 0x1d, 0x3a, 0x51, 0xbe, 0xf3, 0xd1, 0xad, 0xbc, 0xdb,
	0x6e, 0x64, 0x1d, 0x68, 0x92, 0xa2, 0x18, 0xb9, 0xd7, 0xf5, 0xce, 0x76, 0x23, 0xd7, 0xb0, 0x2e,
	0xb4, 0x9f, 0xd1, 0xca, 0x54, 0x19, 0x52, 0x7a, 0xc6, 0xeb, 0x85, 0x56, 0x1e, 0xb1, 0x0b, 0x38,
	0x28, 0xee, 0x47, 0x38, 0xc6, 0x14, 0x67, 0x12, 0x6f, 0x07, 0xbc, 0x51, 0x60, 0x7f, 0xe6, 0xac,
	0x0b, 0x8d, 0x31, 0x22, 0xff, 0x97, 0xcb, 0xfd, 0xfd, 0x8f, 0xb7, 0x4b, 0xd8, 0xfe, 0x36, 0x40,
	0x19, 0xe5, 0x12, 0x3b, 0x85, 0x56, 0x66, 0x48, 0x25, 0xc8, 0x9b, 0x95, 0xd0, 0x56, 0x65, 0x57,
	0xd0, 0xb6, 0x99, 0x94, 0x68, 0x6d, 0x24, 0x08, 0x79, 0xab, 0x12, 0x2e, 0x23, 0xec, 0x1a, 0xf6,
	0x70, 0x81, 0x32, 0xcb, 0x9f, 0x7e, 0xc8, 0x0f, 0xfc, 0xaf, 0xf4, 0xfc, 0x86, 0x58, 0x00, 0x30,
	0x46, 0x41, 0x59, 0x8a, 0xf7, 0x48, 0x7c, 0xa7, 0xd2, 0x52, 0x22, 0xfa, 0x37, 0xef, 0x6b, 0xdf,
	0x5b, 0xad, 0x7d, 0xef, 0x7b, 0xed, 0x7b, 0xaf, 0x1b, 0xbf, 0xb6, 0xda, 0xf8, 0xb5, 0xcf, 0x8d,
	0x5f, 0x7b, 0x3a, 0x9f, 0x28, 0x9a, 0x66, 0xa3, 0x40, 0xea, 0x24, 0xac, 0xc8, 0x7a, 0x51, 0xa4,
	0x4d, 0x4b, 0x83, 0x76, 0xd4, 0x2a, 0xa2, 0xea, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xf3,
	0x8d, 0x51, 0x14, 0x02, 0x00, 0x00,
}

func (m *RelayWeightsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayWeightsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayWeightsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeatureSet) > 0 {
		i -= len(m.FeatureSet)
		copy(dAtA[i:], m.FeatureSet)
		i = encodeVarintRelayWeightsProposal(dAtA, i, uint64(len(m.FeatureSet)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExecutionTime) > 0 {
		i -= len(m.ExecutionTime)
		copy(dAtA[i:], m.ExecutionTime)
		i = encodeVarintRelayWeightsProposal(dAtA, i, uint64(len(m.ExecutionTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SuccessRate) > 0 {
		i -= len(m.SuccessRate)
		copy(dAtA[i:], m.SuccessRate)
		i = encodeVarintRelayWeightsProposal(dAtA, i, uint64(len(m.SuccessRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Uptime) > 0 {
		i -= len(m.Uptime)
		copy(dAtA[i:], m.Uptime)
		i = encodeVarintRelayWeightsProposal(dAtA, i, uint64(len(m.Uptime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintRelayWeightsProposal(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainReferenceID) > 0 {
		i -= len(m.ChainReferenceID)
		copy(dAtA[i:], m.ChainReferenceID)
		i = encodeVarintRelayWeightsProposal(dAtA, i, uint64(len(m.ChainReferenceID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintRelayWeightsProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintRelayWeightsProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelayWeightsProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelayWeightsProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelayWeightsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRelayWeightsProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovRelayWeightsProposal(uint64(l))
	}
	l = len(m.ChainReferenceID)
	if l > 0 {
		n += 1 + l + sovRelayWeightsProposal(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovRelayWeightsProposal(uint64(l))
	}
	l = len(m.Uptime)
	if l > 0 {
		n += 1 + l + sovRelayWeightsProposal(uint64(l))
	}
	l = len(m.SuccessRate)
	if l > 0 {
		n += 1 + l + sovRelayWeightsProposal(uint64(l))
	}
	l = len(m.ExecutionTime)
	if l > 0 {
		n += 1 + l + sovRelayWeightsProposal(uint64(l))
	}
	l = len(m.FeatureSet)
	if l > 0 {
		n += 1 + l + sovRelayWeightsProposal(uint64(l))
	}
	return n
}

func sovRelayWeightsProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelayWeightsProposal(x uint64) (n int) {
	return sovRelayWeightsProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelayWeightsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayWeightsProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayWeightsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayWeightsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainReferenceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainReferenceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uptime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayWeightsProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayWeightsProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelayWeightsProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelayWeightsProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayWeightsProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelayWeightsProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelayWeightsProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelayWeightsProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelayWeightsProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelayWeightsProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelayWeightsProposal = fmt.Errorf("proto: unexpected end of group")
)
