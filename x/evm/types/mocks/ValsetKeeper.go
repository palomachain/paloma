// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/palomachain/paloma/x/valset/types"
)

// ValsetKeeper is an autogenerated mock type for the ValsetKeeper type
type ValsetKeeper struct {
	mock.Mock
}

// FindSnapshotByID provides a mock function with given fields: ctx, id
func (_m *ValsetKeeper) FindSnapshotByID(ctx context.Context, id uint64) (*types.Snapshot, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindSnapshotByID")
	}

	var r0 *types.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*types.Snapshot, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *types.Snapshot); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllChainInfos provides a mock function with given fields: ctx
func (_m *ValsetKeeper) GetAllChainInfos(ctx context.Context) ([]*types.ValidatorExternalAccounts, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllChainInfos")
	}

	var r0 []*types.ValidatorExternalAccounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*types.ValidatorExternalAccounts, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*types.ValidatorExternalAccounts); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.ValidatorExternalAccounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentSnapshot provides a mock function with given fields: ctx
func (_m *ValsetKeeper) GetCurrentSnapshot(ctx context.Context) (*types.Snapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentSnapshot")
	}

	var r0 *types.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.Snapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.Snapshot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestSnapshotOnChain provides a mock function with given fields: ctx, chainReferenceID
func (_m *ValsetKeeper) GetLatestSnapshotOnChain(ctx context.Context, chainReferenceID string) (*types.Snapshot, error) {
	ret := _m.Called(ctx, chainReferenceID)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestSnapshotOnChain")
	}

	var r0 *types.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Snapshot, error)); ok {
		return rf(ctx, chainReferenceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Snapshot); ok {
		r0 = rf(ctx, chainReferenceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chainReferenceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidatorChainInfos provides a mock function with given fields: ctx, valAddr
func (_m *ValsetKeeper) GetValidatorChainInfos(ctx context.Context, valAddr cosmos_sdktypes.ValAddress) ([]*types.ExternalChainInfo, error) {
	ret := _m.Called(ctx, valAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorChainInfos")
	}

	var r0 []*types.ExternalChainInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) ([]*types.ExternalChainInfo, error)); ok {
		return rf(ctx, valAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) []*types.ExternalChainInfo); ok {
		r0 = rf(ctx, valAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.ExternalChainInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ValAddress) error); ok {
		r1 = rf(ctx, valAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsJailed provides a mock function with given fields: ctx, val
func (_m *ValsetKeeper) IsJailed(ctx context.Context, val cosmos_sdktypes.ValAddress) (bool, error) {
	ret := _m.Called(ctx, val)

	if len(ret) == 0 {
		panic("no return value specified for IsJailed")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) (bool, error)); ok {
		return rf(ctx, val)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) bool); ok {
		r0 = rf(ctx, val)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ValAddress) error); ok {
		r1 = rf(ctx, val)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Jail provides a mock function with given fields: ctx, valAddr, reason
func (_m *ValsetKeeper) Jail(ctx context.Context, valAddr cosmos_sdktypes.ValAddress, reason string) error {
	ret := _m.Called(ctx, valAddr, reason)

	if len(ret) == 0 {
		panic("no return value specified for Jail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress, string) error); ok {
		r0 = rf(ctx, valAddr, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeepValidatorAlive provides a mock function with given fields: ctx, valAddr, pigeonVersion
func (_m *ValsetKeeper) KeepValidatorAlive(ctx context.Context, valAddr cosmos_sdktypes.ValAddress, pigeonVersion string) error {
	ret := _m.Called(ctx, valAddr, pigeonVersion)

	if len(ret) == 0 {
		panic("no return value specified for KeepValidatorAlive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress, string) error); ok {
		r0 = rf(ctx, valAddr, pigeonVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSnapshotOnChain provides a mock function with given fields: ctx, snapshotID, chainReferenceID
func (_m *ValsetKeeper) SetSnapshotOnChain(ctx context.Context, snapshotID uint64, chainReferenceID string) error {
	ret := _m.Called(ctx, snapshotID, chainReferenceID)

	if len(ret) == 0 {
		panic("no return value specified for SetSnapshotOnChain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) error); ok {
		r0 = rf(ctx, snapshotID, chainReferenceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetValidatorBalance provides a mock function with given fields: ctx, valAddr, chainType, chainReferenceID, externalAddress, balance
func (_m *ValsetKeeper) SetValidatorBalance(ctx context.Context, valAddr cosmos_sdktypes.ValAddress, chainType string, chainReferenceID string, externalAddress string, balance *big.Int) error {
	ret := _m.Called(ctx, valAddr, chainType, chainReferenceID, externalAddress, balance)

	if len(ret) == 0 {
		panic("no return value specified for SetValidatorBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress, string, string, string, *big.Int) error); ok {
		r0 = rf(ctx, valAddr, chainType, chainReferenceID, externalAddress, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewValsetKeeper creates a new instance of ValsetKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValsetKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValsetKeeper {
	mock := &ValsetKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
