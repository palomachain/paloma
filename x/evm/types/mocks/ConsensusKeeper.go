// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	consensus "github.com/palomachain/paloma/x/consensus/keeper/consensus"
	consensustypes "github.com/palomachain/paloma/x/consensus/types"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ConsensusKeeper is an autogenerated mock type for the ConsensusKeeper type
type ConsensusKeeper struct {
	mock.Mock
}

// DeleteJob provides a mock function with given fields: ctx, queueTypeName, id
func (_m *ConsensusKeeper) DeleteJob(ctx context.Context, queueTypeName string, id uint64) error {
	ret := _m.Called(ctx, queueTypeName, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) error); ok {
		r0 = rf(ctx, queueTypeName, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessagesFromQueue provides a mock function with given fields: ctx, queueTypeName, n
func (_m *ConsensusKeeper) GetMessagesFromQueue(ctx context.Context, queueTypeName string, n int) ([]consensustypes.QueuedSignedMessageI, error) {
	ret := _m.Called(ctx, queueTypeName, n)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesFromQueue")
	}

	var r0 []consensustypes.QueuedSignedMessageI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]consensustypes.QueuedSignedMessageI, error)); ok {
		return rf(ctx, queueTypeName, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []consensustypes.QueuedSignedMessageI); ok {
		r0 = rf(ctx, queueTypeName, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]consensustypes.QueuedSignedMessageI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, queueTypeName, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMessageInQueue provides a mock function with given fields: ctx, queueTypeName, msg, opts
func (_m *ConsensusKeeper) PutMessageInQueue(ctx context.Context, queueTypeName string, msg consensustypes.ConsensusMsg, opts *consensus.PutOptions) (uint64, error) {
	ret := _m.Called(ctx, queueTypeName, msg, opts)

	if len(ret) == 0 {
		panic("no return value specified for PutMessageInQueue")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, consensustypes.ConsensusMsg, *consensus.PutOptions) (uint64, error)); ok {
		return rf(ctx, queueTypeName, msg, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, consensustypes.ConsensusMsg, *consensus.PutOptions) uint64); ok {
		r0 = rf(ctx, queueTypeName, msg, opts)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, consensustypes.ConsensusMsg, *consensus.PutOptions) error); ok {
		r1 = rf(ctx, queueTypeName, msg, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveConsensusQueue provides a mock function with given fields: ctx, queueTypeName
func (_m *ConsensusKeeper) RemoveConsensusQueue(ctx context.Context, queueTypeName string) error {
	ret := _m.Called(ctx, queueTypeName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveConsensusQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, queueTypeName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsensusKeeper creates a new instance of ConsensusKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsensusKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsensusKeeper {
	mock := &ConsensusKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
