syntax = "proto3";
package palomachain.paloma.gravity;

import "palomachain/paloma/gravity/pool.proto";
import "palomachain/paloma/gravity/batch.proto";
import "palomachain/paloma/gravity/attestation.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "palomachain/paloma/gravity/genesis.proto";
import "palomachain/paloma/gravity/types.proto";
import "palomachain/paloma/gravity/msgs.proto";
import "palomachain/paloma/gravity/params.proto";
import "palomachain/paloma/gravity/bridge_tax.proto";
import "palomachain/paloma/gravity/bridge_transfer_limit.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/palomachain/paloma/x/gravity/types";

// Query defines the gRPC querier service
service Query {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {}
  rpc LastPendingBatchRequestByAddr(QueryLastPendingBatchRequestByAddrRequest)
      returns (QueryLastPendingBatchRequestByAddrResponse) {}
  rpc LastObservedGravityNonce(QueryLastObservedGravityNonceRequest)
      returns (QueryLastObservedGravityNonceResponse) {}
  rpc LastObservedGravityNonceByAddr(QueryLastObservedGravityNonceByAddrRequest)
      returns (QueryLastObservedGravityNonceResponse) {}
  rpc LastObservedGravityBlock(QueryLastObservedGravityBlockRequest)
      returns (QueryLastObservedGravityBlockResponse) {}
  rpc OutgoingTxBatches(QueryOutgoingTxBatchesRequest)
      returns (QueryOutgoingTxBatchesResponse) {}
  rpc BatchRequestByNonce(QueryBatchRequestByNonceRequest)
      returns (QueryBatchRequestByNonceResponse) {}
  rpc BatchConfirms(QueryBatchConfirmsRequest)
      returns (QueryBatchConfirmsResponse) {}
  rpc ERC20ToDenom(QueryERC20ToDenomRequest)
      returns (QueryERC20ToDenomResponse) {}
  rpc DenomToERC20(QueryDenomToERC20Request)
      returns (QueryDenomToERC20Response) {}
  rpc GetAttestations(QueryAttestationsRequest)
      returns (QueryAttestationsResponse) {}

  rpc GetErc20ToDenoms(QueryErc20ToDenoms)
      returns (QueryErc20ToDenomsResponse) {}

  rpc GetPendingSendToEth(QueryPendingSendToEth)
      returns (QueryPendingSendToEthResponse) {}

  rpc GetBridgeTax(google.protobuf.Empty) returns (QueryBridgeTaxResponse) {
    option (google.api.http).get = "/palomachain/paloma/gravity/bridge_tax";
  }

  rpc GetAllBridgeTransferLimits(google.protobuf.Empty)
      returns (QueryAllBridgeTransferLimitsResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/gravity/all_bridge_transfer_limits";
  }
}

message QueryParamsRequest {}
message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryLastPendingBatchRequestByAddrRequest { string address = 1; }
message QueryLastPendingBatchRequestByAddrResponse {
  repeated OutgoingTxBatch batch = 1 [ (gogoproto.nullable) = false ];
}
message QueryOutgoingTxBatchesRequest {
  string chain_reference_id = 1;
  string assignee = 2;
}

message QueryOutgoingTxBatchesResponse {
  repeated OutgoingTxBatch batches = 1 [ (gogoproto.nullable) = false ];
}

message QueryBatchRequestByNonceRequest {
  uint64 nonce = 1;
  string contract_address = 2;
}
message QueryBatchRequestByNonceResponse {
  OutgoingTxBatch batch = 1 [ (gogoproto.nullable) = false ];
}

message QueryBatchConfirmsRequest {
  uint64 nonce = 1;
  string contract_address = 2;
}
message QueryBatchConfirmsResponse {
  repeated MsgConfirmBatch confirms = 1 [ (gogoproto.nullable) = false ];
}

message QueryLastObservedGravityNonceRequest { 
  string chain_reference_id = 1;
}
message QueryLastObservedGravityNonceByAddrRequest { 
  string address = 1; 
  string chain_reference_id = 2;
}
message QueryLastObservedGravityNonceResponse { uint64 nonce = 1; }

message QueryLastObservedGravityBlockRequest { 
  string chain_reference_id = 1;
}
message QueryLastObservedGravityBlockResponse { uint64 block = 1; }

message QueryERC20ToDenomRequest {
  string erc20 = 1;
  string chain_reference_id = 2;
}
message QueryERC20ToDenomResponse { string denom = 1; }

message QueryDenomToERC20Request {
  string denom = 1;
  string chain_reference_id = 2;
}
message QueryDenomToERC20Response { string erc20 = 1; }

// QueryAttestationsRequest defines the request structure for getting recent
// attestations with optional query parameters. By default, a limited set of
// recent attestations will be returned, defined by 'limit'. These attestations
// can be ordered ascending or descending by nonce, that defaults to ascending.
// Filtering criteria may also be provided, including nonce, claim type, and
// height. Note, that an attestation will be returned if it matches ANY of the
// filter query parameters provided.
message QueryAttestationsRequest {
  reserved 6;
  reserved "use_v1_key";

  // limit defines how many attestations to limit in the response.
  uint64 limit = 1;
  // order_by provides ordering of atteststions by nonce in the response. Either
  // 'asc' or 'desc' can be provided. If no value is provided, it defaults to
  // 'asc'.
  string order_by = 2;
  // claim_type allows filtering attestations by Ethereum claim type.
  string claim_type = 3;
  // nonce allows filtering attestations by Ethereum claim nonce.
  uint64 nonce = 4;
  // height allows filtering attestations by Ethereum claim height.
  uint64 height = 5;
  // reference id of remote chain for which to query.
  string chain_reference_id = 7;
}

message QueryAttestationsResponse {
  repeated Attestation attestations = 1 [ (gogoproto.nullable) = false ];
}

message QueryErc20ToDenoms {}
message QueryErc20ToDenomsResponse {
  repeated ERC20ToDenom erc20_to_denom = 1 [ (gogoproto.nullable) = false ];
}

message QueryPendingSendToEth { string sender_address = 1; }
message QueryPendingSendToEthResponse {
  repeated OutgoingTransferTx transfers_in_batches = 1
      [ (gogoproto.nullable) = false ];
  repeated OutgoingTransferTx unbatched_transfers = 2
      [ (gogoproto.nullable) = false ];
}

message QueryBridgeTaxResponse {
  BridgeTax bridge_tax = 1;
}

message QueryAllBridgeTransferLimitsResponse {
  repeated BridgeTransferLimit bridge_transfer_limits = 1;
}
