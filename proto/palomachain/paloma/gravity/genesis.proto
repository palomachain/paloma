syntax = "proto3";
package palomachain.paloma.gravity;

import "gogoproto/gogo.proto";
import "palomachain/paloma/gravity/types.proto";
import "palomachain/paloma/gravity/msgs.proto";
import "palomachain/paloma/gravity/batch.proto";
import "palomachain/paloma/gravity/attestation.proto";
import "cosmos/base/v1beta1/coin.proto";
import "palomachain/paloma/gravity/params.proto";
option go_package = "github.com/palomachain/paloma/x/gravity/types";

// GenesisState struct, containing all persistant data required by the Gravity
// module
message GenesisState {
  Params params = 1;
  GravityNonces gravity_nonces = 2 [ (gogoproto.nullable) = false ];
  repeated OutgoingTxBatch batches = 3 [ (gogoproto.nullable) = false ];
  repeated MsgConfirmBatch batch_confirms = 4 [ (gogoproto.nullable) = false ];
  repeated Attestation attestations = 7 [ (gogoproto.nullable) = false ];
  repeated ERC20ToDenom erc20_to_denoms = 9 [ (gogoproto.nullable) = false ];
  repeated OutgoingTransferTx unbatched_transfers = 10
      [ (gogoproto.nullable) = false ];
}

// GravityCounters contains the many noces and counters required to maintain the
// bridge state in the genesis
message GravityNonces {
  // the last observed Gravity.sol contract event nonce
  uint64 last_observed_nonce = 1;
  // the last batch Cosmos chain block that batch slashing has completed for
  // there is an individual batch nonce for each token type so this removes
  // the need to store them all
  uint64 last_slashed_batch_block = 2;
  // the last transaction id from the Gravity TX pool, this prevents ID
  // duplication during chain upgrades
  uint64 last_tx_pool_id = 3;
  // the last batch id from the Gravity batch pool, this prevents ID duplication
  // during chain upgrades
  uint64 last_batch_id = 4;
}