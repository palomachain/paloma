syntax = "proto3";
package palomachain.paloma.consensus;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "palomachain/paloma/consensus/consensus_queue.proto";
import "palomachain/paloma/consensus/params.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/palomachain/paloma/v2/x/consensus/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/palomachain/paloma/consensus/params";
  }
  // Queries a list of QueuedMessagesForSigning items.
  rpc QueuedMessagesForSigning(QueryQueuedMessagesForSigningRequest)
      returns (QueryQueuedMessagesForSigningResponse) {
    option (google.api.http).get =
        "/palomachain/paloma/consensus/queued_messages_for_signing";
  }

  // Queries a list of QueuedMessagesForRelaying items.
  rpc QueuedMessagesForRelaying(QueryQueuedMessagesForRelayingRequest)
      returns (QueryQueuedMessagesForRelayingResponse) {
    option (google.api.http).get =
        "/palomachain/paloma/consensus/queued_messages_for_relaying";
  }

  // Queries a list of QueuedMessagesForGasEstimation items.
  rpc QueuedMessagesForGasEstimation(QueryQueuedMessagesForGasEstimationRequest)
      returns (QueryQueuedMessagesForGasEstimationResponse) {
    option (google.api.http).get =
        "/palomachain/paloma/consensus/queued_messages_for_gas_estimation";
  }

  // Queries a list of QueuedMessagesForAttesting items.
  rpc QueuedMessagesForAttesting(QueryQueuedMessagesForAttestingRequest)
      returns (QueryQueuedMessagesForAttestingResponse) {
    option (google.api.http).get =
        "/palomachain/paloma/consensus/queued_messages_for_attesting";
  }

  // Queries a list of MessagesInQueue items.
  rpc MessagesInQueue(QueryMessagesInQueueRequest)
      returns (QueryMessagesInQueueResponse) {
    option (google.api.http).get =
        "/palomachain/paloma/consensus/messages_in_queue/{queueTypeName}";
  }

  // Queries one message by ID.
  rpc MessageByID(QueryMessageByIDRequest)
      returns (MessageQueryResult) {
    option (google.api.http).get =
        "/palomachain/paloma/consensus/{queueTypeName}/message/{id}";
  }

  // Queries a list of GetAllQueueNames items.
  rpc GetAllQueueNames(QueryGetAllQueueNamesRequest)
      returns (QueryGetAllQueueNamesResponse) {
    option (google.api.http).get =
        "/palomachain/paloma/consensus/get_all_queue_names";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryQueuedMessagesForSigningRequest {
  bytes valAddress = 1 [ (gogoproto.casttype) =
                             "github.com/cosmos/cosmos-sdk/types.ValAddress" ];
  string queueTypeName = 2;
}

message QueryQueuedMessagesForSigningResponse {
  repeated MessageToSign messageToSign = 1;
}

message MessageToSign {
  bytes nonce = 1;
  uint64 id = 2;
  bytes bytesToSign = 3;
  google.protobuf.Any msg = 4;
}

message ValidatorSignature {
  bytes valAddress = 1 [ (gogoproto.casttype) =
                             "github.com/cosmos/cosmos-sdk/types.ValAddress" ];
  bytes signature = 2;
  bytes extraData = 3;

  string externalAccountAddress = 4;
  bytes publicKey = 5;
}

message MessageWithSignatures {
  reserved 8;
  reserved "evidence";

  bytes nonce = 1;
  uint64 id = 2;
  google.protobuf.Any msg = 3;
  repeated ValidatorSignature signData = 4;
  bytes bytesToSign = 5;
  bytes publicAccessData = 6;
  bytes errorData = 7;
  uint64 valsetID = 9;
  uint64 gasEstimate = 10;
}

message MessageQueryResult {
  MessageWithSignatures message = 1;
  repeated Evidence evidence = 2;
  repeated GasEstimate gasEstimates = 3;
}

message QueryMessageByIDRequest {
  string queueTypeName                    = 1;
  uint64 id                               = 2;
}

message QueryMessagesInQueueRequest {
  string queueTypeName = 1;
  bytes skipEvidenceProvidedByValAddress = 2
      [ (gogoproto.casttype) =
            "github.com/cosmos/cosmos-sdk/types.ValAddress" ];
}

message QueryMessagesInQueueResponse {
  repeated MessageWithSignatures messages = 1 [ (gogoproto.nullable) = false ];
}

message QueryQueuedMessagesForRelayingRequest {
  string queueTypeName = 1;
  bytes valAddress = 2 [ (gogoproto.casttype) =
                             "github.com/cosmos/cosmos-sdk/types.ValAddress" ];
}

message QueryQueuedMessagesForRelayingResponse {
  repeated MessageWithSignatures messages = 1 [ (gogoproto.nullable) = false ];
}

message QueryQueuedMessagesForAttestingRequest {
  string queueTypeName = 1;
  bytes valAddress = 2 [ (gogoproto.casttype) =
                             "github.com/cosmos/cosmos-sdk/types.ValAddress" ];
}

message QueryQueuedMessagesForAttestingResponse {
  repeated MessageWithSignatures messages = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetAllQueueNamesRequest {}

message QueryGetAllQueueNamesResponse { repeated string queues = 1; }

message QueryQueuedMessagesForGasEstimationRequest {
  string queueTypeName = 1;
  bytes valAddress = 2 [ (gogoproto.casttype) =
                             "github.com/cosmos/cosmos-sdk/types.ValAddress" ];
}

message QueryQueuedMessagesForGasEstimationResponse {
  repeated MessageWithSignatures messagesToEstimate = 1 [ (gogoproto.nullable) = false ];
}
