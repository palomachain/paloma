syntax = "proto3";
package palomachain.paloma.skyway;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "palomachain/paloma/skyway/attestation.proto";
import "palomachain/paloma/skyway/batch.proto";
import "palomachain/paloma/skyway/bridge_tax.proto";
import "palomachain/paloma/skyway/bridge_transfer_limit.proto";
import "palomachain/paloma/skyway/genesis.proto";
import "palomachain/paloma/skyway/light_node_sale_contract.proto";
import "palomachain/paloma/skyway/msgs.proto";
import "palomachain/paloma/skyway/params.proto";
import "palomachain/paloma/skyway/pool.proto";
import "palomachain/paloma/skyway/types.proto";

option go_package = "github.com/palomachain/paloma/x/skyway/types";

// Query defines the gRPC querier service
service Query {
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/palomachain/paloma/skyway/params";
  }

  rpc LastPendingBatchRequestByAddr(QueryLastPendingBatchRequestByAddrRequest)
      returns (QueryLastPendingBatchRequestByAddrResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/last-pending-batch-request-by-addr/{address}";
  }

  rpc LastObservedSkywayNonce(QueryLastObservedSkywayNonceRequest)
      returns (QueryLastObservedSkywayNonceResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/last-observed-skyway-nonce/{chain_reference_id}";
  }

  rpc LastObservedSkywayNonceByAddr(QueryLastObservedSkywayNonceByAddrRequest)
      returns (QueryLastObservedSkywayNonceResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/last-observed-skyway-nonce/{chain_reference_id}";
  }

  rpc LastObservedSkywayBlock(QueryLastObservedSkywayBlockRequest)
      returns (QueryLastObservedSkywayBlockResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/last-observed-skyway-block/{chain_reference_id}";
  }

  rpc OutgoingTxBatches(QueryOutgoingTxBatchesRequest)
      returns (QueryOutgoingTxBatchesResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/outgoing-tx-batches/{chain_reference_id}";
  }

  rpc BatchRequestByNonce(QueryBatchRequestByNonceRequest)
      returns (QueryBatchRequestByNonceResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/batch-request-by-nonce";
  }

  rpc BatchConfirms(QueryBatchConfirmsRequest)
      returns (QueryBatchConfirmsResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/batch-confirms";
  }

  rpc ERC20ToDenom(QueryERC20ToDenomRequest)
      returns (QueryERC20ToDenomResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/erc20-to-denom/{chain_reference_id}";
  }

  rpc DenomToERC20(QueryDenomToERC20Request)
      returns (QueryDenomToERC20Response) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/denom-to-erc20/{chain_reference_id}";
  }

  rpc GetAttestations(QueryAttestationsRequest)
      returns (QueryAttestationsResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/attestations/{chain_reference_id}";
  }

  rpc GetErc20ToDenoms(QueryErc20ToDenoms)
      returns (QueryErc20ToDenomsResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/erc20-to-denoms";
  }

  rpc GetPendingSendToRemote(QueryPendingSendToRemote)
      returns (QueryPendingSendToRemoteResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/pending-send-to-remote/{sender_address}";
  }

  rpc GetBridgeTaxes(google.protobuf.Empty) returns (QueryBridgeTaxesResponse) {
    option (google.api.http).get = "/palomachain/paloma/skyway/bridge-taxes";
  }

  rpc GetBridgeTransferLimits(google.protobuf.Empty)
      returns (QueryBridgeTransferLimitsResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/all-bridge-transfer-limits";
  }

  rpc GetLightNodeSaleContracts(google.protobuf.Empty)
      returns (QueryLightNodeSaleContractsResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/light-node-sale-contracts";
  }

  rpc LastPendingBatchForGasEstimation(QueryLastPendingBatchForGasEstimationRequest)
      returns (QueryLastPendingBatchForGasEstimationResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/skyway/pending-batch-for-gas-estimation/{chain_reference_id}";
  }
}

message QueryParamsRequest {}
message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryLastPendingBatchRequestByAddrRequest { string address = 1; }
message QueryLastPendingBatchRequestByAddrResponse {
  repeated OutgoingTxBatch batch = 1 [ (gogoproto.nullable) = false ];
}
message QueryOutgoingTxBatchesRequest {
  string chain_reference_id = 1;
  string assignee = 2;
}

message QueryOutgoingTxBatchesResponse {
  repeated OutgoingTxBatch batches = 1 [ (gogoproto.nullable) = false ];
}

message QueryBatchRequestByNonceRequest {
  uint64 nonce = 1;
  string contract_address = 2;
}
message QueryBatchRequestByNonceResponse {
  OutgoingTxBatch batch = 1 [ (gogoproto.nullable) = false ];
}

message QueryBatchConfirmsRequest {
  uint64 nonce = 1;
  string contract_address = 2;
}
message QueryBatchConfirmsResponse {
  repeated MsgConfirmBatch confirms = 1 [ (gogoproto.nullable) = false ];
}

message QueryLastObservedSkywayNonceRequest { 
  string chain_reference_id = 1;
}
message QueryLastObservedSkywayNonceByAddrRequest { 
  string address = 1; 
  string chain_reference_id = 2;
}
message QueryLastObservedSkywayNonceResponse { uint64 nonce = 1; }

message QueryLastObservedSkywayBlockRequest { 
  string chain_reference_id = 1;
}
message QueryLastObservedSkywayBlockResponse { uint64 block = 1; }

message QueryERC20ToDenomRequest {
  string erc20 = 1;
  string chain_reference_id = 2;
}
message QueryERC20ToDenomResponse { string denom = 1; }

message QueryDenomToERC20Request {
  string denom = 1;
  string chain_reference_id = 2;
}
message QueryDenomToERC20Response { string erc20 = 1; }

// QueryAttestationsRequest defines the request structure for getting recent
// attestations with optional query parameters. By default, a limited set of
// recent attestations will be returned, defined by 'limit'. These attestations
// can be ordered ascending or descending by nonce, that defaults to ascending.
// Filtering criteria may also be provided, including nonce, claim type, and
// height. Note, that an attestation will be returned if it matches ANY of the
// filter query parameters provided.
message QueryAttestationsRequest {
  reserved 6;
  reserved "use_v1_key";

  // limit defines how many attestations to limit in the response.
  uint64 limit = 1;
  // order_by provides ordering of atteststions by nonce in the response. Either
  // 'asc' or 'desc' can be provided. If no value is provided, it defaults to
  // 'asc'.
  string order_by = 2;
  // claim_type allows filtering attestations by Ethereum claim type.
  string claim_type = 3;
  // nonce allows filtering attestations by Ethereum claim nonce.
  uint64 nonce = 4;
  // height allows filtering attestations by Ethereum claim height.
  uint64 height = 5;
  // reference id of remote chain for which to query.
  string chain_reference_id = 7;
}

message QueryAttestationsResponse {
  repeated Attestation attestations = 1 [ (gogoproto.nullable) = false ];
}

message QueryErc20ToDenoms {}
message QueryErc20ToDenomsResponse {
  repeated ERC20ToDenom erc20_to_denom = 1 [ (gogoproto.nullable) = false ];
}

message QueryPendingSendToRemote { string sender_address = 1; }
message QueryPendingSendToRemoteResponse {
  repeated OutgoingTransferTx transfers_in_batches = 1
      [ (gogoproto.nullable) = false ];
  repeated OutgoingTransferTx unbatched_transfers = 2
      [ (gogoproto.nullable) = false ];
}

message QueryBridgeTaxesResponse {
  repeated BridgeTax bridge_taxes = 1;
}

message QueryBridgeTransferLimitsResponse {
  message LimitUsage {
    BridgeTransferLimit limit = 1;
    BridgeTransferUsage usage = 2;
  }

  repeated LimitUsage limits = 1;
}

message QueryLightNodeSaleContractsResponse {
  repeated LightNodeSaleContract light_node_sale_contracts = 1;
}

message QueryLastPendingBatchForGasEstimationRequest { 
  // Address of the asking to estimate
  bytes address = 1 [ (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress" ];
  // Chain reference id of the remote chain to query for
  string chain_reference_id = 2;
}

message QueryLastPendingBatchForGasEstimationResponse {
  repeated OutgoingTxBatch batch = 1 [ (gogoproto.nullable) = false ];
}
