syntax = "proto3";
package palomachain.paloma.metrix;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "palomachain/paloma/metrix/params.proto";
import "palomachain/paloma/metrix/metrix.proto";
import "amino/amino.proto";

option go_package = "github.com/palomachain/paloma/x/metrix/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/palomachain/paloma/metrix/params";
  }
  // Validator queries the metrics of a validator participating in consensus.
  rpc Validator(QueryValidatorRequest) returns (QueryValidatorResponse) {
    option (google.api.http).get = "/palomachain/paloma/metrix/validator";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryValidatorRequest is the request type for the Query/Validator RPC method.
message QueryValidatorRequest {
  // cons_address holds the consensus address of the validator you want to query for.
  string cons_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryValidatorResponse {
  // validator_metrics holds the collected metrics info of requested val cons address
  ValidatorMetrics val_metrics = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}
