syntax = "proto3";
package palomachain.paloma.paloma;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "palomachain/paloma/paloma/light_node_client_feegranter.proto";
import "palomachain/paloma/paloma/light_node_client_funds.proto";
import "palomachain/paloma/paloma/params.proto";

option go_package = "github.com/palomachain/paloma/x/paloma/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/palomachain/paloma/paloma/params";
  }

  rpc GetLightNodeClientFunds(google.protobuf.Empty)
      returns (QueryLightNodeClientFundsResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/paloma/light_node_client_funds";
  }

  rpc GetLightNodeClientFeegranter(google.protobuf.Empty)
      returns (QueryLightNodeClientFeegranterResponse) {
    option (google.api.http).get =
      "/palomachain/paloma/paloma/light_node_client_feegranter";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {
}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryLightNodeClientFundsResponse {
  repeated LightNodeClientFunds light_node_client_funds = 1;
}

message QueryLightNodeClientFeegranterResponse {
  LightNodeClientFeegranter light_node_client_feegranter = 1;
}
