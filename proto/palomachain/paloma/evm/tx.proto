syntax = "proto3";
package palomachain.paloma.evm;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "palomachain/paloma/valset/common.proto";

option go_package = "github.com/palomachain/paloma/x/evm/types";

service Msg {
  rpc RemoveSmartContractDeployment(MsgRemoveSmartContractDeploymentRequest)
      returns (RemoveSmartContractDeploymentResponse);

  // ===== User Smart Contracts =====
  rpc UploadUserSmartContract(MsgUploadUserSmartContractRequest)
      returns (MsgUploadUserSmartContractResponse);

  rpc RemoveUserSmartContract(MsgRemoveUserSmartContractRequest)
      returns (google.protobuf.Empty);

  rpc DeployUserSmartContract(MsgDeployUserSmartContractRequest)
      returns (MsgDeployUserSmartContractResponse);
}

message MsgRemoveSmartContractDeploymentRequest {
  option (cosmos.msg.v1.signer) = "metadata";
  reserved 1;  
  reserved "Sender";
  uint64 smartContractID = 2;
  string chainReferenceID = 3;

  palomachain.paloma.valset.MsgMetadata metadata = 4
      [ (gogoproto.nullable) = false ];
}
message RemoveSmartContractDeploymentResponse {}

message MsgUploadUserSmartContractRequest {
  option (cosmos.msg.v1.signer) = "metadata";

  palomachain.paloma.valset.MsgMetadata metadata = 1
      [ (gogoproto.nullable) = false ];

  string title = 2;
  string abi_json = 3;
  string bytecode = 4;
  string constructor_input = 5;
}

message MsgUploadUserSmartContractResponse {
  uint64 id = 1;
}

message MsgRemoveUserSmartContractRequest {
  option (cosmos.msg.v1.signer) = "metadata";

  palomachain.paloma.valset.MsgMetadata metadata = 1
      [ (gogoproto.nullable) = false ];

  uint64 id = 2;
}

message MsgDeployUserSmartContractRequest {
  option (cosmos.msg.v1.signer) = "metadata";

  palomachain.paloma.valset.MsgMetadata metadata = 1
      [ (gogoproto.nullable) = false ];

  uint64 id = 2;
  string target_chain = 3;
}

message MsgDeployUserSmartContractResponse {
  uint64 msg_id = 1;
}
