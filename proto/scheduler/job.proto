syntax = "proto3";
package palomachain.paloma.scheduler;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/palomachain/paloma/x/scheduler/types";

message Job {

  // chosen by the owner
  string ID = 1;

  bytes owner = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  Routing routing = 3;

  string gasDenom = 4;

  // this is the job definition. It is something arbitrary as it's different for every chain.
  google.protobuf.Any definition = 5;

  // this is the payload for the job
  google.protobuf.Any payload = 6;

  bool isPayloadModifiable = 7;

  Permissions permissions = 8;
}

message Permissions {
  repeated JobRunnerActor whitelist = 1; 
  repeated JobRunnerActor blacklist = 2; 
}

// JobRunnerActor defines an actor that runs the job. It can be a smart contract from any other
// external chain, a direct user on paloma, a smart contract in paloma, etc,...
message JobRunnerActor {
  string chainType = 1;
  string chainReferenceID = 2;

  bytes address = 3;
}

message Routing {
  // routing information
  string chainType = 1; // evm, bitcoin?, cosmos,...
  string chainReferenceID = 2; // terra, bitcoin, ropsten, eth-main, binance,...
}


// TODO
// ----------------
/* message Coin { */
/*   string denom = 1; */
/*   string amount = 2; */
/*   Routing routing = 3; */
/* } */

/* message JobWallet { */
/*   string JobID = 1; */
/*   repeated Coin coins = 2; */
  
/*   Routing routing = 3; */
/* } */
