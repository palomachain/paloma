// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	cryptotypes "github.com/cosmos/cosmos-sdk/crypto/types"
	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"
)

// AccountI is an autogenerated mock type for the AccountI type
type AccountI struct {
	mock.Mock
}

// GetAccountNumber provides a mock function with given fields:
func (_m *AccountI) GetAccountNumber() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetAddress provides a mock function with given fields:
func (_m *AccountI) GetAddress() cosmos_sdktypes.AccAddress {
	ret := _m.Called()

	var r0 cosmos_sdktypes.AccAddress
	if rf, ok := ret.Get(0).(func() cosmos_sdktypes.AccAddress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.AccAddress)
		}
	}

	return r0
}

// GetPubKey provides a mock function with given fields:
func (_m *AccountI) GetPubKey() cryptotypes.PubKey {
	ret := _m.Called()

	var r0 cryptotypes.PubKey
	if rf, ok := ret.Get(0).(func() cryptotypes.PubKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cryptotypes.PubKey)
		}
	}

	return r0
}

// GetSequence provides a mock function with given fields:
func (_m *AccountI) GetSequence() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// ProtoMessage provides a mock function with given fields:
func (_m *AccountI) ProtoMessage() {
	_m.Called()
}

// Reset provides a mock function with given fields:
func (_m *AccountI) Reset() {
	_m.Called()
}

// SetAccountNumber provides a mock function with given fields: _a0
func (_m *AccountI) SetAccountNumber(_a0 uint64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAddress provides a mock function with given fields: _a0
func (_m *AccountI) SetAddress(_a0 cosmos_sdktypes.AccAddress) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(cosmos_sdktypes.AccAddress) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPubKey provides a mock function with given fields: _a0
func (_m *AccountI) SetPubKey(_a0 cryptotypes.PubKey) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(cryptotypes.PubKey) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSequence provides a mock function with given fields: _a0
func (_m *AccountI) SetSequence(_a0 uint64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *AccountI) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewAccountI interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountI creates a new instance of AccountI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountI(t mockConstructorTestingTNewAccountI) *AccountI {
	mock := &AccountI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
