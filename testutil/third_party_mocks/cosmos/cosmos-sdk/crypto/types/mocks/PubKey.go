// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	bytes "github.com/cometbft/cometbft/libs/bytes"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/crypto/types"
)

// PubKey is an autogenerated mock type for the PubKey type
type PubKey struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *PubKey) Address() bytes.HexBytes {
	ret := _m.Called()

	var r0 bytes.HexBytes
	if rf, ok := ret.Get(0).(func() bytes.HexBytes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bytes.HexBytes)
		}
	}

	return r0
}

// Bytes provides a mock function with given fields:
func (_m *PubKey) Bytes() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Equals provides a mock function with given fields: _a0
func (_m *PubKey) Equals(_a0 types.PubKey) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.PubKey) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ProtoMessage provides a mock function with given fields:
func (_m *PubKey) ProtoMessage() {
	_m.Called()
}

// Reset provides a mock function with given fields:
func (_m *PubKey) Reset() {
	_m.Called()
}

// String provides a mock function with given fields:
func (_m *PubKey) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *PubKey) Type() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// VerifySignature provides a mock function with given fields: msg, sig
func (_m *PubKey) VerifySignature(msg []byte, sig []byte) bool {
	ret := _m.Called(msg, sig)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(msg, sig)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewPubKey interface {
	mock.TestingT
	Cleanup(func())
}

// NewPubKey creates a new instance of PubKey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPubKey(t mockConstructorTestingTNewPubKey) *PubKey {
	mock := &PubKey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
