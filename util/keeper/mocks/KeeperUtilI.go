// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	codec "github.com/cosmos/cosmos-sdk/codec"
	keeper "github.com/palomachain/paloma/util/keeper"

	mock "github.com/stretchr/testify/mock"

	types "cosmossdk.io/store/types"
)

// KeeperUtilI is an autogenerated mock type for the KeeperUtilI type
type KeeperUtilI[T codec.ProtoMarshaler] struct {
	mock.Mock
}

// Load provides a mock function with given fields: store, pu, key
func (_m *KeeperUtilI[T]) Load(store types.KVStore, pu keeper.ProtoUnmarshaler, key []byte) (T, error) {
	ret := _m.Called(store, pu, key)

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(types.KVStore, keeper.ProtoUnmarshaler, []byte) (T, error)); ok {
		return rf(store, pu, key)
	}
	if rf, ok := ret.Get(0).(func(types.KVStore, keeper.ProtoUnmarshaler, []byte) T); ok {
		r0 = rf(store, pu, key)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(types.KVStore, keeper.ProtoUnmarshaler, []byte) error); ok {
		r1 = rf(store, pu, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: store, pm, key, val
func (_m *KeeperUtilI[T]) Save(store types.KVStore, pm keeper.ProtoMarshaler, key []byte, val codec.ProtoMarshaler) error {
	ret := _m.Called(store, pm, key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.KVStore, keeper.ProtoMarshaler, []byte, codec.ProtoMarshaler) error); ok {
		r0 = rf(store, pm, key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKeeperUtilI interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeeperUtilI creates a new instance of KeeperUtilI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeeperUtilI[T codec.ProtoMarshaler](t mockConstructorTestingTNewKeeperUtilI) *KeeperUtilI[T] {
	mock := &KeeperUtilI[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
