// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	keeper "github.com/palomachain/paloma/v2/util/keeper"
	mock "github.com/stretchr/testify/mock"

	proto "github.com/cosmos/gogoproto/proto"

	types "github.com/cosmos/cosmos-sdk/types"
)

// KVStoreWrapper is an autogenerated mock type for the KVStoreWrapper type
type KVStoreWrapper[T proto.Message] struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, key
func (_m *KVStoreWrapper[T]) Get(ctx types.Context, key keeper.Byter) (T, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, keeper.Byter) (T, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(types.Context, keeper.Byter) T); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(types.Context, keeper.Byter) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Iterate provides a mock function with given fields: ctx, fn
func (_m *KVStoreWrapper[T]) Iterate(ctx types.Context, fn func([]byte, T) bool) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Iterate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, func([]byte, T) bool) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *KVStoreWrapper[T]) Set(ctx types.Context, key keeper.Byter, value T) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, keeper.Byter, T) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewKVStoreWrapper creates a new instance of KVStoreWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKVStoreWrapper[T proto.Message](t interface {
	mock.TestingT
	Cleanup(func())
},
) *KVStoreWrapper[T] {
	mock := &KVStoreWrapper[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
